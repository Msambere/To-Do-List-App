(()=>{"use strict";function t(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof e||"[object String]"===e?new Date(t):new Date(NaN)}function e(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function n(n,a){const o=t(n);return isNaN(a)?e(n,NaN):a?(o.setDate(o.getDate()+a),o):o}function a(e){if(!(n=e,n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)||"number"==typeof e))return!1;var n;const a=t(e);return!isNaN(Number(a))}const o={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function r(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const i={date:r({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:r({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:r({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},d={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function s(t){return(e,n)=>{let a;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,o=n?.width?String(n.width):e;a=t.formattingValues[o]||t.formattingValues[e]}else{const e=t.defaultWidth,o=n?.width?String(n.width):t.defaultWidth;a=t.values[o]||t.values[e]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function c(t){return(e,n={})=>{const a=n.width,o=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],r=e.match(o);if(!r)return null;const i=r[0],d=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(d)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(d):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(d);let c;return c=t.valueCallback?t.valueCallback(s):s,c=n.valueCallback?n.valueCallback(c):c,{value:c,rest:e.slice(i.length)}}}var u;const l={code:"en-US",formatDistance:(t,e,n)=>{let a;const r=o[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:i,formatRelative:(t,e,n,a)=>d[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:s({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:s({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:s({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:s({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:s({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(u={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(u.matchPattern);if(!n)return null;const a=n[0],o=t.match(u.parsePattern);if(!o)return null;let r=u.valueCallback?u.valueCallback(o[0]):o[0];return r=e.valueCallback?e.valueCallback(r):r,{value:r,rest:t.slice(a.length)}}),era:c({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:c({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:c({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:c({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:c({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let m={};function h(){return m}Math.pow(10,8);const f=6048e5,g=864e5;function p(e){const n=t(e);return n.setHours(0,0,0,0),n}function w(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function y(n){const a=t(n);return function(t,e){const n=p(t),a=p(e),o=n.getTime()-w(n),r=a.getTime()-w(a);return Math.round((o-r)/g)}(a,function(n){const a=t(n),o=e(n,0);return o.setFullYear(a.getFullYear(),0,1),o.setHours(0,0,0,0),o}(a))+1}function b(e,n){const a=h(),o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,r=t(e),i=r.getDay(),d=(i<o?7:0)+i-o;return r.setDate(r.getDate()-d),r.setHours(0,0,0,0),r}function C(t){return b(t,{weekStartsOn:1})}function v(n){const a=t(n),o=a.getFullYear(),r=e(n,0);r.setFullYear(o+1,0,4),r.setHours(0,0,0,0);const i=C(r),d=e(n,0);d.setFullYear(o,0,4),d.setHours(0,0,0,0);const s=C(d);return a.getTime()>=i.getTime()?o+1:a.getTime()>=s.getTime()?o:o-1}function E(n){const a=t(n),o=C(a).getTime()-function(t){const n=v(t),a=e(t,0);return a.setFullYear(n,0,4),a.setHours(0,0,0,0),C(a)}(a).getTime();return Math.round(o/f)+1}function D(n,a){const o=t(n),r=o.getFullYear(),i=h(),d=a?.firstWeekContainsDate??a?.locale?.options?.firstWeekContainsDate??i.firstWeekContainsDate??i.locale?.options?.firstWeekContainsDate??1,s=e(n,0);s.setFullYear(r+1,0,d),s.setHours(0,0,0,0);const c=b(s,a),u=e(n,0);u.setFullYear(r,0,d),u.setHours(0,0,0,0);const l=b(u,a);return o.getTime()>=c.getTime()?r+1:o.getTime()>=l.getTime()?r:r-1}function x(n,a){const o=t(n),r=b(o,a).getTime()-function(t,n){const a=h(),o=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,r=D(t,n),i=e(t,0);return i.setFullYear(r,0,o),i.setHours(0,0,0,0),b(i,n)}(o,a).getTime();return Math.round(r/f)+1}function k(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const M={y(t,e){const n=t.getFullYear(),a=n>0?n:1-n;return k("yy"===e?a%100:a,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):k(n+1,2)},d:(t,e)=>k(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>k(t.getHours()%12||12,e.length),H:(t,e)=>k(t.getHours(),e.length),m:(t,e)=>k(t.getMinutes(),e.length),s:(t,e)=>k(t.getSeconds(),e.length),S(t,e){const n=e.length,a=t.getMilliseconds();return k(Math.floor(a*Math.pow(10,n-3)),e.length)}},L={G:function(t,e,n){const a=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),a=e>0?e:1-e;return n.ordinalNumber(a,{unit:"year"})}return M.y(t,e)},Y:function(t,e,n,a){const o=D(t,a),r=o>0?o:1-o;return"YY"===e?k(r%100,2):"Yo"===e?n.ordinalNumber(r,{unit:"year"}):k(r,e.length)},R:function(t,e){return k(v(t),e.length)},u:function(t,e){return k(t.getFullYear(),e.length)},Q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return k(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return k(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){const a=t.getMonth();switch(e){case"M":case"MM":return M.M(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){const a=t.getMonth();switch(e){case"L":return String(a+1);case"LL":return k(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){const o=x(t,a);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):k(o,e.length)},I:function(t,e,n){const a=E(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):k(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):M.d(t,e)},D:function(t,e,n){const a=y(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):k(a,e.length)},E:function(t,e,n){const a=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){const o=t.getDay(),r=(o-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(r);case"ee":return k(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){const o=t.getDay(),r=(o-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(r);case"cc":return k(r,e.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){const a=t.getDay(),o=0===a?7:a;switch(e){case"i":return String(o);case"ii":return k(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){const a=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){const a=t.getHours();let o;switch(o=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){const a=t.getHours();let o;switch(o=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return M.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):M.H(t,e)},K:function(t,e,n){const a=t.getHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):k(a,e.length)},k:function(t,e,n){let a=t.getHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):k(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):M.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):M.s(t,e)},S:function(t,e){return M.S(t,e)},X:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return S(o);case"XXXX":case"XX":return A(o);default:return A(o,":")}},x:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return S(o);case"xxxx":case"xx":return A(o);default:return A(o,":")}},O:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+T(o,":");default:return"GMT"+A(o,":")}},z:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+T(o,":");default:return"GMT"+A(o,":")}},t:function(t,e,n,a){const o=a._originalDate||t;return k(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,a){return k((a._originalDate||t).getTime(),e.length)}};function T(t,e=""){const n=t>0?"-":"+",a=Math.abs(t),o=Math.floor(a/60),r=a%60;return 0===r?n+String(o):n+String(o)+e+k(r,2)}function S(t,e){return t%60==0?(t>0?"-":"+")+k(Math.abs(t)/60,2):A(t,e)}function A(t,e=""){const n=t>0?"-":"+",a=Math.abs(t);return n+k(Math.floor(a/60),2)+e+k(a%60,2)}const P=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},q=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},W={p:q,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],a=n[1],o=n[2];if(!o)return P(t,e);let r;switch(a){case"P":r=e.dateTime({width:"short"});break;case"PP":r=e.dateTime({width:"medium"});break;case"PPP":r=e.dateTime({width:"long"});break;default:r=e.dateTime({width:"full"})}return r.replace("{{date}}",P(a,e)).replace("{{time}}",q(o,e))}},B=["D","DD"],N=["YY","YYYY"];function Y(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const O=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,j=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,I=/^'([^]*?)'?$/,H=/''/g,F=/[a-zA-Z]/;function Q(e,n,o){const r=h(),i=o?.locale??r.locale??l,d=o?.firstWeekContainsDate??o?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,s=o?.weekStartsOn??o?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,c=t(e);if(!a(c))throw new RangeError("Invalid time value");const u={firstWeekContainsDate:d,weekStartsOn:s,locale:i,_originalDate:c};return n.match(j).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,W[e])(t,i.formatLong):t})).join("").match(O).map((function(t){if("''"===t)return"'";const a=t[0];if("'"===a)return function(t){const e=t.match(I);return e?e[1].replace(H,"'"):t}(t);const r=L[a];if(r)return o?.useAdditionalWeekYearTokens||(d=t,-1===N.indexOf(d))||Y(t,n,String(e)),!o?.useAdditionalDayOfYearTokens&&function(t){return-1!==B.indexOf(t)}(t)&&Y(t,n,String(e)),r(c,t,i.localize,u);var d;if(a.match(F))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return t})).join("")}function $(t,e,n,a,o,r){this.title=t,this.description=e,this.dueDate=function(t){return Q(""===t?(new Date).toLocaleString():new Date(t).toLocaleString(),"M-dd-y")}(n),this.priority=a,this.todos=[],this.notes=o,this.projectTag=r,this.status=""}function z(t,e){this.projectTag=t;let n=e.filter((e=>e.projectTag===t));this.tdList=n}const G=[];function X(t,e,n,a,o,r,i){const d=new $(t,e,n,a,o,r,i);var s;return G.push(d),G.sort(((t,e)=>new Date(t.dueDate)-new Date(e.dueDate))),(s=G).forEach((t=>{t["data-index"]=s.findIndex((e=>e.title===t.title))})),G}function J(e){const a=[];e.forEach((e=>{(function(e){return function(e,n){return+t(e)<+t(n)}(e.dueDate,n(new Date,-1))})(e)&&a.push(e["data-index"].toString())})),document.querySelectorAll(".todo").forEach((t=>{const e=t.getAttribute("data-index");a.includes(e)&&t.classList.add("overdue")}))}function R(t){const e=[];return t.forEach((t=>{const n=t.projectTag;"Daily"===n||""===n||e.includes(n)||e.push(n)})),e}function U(t){const e=n(new Date,10);return[t.filter((t=>"High"===t.priority&&t.dueDate<=Q(e,"M-dd-y"))),t.filter((t=>"High"===t.priority&&t.dueDate>Q(e,"M-dd-y")||"Medium"===t.priority&&t.dueDate>Q(e,"M-dd-y"))),t.filter((t=>"Low"===t.priority&&t.dueDate<=Q(e,"M-dd-y")||"Medium"===t.priority&&t.dueDate<=Q(e,"M-dd-y"))),t.filter((t=>"Low"===t.priority&&t.dueDate>Q(e,"M-dd-y")))]}function _(t,e,n){const a=document.createElement("div");a.classList.add("form-row");const o=document.createElement("label");o.setAttribute("for",t),o.textContent=e;const r=document.createElement("input");return r.setAttribute("type",n),r.setAttribute("name",t),r.setAttribute("id",t),a.appendChild(o),a.appendChild(r),a}function V(t,e,n){const a=document.createElement("div");a.classList.add("form-row");const o=document.createElement("label");o.setAttribute("for",t),o.textContent=e;const r=document.createElement("select");return r.setAttribute("id",t),r.setAttribute("name",t),n.forEach((t=>{const e=document.createElement("option");e.textContent=t,r.appendChild(e)})),a.appendChild(o),a.appendChild(r),a}function K(t){let e="";return e=1===t?"task is":"tasks are",e}function Z(t){const e=document.createElement("h2");return e.classList.add("pHeader"),e.textContent=t,e}function tt(t){const e=document.createElement("div");return e.classList.add("list-display"),e.classList.add("tdList-container"),t.forEach((t=>{const n=at(t);e.appendChild(n)})),e}function et(t){const e=document.createElement("div");e.classList.add("quad-display"),e.classList.add("quad-container");for(let n=1;n<5;n++){const a=nt(t[n-1]);a.classList.add(`quad${n}`),e.appendChild(a)}const n=document.createElement("div");n.classList.add("quad-grid-label"),n.classList.add("urgent"),n.textContent="URGENT",e.appendChild(n);const a=document.createElement("div");a.classList.add("quad-grid-label"),a.classList.add("later"),a.textContent="NOT URGENT",e.appendChild(a);const o=document.createElement("div");o.classList.add("quad-grid-label"),o.classList.add("rotate"),o.classList.add("important"),o.textContent="IMPORTANT",e.appendChild(o);const r=document.createElement("div");return r.classList.add("quad-grid-label"),r.classList.add("rotate"),r.classList.add("unimportant"),r.textContent=" NOT IMPORTANT",e.appendChild(r),e}function nt(t){const e=document.createElement("div");return e.classList.add("tdList-container"),t.forEach((t=>{const n=at(t);e.appendChild(n)})),e}function at(t){const e=document.createElement("div");e.classList.add("todo"),e.setAttribute("data-index",t["data-index"]);const n=document.createElement("img");n.classList.add("checkbox"),n.src="../src/Images/unchecked-box.png";const a=document.createElement("div");a.classList.add("todo-title"),a.textContent=t.title;const o=document.createElement("div");o.classList.add("dueDate-div"),o.textContent=t.dueDate;const r=document.createElement("div");r.classList.add("priority-div"),r.textContent=t.priority,r.style.color=function(t){const{priority:e}=t;return"High"===e?"red":"Medium"===e?"blue":"Low"===e?"black":"grey"}(t);const i=document.createElement("img");i.classList.add("edit"),i.src="../src/Images/pencil.png";const d=document.createElement("img");return d.classList.add("delete"),d.src="../src/Images/delete.png",e.appendChild(n),e.appendChild(a),e.appendChild(o),e.appendChild(r),e.appendChild(i),e.appendChild(d),e}function ot(t,e){const n=e[t.getAttribute("data-index")].status;"complete"!==n?(t.classList.remove("complete"),t.firstChild.src="../src/Images/unchecked-box.png"):"complete"===n&&(t.classList.add("complete"),t.firstChild.src="../src/Images/checked-checkbox.png")}X("Create user constructor","Create a function that will store user information like id and avatar","01-25-2024","High","test notes","To-do App"),X("Look up data-fns library","See what functions are available","12-29-2023","High","","To-do App"),X("Go to the gym","Complete the daily workout","","High","","Daily"),X("tester1","checking fn","04-11-1989","Low","","Test 1"),X("tester2","checking fn","05-18-2020","Medium","","Test 2"),X("Always today","always today",new Date,"Low","","Test 1"),X("Today plus 2","checking fn",n(new Date,2),"High","","Test 2"),X("Today plus 5","checking fn",n(new Date,5),"Medium","","Test 3"),X("read the newspaper","Complete the daily workout","","Medium","","Daily"),X("Buy a yacht","Complete the daily workout","","Low","","Daily");const rt=document.getElementById("content"),it=document.getElementById("main");document.getElementById("all").classList.toggle("active");let dt=[];function st(){const t=localStorage.getItem("tdList");dt=JSON.parse(t)}function ct(t){localStorage.setItem("tdList",JSON.stringify(t)),st()}var ut;localStorage.getItem("tdList")||localStorage.setItem("tdList",JSON.stringify(G)),st(),ut=dt,rt.appendChild(function(t){const e=document.createElement("dialog");e.classList.add("modal"),e.setAttribute("id","newTodoDialog");const n=document.createElement("form");n.setAttribute("method","dialog"),n.setAttribute("id","myForm");const a=_("td-title","Title of Todo","text"),o=_("td-description","Description of Todo","text"),r=_("td-dueDate","Due Date:","date"),i=V("td-priority","Priority",["High","Medium","Low"]);console.log(t);const d=V("td-projectTag","Project",R(t)),s=document.createElement("div");s.classList.add("form-buttons");const c=document.createElement("button");c.setAttribute("id","cancelBtn"),c.setAttribute("value","cancel"),c.setAttribute("formmethod","dialog"),c.textContent="Cancel";const u=document.createElement("button");return u.setAttribute("id","confirmBtn"),u.setAttribute("value","default"),u.textContent="Confirm",s.appendChild(c),s.appendChild(u),n.appendChild(a),n.appendChild(o),n.appendChild(r),n.appendChild(i),n.appendChild(d),n.appendChild(s),e.appendChild(n),e}(ut)),rt.appendChild(function(){const t=document.createElement("dialog");t.classList.add("modal"),t.setAttribute("id","editTodoDialog");const e=document.createElement("form");e.setAttribute("method","dialog"),e.setAttribute("id","editForm");const n=function(t,e,n){const a=document.createElement("div");a.classList.add("form-row");const o=document.createElement("label");o.setAttribute("for",t),o.textContent="Choose a property";const r=document.createElement("select");return r.setAttribute("id",t),r.setAttribute("name",t),["title","description","dueDate","priority","notes","project tag"].forEach((t=>{const e=document.createElement("option");e.textContent=t,r.appendChild(e)})),a.appendChild(o),a.appendChild(r),a}("td-property"),a=function(t,e,n){const a=document.createElement("div");a.classList.add("form-row");const o=document.createElement("label");o.setAttribute("for",t),o.textContent="";const r=document.createElement("input");return r.setAttribute("type","text"),r.setAttribute("name",t),r.setAttribute("id",t),a.appendChild(o),a.appendChild(r),a}("newValue"),o=document.createElement("div");o.classList.add("form-buttons");const r=document.createElement("button");r.setAttribute("id","editCancelBtn"),r.setAttribute("value","cancel"),r.setAttribute("formmethod","dialog"),r.textContent="Cancel";const i=document.createElement("button");return i.setAttribute("id","editConfirmBtn"),i.setAttribute("value","default"),i.textContent="Confirm",o.appendChild(r),o.appendChild(i),e.appendChild(n),e.appendChild(a),e.appendChild(o),t.appendChild(e),t}()),function(t){it.appendChild(Z("All tasks")),it.classList.contains("quad")?it.appendChild(et(U(t))):it.appendChild(tt(t)),J(t)}(ut);const lt=document.getElementById("main");Et(),document.querySelectorAll(".todo").forEach((t=>{ot(t,dt)})),console.table(dt);const mt=document.querySelector(".toggle-box"),ht=document.querySelector(".circle"),ft=document.getElementById("toggle-checkbox");ht.addEventListener("click",(()=>(lt.classList.toggle("quad"),xt(),void kt()))),mt.addEventListener("click",(()=>{ft.checked?ht.style.transform="translateX(42px)":ht.style.transform="translateX(0px)"}));const gt=document.querySelectorAll(".navBtn");console.log(gt),gt.forEach((t=>{t.addEventListener("click",(t=>{xt(),Dt(t),kt()}))}));const pt=document.getElementById("projects"),wt=document.getElementById("PBContainer");pt.addEventListener("click",(t=>{if(console.log(wt),!wt.firstChild){Dt(t),function(t){const e=document.getElementById("PBContainer");R(t).forEach((t=>{const n=document.createElement("button");n.classList.add("button"),n.classList.add("project-btn"),n.textContent=t,e.appendChild(n)}))}(dt),xt(),lt.appendChild(Z("All Projects")),lt.appendChild(function(t){const e=document.createElement("div");e.classList.add("projectOverviews-container"),e.classList.add("list-display");const n=function(t){const e=R(t),n=[];return e.forEach((e=>{const a=new z(e,t);n.push(a)})),n}(t);return n.forEach((t=>{const n=function(t){const e=document.createElement("div");e.classList.add("project-overview");const n=document.createElement("h3");n.classList.add("overview-title"),n.textContent=t.projectTag;const a=function(t){const e=t.filter((t=>"complete"===t.status)).length,n=t.length,a=U(t);return{numTds:n,numCompleted:e,numQ1:a[0].length,numQ2:a[1].length,numQ3:a[2].length,numQ4:a[3].length}}(t.tdList),o=document.createElement("p");o.textContent=`${a.numCompleted} / ${a.numTds} tasks completed`;const r=document.createElement("p"),i=K(a.numQ1);r.textContent=`${a.numQ1}  ${i} urgent and important.`;const d=document.createElement("p"),s=K(a.numQ2);d.textContent=`${a.numQ2} ${s} not urgent and important.`;const c=document.createElement("p"),u=K(a.numQ3);c.textContent=`${a.numQ3} ${u} urgent and unimportant.`;const l=document.createElement("p"),m=K(a.numQ4);return l.textContent=`${a.numQ4} ${m} not urgent and unimportant.`,e.appendChild(n),e.appendChild(o),e.appendChild(r),e.appendChild(d),e.appendChild(c),e.appendChild(l),e}(t);e.appendChild(n)})),e}(dt)),Et();const e=document.querySelectorAll(".project-btn");e.forEach((t=>t.addEventListener("click",(t=>{xt(),Dt(t),kt(),e.forEach((t=>t.remove()))}))))}}));const yt=document.getElementById("new-todo-btn"),bt=document.getElementById("newTodoDialog"),Ct=bt.querySelector("#cancelBtn"),vt=bt.querySelector("#confirmBtn");function Et(){document.querySelectorAll(".checkbox").forEach((t=>t.addEventListener("click",(t=>function(t){const e=t.target.parentElement;console.log(e),function(t,e){const n=e[t].status;console.log(`Original Status: ${n}`),""===e[t].status?e[t].status="complete":e[t].status="",console.log(`New status: ${e[t].status}`),e[t].status}(e.getAttribute("data-index"),dt),ot(e,dt),ct(dt),console.table(dt)}(t))))),document.querySelectorAll(".delete").forEach((t=>t.addEventListener("click",(t=>function(t){!function(t,e){const n=e.findIndex((e=>e.title===t));e.splice(n,1),e.sort(((t,e)=>t.dueDate-e.dueDate))}(t.target.parentElement.firstChild.nextSibling.textContent,dt);t.target.parentElement.remove(),ct(dt)}(t))))),function(){const t=document.querySelectorAll(".edit"),e=document.getElementById("editTodoDialog"),n=e.querySelector("#editCancelBtn"),a=e.querySelector("#editConfirmBtn");t.forEach((t=>t.addEventListener("click",(t=>{const o=t.target.parentElement.firstChild.nextSibling.textContent,r=dt.findIndex((t=>t.title===o));e.showModal(),a.addEventListener("click",(t=>{t.preventDefault(),function(t,e){const n=document.getElementById("td-property").value,a=document.getElementById("newValue").value;e[t][n]=a,e[t]}(r,dt),dt.sort(((t,e)=>new Date(t.dueDate)-new Date(e.dueDate))),document.getElementById("editForm").reset(),e.close(),ct(dt),xt(),kt()})),n.addEventListener("click",(()=>{document.getElementById("editForm").reset(),e.close()}))}))))}()}function Dt(t){"+ Add New Todo"!=t.target.textContent&&(document.querySelectorAll(".active").forEach((t=>t.classList.toggle("active"))),t.target.classList.toggle("active"))}function xt(){for(;lt.firstChild;)lt.removeChild(lt.firstChild)}function kt(){const t=document.querySelector(".active").textContent;let e="";switch(t){case"Today":e=function(t){return t.filter((t=>t.dueDate===Q(new Date,"M-dd-y")&&"Daily"!==t.projectTag))}(dt);break;case"This Week":e=function(t){return t.filter((t=>t.dueDate>=Q(new Date,"M-dd-y")&&t.dueDate<=Q(n(new Date,7),"M-dd-y")&&"Daily"!==t.projectTag))}(dt);break;case"All Tasks":e=dt;break;case"Daily Tasks":e=function(t){return t.filter((t=>"Daily"===t.projectTag))}(dt);break;case"+ Add New Todo":break;default:e=function(t,e){return t.filter((t=>t.projectTag===e))}(dt,t)}lt.appendChild(Z(t)),lt.classList.contains("quad")?(lt.appendChild(et(U(e))),J(dt)):(lt.appendChild(tt(e)),J(dt)),Et(),document.querySelectorAll(".todo").forEach((t=>{ot(t,dt)}))}yt.addEventListener("click",(()=>{yt.classList.toggle("clicked"),bt.showModal()})),vt.addEventListener("click",(t=>{t.preventDefault();const e=function(t){const e=new $(document.getElementById("td-title").value,document.getElementById("td-description").value,Q(n(document.getElementById("td-dueDate").value,1),"M-dd-y"),document.getElementById("td-priority").value,[],"",document.getElementById("td-projectTag").value);return t.push(e),t.sort(((t,e)=>new Date(t.dueDate)-new Date(e.dueDate))),function(t){t.forEach((e=>{e["data-index"]=t.findIndex((t=>t.title===e.title))}))}(t),e}(dt);!function(t){const e=at(t),n=dt.findIndex((e=>e.title===t.title)),a=document.querySelectorAll(".todo");if(0!==n){const t=dt[n-1].title;a.forEach((n=>{n.textContent.includes(t)&&n.after(e)}))}else{const t=dt[1].title;a.forEach((n=>{n.textContent.includes(t)&&n.before(e)}))}}(e),Et(),document.getElementById("myForm").reset(),bt.close(),ct(dt),J(dt)})),Ct.addEventListener("click",(()=>{document.getElementById("myForm").reset(),bt.close()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUIsU0FDMUMsR0FBZ0IsSUFBWkUsRUFBZSxDQUNqQixNQUFNMkssRUFBZTVHLEdBQWdCL0QsRUFBVSxHQUFHaEMsTUFDbEQwTSxFQUFRcEwsU0FBU1MsSUFDWEEsRUFBSWtCLFlBQVlmLFNBQVN5SyxJQUMzQjVLLEVBQUk2SyxNQUFNSCxFQUNaLEdBRUosS0FBTyxDQUNMLE1BQU1JLEVBQWM5RyxHQUFnQixHQUFHL0YsTUFDdkMwTSxFQUFRcEwsU0FBU1MsSUFDWEEsRUFBSWtCLFlBQVlmLFNBQVMySyxJQUMzQjlLLEVBQUkrSyxPQUFPTCxFQUNiLEdBRUosQ0FDRixDQXhDRU0sQ0FBZ0JSLEdBQ2hCNUUsS0FDQTlGLFNBQVMrRCxlQUFlLFVBQVVrRyxRQUNsQ3JCLEdBQWNzQixRQUNkekYsR0FBWVAsSUFDWnZFLEVBQWdCdUUsR0FBZ0IsSUFHbENvQixHQUFVYSxpQkFBaUIsU0FBUyxLQUNsQ25HLFNBQVMrRCxlQUFlLFVBQVVrRyxRQUNsQ3JCLEdBQWNzQixPQUFPLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy90b0RhdGUubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2NvbnN0cnVjdEZyb20ubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2FkZERheXMubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzVmFsaWQubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzRGF0ZS5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4ubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4ubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2RlZmF1bHRPcHRpb25zLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9jb25zdGFudHMubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZEYXkubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0RGF5T2ZZZWFyLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZZZWFyLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mV2Vlay5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZklTT1dlZWsubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldElTT1dlZWtZZWFyLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRJU09XZWVrLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mSVNPV2Vla1llYXIubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldFdlZWtZZWFyLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRXZWVrLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mV2Vla1llYXIubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvYWRkTGVhZGluZ1plcm9zLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3Byb3RlY3RlZFRva2Vucy5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZm9ybWF0Lm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9jb25zdHJ1Y3RvcnMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvdGVzdFRETGlzdC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9saXN0TWFuYWdtZW50LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzQmVmb3JlLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdWJEYXlzLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9uZXdURC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9zaXRlZHluYW1pYy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9zaXRlQ29uc3RhbnRzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vc3JjL2VkaXRURC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gYXJndW1lbnQgLSBUaGUgdmFsdWUgdG8gY29udmVydFxuICpcbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIGNvbnN0IGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7XG5cbiAgLy8gQ2xvbmUgdGhlIGRhdGVcbiAgaWYgKFxuICAgIGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICh0eXBlb2YgYXJndW1lbnQgPT09IFwib2JqZWN0XCIgJiYgYXJnU3RyID09PSBcIltvYmplY3QgRGF0ZV1cIilcbiAgKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBhcmd1bWVudC5jb25zdHJ1Y3RvcigrYXJndW1lbnQpO1xuICB9IGVsc2UgaWYgKFxuICAgIHR5cGVvZiBhcmd1bWVudCA9PT0gXCJudW1iZXJcIiB8fFxuICAgIGFyZ1N0ciA9PT0gXCJbb2JqZWN0IE51bWJlcl1cIiB8fFxuICAgIHR5cGVvZiBhcmdTdHIgPT09IFwic3RyaW5nXCIgfHxcbiAgICBhcmdTdHIgPT09IFwiW29iamVjdCBTdHJpbmddXCJcbiAgKSB7XG4gICAgLy8gVE9ETzogQ2FuIHdlIGdldCByaWQgb2YgYXM/XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUT0RPOiBDYW4gd2UgZ2V0IHJpZCBvZiBhcz9cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHRvRGF0ZTtcbiIsIi8qKlxuICogQG5hbWUgY29uc3RydWN0RnJvbVxuICogQGNhdGVnb3J5IEdlbmVyaWMgSGVscGVyc1xuICogQHN1bW1hcnkgQ29uc3RydWN0cyBhIGRhdGUgdXNpbmcgdGhlIHJlZmVyZW5jZSBkYXRlIGFuZCB0aGUgdmFsdWVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBmdW5jdGlvbiBjb25zdHJ1Y3RzIGEgbmV3IGRhdGUgdXNpbmcgdGhlIGNvbnN0cnVjdG9yIGZyb20gdGhlIHJlZmVyZW5jZVxuICogZGF0ZSBhbmQgdGhlIGdpdmVuIHZhbHVlLiBJdCBoZWxwcyB0byBidWlsZCBnZW5lcmljIGZ1bmN0aW9ucyB0aGF0IGFjY2VwdFxuICogZGF0ZSBleHRlbnNpb25zLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIHJlZmVyZW5jZSBkYXRlIHRvIHRha2UgY29uc3RydWN0b3IgZnJvbVxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNyZWF0ZSB0aGUgZGF0ZVxuICpcbiAqIEByZXR1cm5zIERhdGUgaW5pdGlhbGl6ZWQgdXNpbmcgdGhlIGdpdmVuIGRhdGUgYW5kIHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tICdkYXRlLWZucydcbiAqXG4gKiAvLyBBIGZ1bmN0aW9uIHRoYXQgY2xvbmVzIGEgZGF0ZSBwcmVzZXJ2aW5nIHRoZSBvcmlnaW5hbCB0eXBlXG4gKiBmdW5jdGlvbiBjbG9uZURhdGU8RGF0ZVR5cGUgZXh0ZW5kcyBEYXRlKGRhdGU6IERhdGVUeXBlKTogRGF0ZVR5cGUge1xuICogICByZXR1cm4gY29uc3RydWN0RnJvbShcbiAqICAgICBkYXRlLCAvLyBVc2UgY29udHJ1c3RvciBmcm9tIHRoZSBnaXZlbiBkYXRlXG4gKiAgICAgZGF0ZS5nZXRUaW1lKCkgLy8gVXNlIHRoZSBkYXRlIHZhbHVlIHRvIGNyZWF0ZSBhIG5ldyBkYXRlXG4gKiAgIClcbiAqIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cnVjdEZyb20oZGF0ZSwgdmFsdWUpIHtcbiAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkYXRlLmNvbnN0cnVjdG9yKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IERhdGUodmFsdWUpO1xuICB9XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgY29uc3RydWN0RnJvbTtcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGFkZERheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSBhbW91bnQgLSBUaGUgYW1vdW50IG9mIGRheXMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbmV3IGRhdGUgd2l0aCB0aGUgZGF5cyBhZGRlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgMTAgZGF5cyB0byAxIFNlcHRlbWJlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gYWRkRGF5cyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgMTApXG4gKiAvLz0+IFRodSBTZXAgMTEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkRGF5cyhkYXRlLCBhbW91bnQpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGlmIChpc05hTihhbW91bnQpKSByZXR1cm4gY29uc3RydWN0RnJvbShkYXRlLCBOYU4pO1xuICBpZiAoIWFtb3VudCkge1xuICAgIC8vIElmIDAgZGF5cywgbm8tb3AgdG8gYXZvaWQgY2hhbmdpbmcgdGltZXMgaW4gdGhlIGhvdXIgYmVmb3JlIGVuZCBvZiBEU1RcbiAgICByZXR1cm4gX2RhdGU7XG4gIH1cbiAgX2RhdGUuc2V0RGF0ZShfZGF0ZS5nZXREYXRlKCkgKyBhbW91bnQpO1xuICByZXR1cm4gX2RhdGU7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgYWRkRGF5cztcbiIsImltcG9ydCB7IGlzRGF0ZSB9IGZyb20gXCIuL2lzRGF0ZS5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXShodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZSlcbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGRhdGUgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyBUaGUgZGF0ZSBpcyB2YWxpZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZChkYXRlKSB7XG4gIGlmICghaXNEYXRlKGRhdGUpICYmIHR5cGVvZiBkYXRlICE9PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihfZGF0ZSkpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGlzVmFsaWQ7XG4iLCIvKipcbiAqIEBuYW1lIGlzRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gdmFsdWUgYSBkYXRlP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLiBUaGUgZnVuY3Rpb24gd29ya3MgZm9yIGRhdGVzIHRyYW5zZmVycmVkIGFjcm9zcyBpZnJhbWVzLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBEYXRlXVwiKVxuICApO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGlzRGF0ZTtcbiIsImNvbnN0IGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiBcImxlc3MgdGhhbiBhIHNlY29uZFwiLFxuICAgIG90aGVyOiBcImxlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kc1wiLFxuICB9LFxuXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiBcIjEgc2Vjb25kXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHNlY29uZHNcIixcbiAgfSxcblxuICBoYWxmQU1pbnV0ZTogXCJoYWxmIGEgbWludXRlXCIsXG5cbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogXCJsZXNzIHRoYW4gYSBtaW51dGVcIixcbiAgICBvdGhlcjogXCJsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXNcIixcbiAgfSxcblxuICB4TWludXRlczoge1xuICAgIG9uZTogXCIxIG1pbnV0ZVwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBtaW51dGVzXCIsXG4gIH0sXG5cbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6IFwiYWJvdXQgMSBob3VyXCIsXG4gICAgb3RoZXI6IFwiYWJvdXQge3tjb3VudH19IGhvdXJzXCIsXG4gIH0sXG5cbiAgeEhvdXJzOiB7XG4gICAgb25lOiBcIjEgaG91clwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBob3Vyc1wiLFxuICB9LFxuXG4gIHhEYXlzOiB7XG4gICAgb25lOiBcIjEgZGF5XCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IGRheXNcIixcbiAgfSxcblxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogXCJhYm91dCAxIHdlZWtcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0gd2Vla3NcIixcbiAgfSxcblxuICB4V2Vla3M6IHtcbiAgICBvbmU6IFwiMSB3ZWVrXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHdlZWtzXCIsXG4gIH0sXG5cbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiBcImFib3V0IDEgbW9udGhcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0gbW9udGhzXCIsXG4gIH0sXG5cbiAgeE1vbnRoczoge1xuICAgIG9uZTogXCIxIG1vbnRoXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IG1vbnRoc1wiLFxuICB9LFxuXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiBcImFib3V0IDEgeWVhclwiLFxuICAgIG90aGVyOiBcImFib3V0IHt7Y291bnR9fSB5ZWFyc1wiLFxuICB9LFxuXG4gIHhZZWFyczoge1xuICAgIG9uZTogXCIxIHllYXJcIixcbiAgICBvdGhlcjogXCJ7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiBcIm92ZXIgMSB5ZWFyXCIsXG4gICAgb3RoZXI6IFwib3ZlciB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6IFwiYWxtb3N0IDEgeWVhclwiLFxuICAgIG90aGVyOiBcImFsbW9zdCB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXREaXN0YW5jZSA9ICh0b2tlbiwgY291bnQsIG9wdGlvbnMpID0+IHtcbiAgbGV0IHJlc3VsdDtcblxuICBjb25zdCB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKFwie3tjb3VudH19XCIsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnM/LmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuIFwiaW4gXCIgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyBcIiBhZ29cIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiAob3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgY29uc3QgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBidWlsZEZvcm1hdExvbmdGbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuLm1qc1wiO1xuXG5jb25zdCBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJFRUVFLCBNTU1NIGRvLCB5XCIsXG4gIGxvbmc6IFwiTU1NTSBkbywgeVwiLFxuICBtZWRpdW06IFwiTU1NIGQsIHlcIixcbiAgc2hvcnQ6IFwiTU0vZGQveXl5eVwiLFxufTtcblxuY29uc3QgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwiaDptbTpzcyBhIHp6enpcIixcbiAgbG9uZzogXCJoOm1tOnNzIGEgelwiLFxuICBtZWRpdW06IFwiaDptbTpzcyBhXCIsXG4gIHNob3J0OiBcImg6bW0gYVwiLFxufTtcblxuY29uc3QgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogXCJ7e2RhdGV9fSwge3t0aW1lfX1cIixcbiAgc2hvcnQ6IFwie3tkYXRlfX0sIHt7dGltZX19XCIsXG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJmdWxsXCIsXG4gIH0pLFxuXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6IFwiZnVsbFwiLFxuICB9KSxcblxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6IFwiZnVsbFwiLFxuICB9KSxcbn07XG4iLCJjb25zdCBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6IFwiUFwiLFxufTtcblxuZXhwb3J0IGNvbnN0IGZvcm1hdFJlbGF0aXZlID0gKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykgPT5cbiAgZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBUaGUgbG9jYWxpemUgZnVuY3Rpb24gYXJndW1lbnQgY2FsbGJhY2sgd2hpY2ggYWxsb3dzIHRvIGNvbnZlcnQgcmF3IHZhbHVlIHRvXG4gKiB0aGUgYWN0dWFsIHR5cGUuXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqXG4gKiBAcmV0dXJucyBUaGUgY29udmVydGVkIHZhbHVlXG4gKi9cblxuLyoqXG4gKiBUaGUgbWFwIG9mIGxvY2FsaXplZCB2YWx1ZXMgZm9yIGVhY2ggd2lkdGguXG4gKi9cblxuLyoqXG4gKiBUaGUgaW5kZXggdHlwZSBvZiB0aGUgbG9jYWxlIHVuaXQgdmFsdWUuIEl0IHR5cGVzIGNvbnZlcnNpb24gb2YgdW5pdHMgb2ZcbiAqIHZhbHVlcyB0aGF0IGRvbid0IHN0YXJ0IGF0IDAgKGkuZS4gcXVhcnRlcnMpLlxuICovXG5cbi8qKlxuICogQ29udmVydHMgdGhlIHVuaXQgdmFsdWUgdG8gdGhlIHR1cGxlIG9mIHZhbHVlcy5cbiAqL1xuXG4vKipcbiAqIFRoZSB0dXBsZSBvZiBsb2NhbGl6ZWQgZXJhIHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBCQyxcbiAqIHRoZSBzZWNvbmQgZWxlbWVudCByZXByZXNlbnRzIEFELlxuICovXG5cbi8qKlxuICogVGhlIHR1cGxlIG9mIGxvY2FsaXplZCBxdWFydGVyIHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBRMS5cbiAqL1xuXG4vKipcbiAqIFRoZSB0dXBsZSBvZiBsb2NhbGl6ZWQgZGF5IHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBTdW5kYXkuXG4gKi9cblxuLyoqXG4gKiBUaGUgdHVwbGUgb2YgbG9jYWxpemVkIG1vbnRoIHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBKYW51YXJ5LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gKHZhbHVlLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IG9wdGlvbnM/LmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6IFwic3RhbmRhbG9uZVwiO1xuXG4gICAgbGV0IHZhbHVlc0FycmF5O1xuICAgIGlmIChjb250ZXh0ID09PSBcImZvcm1hdHRpbmdcIiAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucz8ud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID1cbiAgICAgICAgYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICBjb25zdCB3aWR0aCA9IG9wdGlvbnM/LndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbd2lkdGhdIHx8IGFyZ3MudmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gKHN0cmluZywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuXG4gICAgY29uc3QgbWF0Y2hQYXR0ZXJuID1cbiAgICAgICh3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdKSB8fFxuICAgICAgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuXG4gICAgY29uc3QgcGFyc2VQYXR0ZXJucyA9XG4gICAgICAod2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSkgfHxcbiAgICAgIGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcblxuICAgIGNvbnN0IGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucylcbiAgICAgID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIChwYXR0ZXJuKSA9PiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZykpXG4gICAgICA6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55IC0tIEkgY2hhbGxhbmdlIHlvdSB0byBmaXggdGhlIHR5cGVcbiAgICAgICAgZmluZEtleShwYXJzZVBhdHRlcm5zLCAocGF0dGVybikgPT4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpKTtcblxuICAgIGxldCB2YWx1ZTtcblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2tcbiAgICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgLS0gSSBjaGFsbGFuZ2UgeW91IHRvIGZpeCB0aGUgdHlwZVxuICAgICAgICBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpXG4gICAgICA6IHZhbHVlO1xuXG4gICAgY29uc3QgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG5cbiAgICByZXR1cm4geyB2YWx1ZSwgcmVzdCB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChcbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiZcbiAgICAgIHByZWRpY2F0ZShvYmplY3Rba2V5XSlcbiAgICApIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAobGV0IGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gKHN0cmluZywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3QgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcblxuICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICBsZXQgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2tcbiAgICAgID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKVxuICAgICAgOiBwYXJzZVJlc3VsdFswXTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55IC0tIEkgY2hhbGxhbmdlIHlvdSB0byBmaXggdGhlIHR5cGVcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIGNvbnN0IHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHsgdmFsdWUsIHJlc3QgfTtcbiAgfTtcbn1cbiIsImltcG9ydCB7IGZvcm1hdERpc3RhbmNlIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS5tanNcIjtcbmltcG9ydCB7IGZvcm1hdExvbmcgfSBmcm9tIFwiLi9lbi1VUy9fbGliL2Zvcm1hdExvbmcubWpzXCI7XG5pbXBvcnQgeyBmb3JtYXRSZWxhdGl2ZSB9IGZyb20gXCIuL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUubWpzXCI7XG5pbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gXCIuL2VuLVVTL19saWIvbG9jYWxpemUubWpzXCI7XG5pbXBvcnQgeyBtYXRjaCB9IGZyb20gXCIuL2VuLVVTL19saWIvbWF0Y2gubWpzXCI7XG5cbi8qKlxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF0oaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnApXG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3MpXG4gKi9cbmV4cG9ydCBjb25zdCBlblVTID0ge1xuICBjb2RlOiBcImVuLVVTXCIsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMCAvKiBTdW5kYXkgKi8sXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxLFxuICB9LFxufTtcblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBlblVTO1xuIiwiaW1wb3J0IHsgYnVpbGRMb2NhbGl6ZUZuIH0gZnJvbSBcIi4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuLm1qc1wiO1xuXG5jb25zdCBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogW1wiQlwiLCBcIkFcIl0sXG4gIGFiYnJldmlhdGVkOiBbXCJCQ1wiLCBcIkFEXCJdLFxuICB3aWRlOiBbXCJCZWZvcmUgQ2hyaXN0XCIsIFwiQW5ubyBEb21pbmlcIl0sXG59O1xuXG5jb25zdCBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFtcIjFcIiwgXCIyXCIsIFwiM1wiLCBcIjRcIl0sXG4gIGFiYnJldmlhdGVkOiBbXCJRMVwiLCBcIlEyXCIsIFwiUTNcIiwgXCJRNFwiXSxcbiAgd2lkZTogW1wiMXN0IHF1YXJ0ZXJcIiwgXCIybmQgcXVhcnRlclwiLCBcIjNyZCBxdWFydGVyXCIsIFwiNHRoIHF1YXJ0ZXJcIl0sXG59O1xuXG4vLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG5jb25zdCBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbXCJKXCIsIFwiRlwiLCBcIk1cIiwgXCJBXCIsIFwiTVwiLCBcIkpcIiwgXCJKXCIsIFwiQVwiLCBcIlNcIiwgXCJPXCIsIFwiTlwiLCBcIkRcIl0sXG4gIGFiYnJldmlhdGVkOiBbXG4gICAgXCJKYW5cIixcbiAgICBcIkZlYlwiLFxuICAgIFwiTWFyXCIsXG4gICAgXCJBcHJcIixcbiAgICBcIk1heVwiLFxuICAgIFwiSnVuXCIsXG4gICAgXCJKdWxcIixcbiAgICBcIkF1Z1wiLFxuICAgIFwiU2VwXCIsXG4gICAgXCJPY3RcIixcbiAgICBcIk5vdlwiLFxuICAgIFwiRGVjXCIsXG4gIF0sXG5cbiAgd2lkZTogW1xuICAgIFwiSmFudWFyeVwiLFxuICAgIFwiRmVicnVhcnlcIixcbiAgICBcIk1hcmNoXCIsXG4gICAgXCJBcHJpbFwiLFxuICAgIFwiTWF5XCIsXG4gICAgXCJKdW5lXCIsXG4gICAgXCJKdWx5XCIsXG4gICAgXCJBdWd1c3RcIixcbiAgICBcIlNlcHRlbWJlclwiLFxuICAgIFwiT2N0b2JlclwiLFxuICAgIFwiTm92ZW1iZXJcIixcbiAgICBcIkRlY2VtYmVyXCIsXG4gIF0sXG59O1xuXG5jb25zdCBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogW1wiU1wiLCBcIk1cIiwgXCJUXCIsIFwiV1wiLCBcIlRcIiwgXCJGXCIsIFwiU1wiXSxcbiAgc2hvcnQ6IFtcIlN1XCIsIFwiTW9cIiwgXCJUdVwiLCBcIldlXCIsIFwiVGhcIiwgXCJGclwiLCBcIlNhXCJdLFxuICBhYmJyZXZpYXRlZDogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICB3aWRlOiBbXG4gICAgXCJTdW5kYXlcIixcbiAgICBcIk1vbmRheVwiLFxuICAgIFwiVHVlc2RheVwiLFxuICAgIFwiV2VkbmVzZGF5XCIsXG4gICAgXCJUaHVyc2RheVwiLFxuICAgIFwiRnJpZGF5XCIsXG4gICAgXCJTYXR1cmRheVwiLFxuICBdLFxufTtcblxuY29uc3QgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogXCJhXCIsXG4gICAgcG06IFwicFwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pXCIsXG4gICAgbm9vbjogXCJuXCIsXG4gICAgbW9ybmluZzogXCJtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcIm5pZ2h0XCIsXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06IFwiQU1cIixcbiAgICBwbTogXCJQTVwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcIm5pZ2h0XCIsXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogXCJhLm0uXCIsXG4gICAgcG06IFwicC5tLlwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcIm5pZ2h0XCIsXG4gIH0sXG59O1xuXG5jb25zdCBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogXCJhXCIsXG4gICAgcG06IFwicFwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pXCIsXG4gICAgbm9vbjogXCJuXCIsXG4gICAgbW9ybmluZzogXCJpbiB0aGUgbW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJpbiB0aGUgYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJpbiB0aGUgZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcImF0IG5pZ2h0XCIsXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06IFwiQU1cIixcbiAgICBwbTogXCJQTVwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJpbiB0aGUgbW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJpbiB0aGUgYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJpbiB0aGUgZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcImF0IG5pZ2h0XCIsXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogXCJhLm0uXCIsXG4gICAgcG06IFwicC5tLlwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJpbiB0aGUgbW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJpbiB0aGUgYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJpbiB0aGUgZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcImF0IG5pZ2h0XCIsXG4gIH0sXG59O1xuXG5jb25zdCBvcmRpbmFsTnVtYmVyID0gKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykgPT4ge1xuICBjb25zdCBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YC5cbiAgLy9cbiAgLy8gYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcuXG5cbiAgY29uc3QgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBcInN0XCI7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBcIm5kXCI7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBcInJkXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBudW1iZXIgKyBcInRoXCI7XG59O1xuXG5leHBvcnQgY29uc3QgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXIsXG5cbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxuXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gICAgYXJndW1lbnRDYWxsYmFjazogKHF1YXJ0ZXIpID0+IHF1YXJ0ZXIgLSAxLFxuICB9KSxcblxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxuXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6IFwid2lkZVwiLFxuICB9KSxcblxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6IFwid2lkZVwiLFxuICB9KSxcbn07XG4iLCJpbXBvcnQgeyBidWlsZE1hdGNoRm4gfSBmcm9tIFwiLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4ubWpzXCI7XG5pbXBvcnQgeyBidWlsZE1hdGNoUGF0dGVybkZuIH0gZnJvbSBcIi4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi5tanNcIjtcblxuY29uc3QgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbmNvbnN0IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xuXG5jb25zdCBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2ksXG59O1xuY29uc3QgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV0sXG59O1xuXG5jb25zdCBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pLFxufTtcbmNvbnN0IHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXSxcbn07XG5cbmNvbnN0IG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxufTtcbmNvbnN0IHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbXG4gICAgL15qL2ksXG4gICAgL15mL2ksXG4gICAgL15tL2ksXG4gICAgL15hL2ksXG4gICAgL15tL2ksXG4gICAgL15qL2ksXG4gICAgL15qL2ksXG4gICAgL15hL2ksXG4gICAgL15zL2ksXG4gICAgL15vL2ksXG4gICAgL15uL2ksXG4gICAgL15kL2ksXG4gIF0sXG5cbiAgYW55OiBbXG4gICAgL15qYS9pLFxuICAgIC9eZi9pLFxuICAgIC9ebWFyL2ksXG4gICAgL15hcC9pLFxuICAgIC9ebWF5L2ksXG4gICAgL15qdW4vaSxcbiAgICAvXmp1bC9pLFxuICAgIC9eYXUvaSxcbiAgICAvXnMvaSxcbiAgICAvXm8vaSxcbiAgICAvXm4vaSxcbiAgICAvXmQvaSxcbiAgXSxcbn07XG5cbmNvbnN0IG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2ksXG59O1xuY29uc3QgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldLFxufTtcblxuY29uc3QgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG59O1xuY29uc3QgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6ICh2YWx1ZSkgPT4gcGFyc2VJbnQodmFsdWUsIDEwKSxcbiAgfSksXG5cbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICAgIHZhbHVlQ2FsbGJhY2s6IChpbmRleCkgPT4gaW5kZXggKyAxLFxuICB9KSxcblxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogXCJhbnlcIixcbiAgfSksXG5cbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcImFueVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxufTtcbiIsImxldCBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG4gIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRPcHRpb25zKG5ld09wdGlvbnMpIHtcbiAgZGVmYXVsdE9wdGlvbnMgPSBuZXdPcHRpb25zO1xufVxuIiwiLyoqXG4gKiBAbW9kdWxlIGNvbnN0YW50c1xuICogQHN1bW1hcnkgVXNlZnVsIGNvbnN0YW50c1xuICogQGRlc2NyaXB0aW9uXG4gKiBDb2xsZWN0aW9uIG9mIHVzZWZ1bCBkYXRlIGNvbnN0YW50cy5cbiAqXG4gKiBUaGUgY29uc3RhbnRzIGNvdWxkIGJlIGltcG9ydGVkIGZyb20gYGRhdGUtZm5zL2NvbnN0YW50c2A6XG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IG1heFRpbWUsIG1pblRpbWUgfSBmcm9tIFwiLi9jb25zdGFudHMvZGF0ZS1mbnMvY29uc3RhbnRzXCI7XG4gKlxuICogZnVuY3Rpb24gaXNBbGxvd2VkVGltZSh0aW1lKSB7XG4gKiAgIHJldHVybiB0aW1lIDw9IG1heFRpbWUgJiYgdGltZSA+PSBtaW5UaW1lO1xuICogfVxuICogYGBgXG4gKi9cblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIGRheXNJbldlZWtcbiAqIEBzdW1tYXJ5IERheXMgaW4gMSB3ZWVrLlxuICovXG5leHBvcnQgY29uc3QgZGF5c0luV2VlayA9IDc7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBkYXlzSW5ZZWFyXG4gKiBAc3VtbWFyeSBEYXlzIGluIDEgeWVhci5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhvdyBtYW55IGRheXMgaW4gYSB5ZWFyLlxuICpcbiAqIE9uZSB5ZWFycyBlcXVhbHMgMzY1LjI0MjUgZGF5cyBhY2NvcmRpbmcgdG8gdGhlIGZvcm11bGE6XG4gKlxuICogPiBMZWFwIHllYXIgb2NjdXJlcyBldmVyeSA0IHllYXJzLCBleGNlcHQgZm9yIHllYXJzIHRoYXQgYXJlIGRpdmlzYWJsZSBieSAxMDAgYW5kIG5vdCBkaXZpc2FibGUgYnkgNDAwLlxuICogPiAxIG1lYW4geWVhciA9ICgzNjUrMS80LTEvMTAwKzEvNDAwKSBkYXlzID0gMzY1LjI0MjUgZGF5c1xuICovXG5leHBvcnQgY29uc3QgZGF5c0luWWVhciA9IDM2NS4yNDI1O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWF4VGltZVxuICogQHN1bW1hcnkgTWF4aW11bSBhbGxvd2VkIHRpbWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IG1heFRpbWUgfSBmcm9tIFwiLi9jb25zdGFudHMvZGF0ZS1mbnMvY29uc3RhbnRzXCI7XG4gKlxuICogY29uc3QgaXNWYWxpZCA9IDg2NDAwMDAwMDAwMDAwMDEgPD0gbWF4VGltZTtcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBuZXcgRGF0ZSg4NjQwMDAwMDAwMDAwMDAxKTtcbiAqIC8vPT4gSW52YWxpZCBEYXRlXG4gKi9cbmV4cG9ydCBjb25zdCBtYXhUaW1lID0gTWF0aC5wb3coMTAsIDgpICogMjQgKiA2MCAqIDYwICogMTAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pblRpbWVcbiAqIEBzdW1tYXJ5IE1pbmltdW0gYWxsb3dlZCB0aW1lLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBtaW5UaW1lIH0gZnJvbSBcIi4vY29uc3RhbnRzL2RhdGUtZm5zL2NvbnN0YW50c1wiO1xuICpcbiAqIGNvbnN0IGlzVmFsaWQgPSAtODY0MDAwMDAwMDAwMDAwMSA+PSBtaW5UaW1lO1xuICogLy89PiBmYWxzZVxuICpcbiAqIG5ldyBEYXRlKC04NjQwMDAwMDAwMDAwMDAxKVxuICogLy89PiBJbnZhbGlkIERhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IG1pblRpbWUgPSAtbWF4VGltZTtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luV2Vla1xuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgd2Vlay5cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luV2VlayA9IDYwNDgwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luRGF5XG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBkYXkuXG4gKi9cbmV4cG9ydCBjb25zdCBtaWxsaXNlY29uZHNJbkRheSA9IDg2NDAwMDAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5NaW51dGVcbiAqIEBzdW1tYXJ5IE1pbGxpc2Vjb25kcyBpbiAxIG1pbnV0ZVxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5NaW51dGUgPSA2MDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luSG91clxuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgaG91clxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5Ib3VyID0gMzYwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luU2Vjb25kXG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBzZWNvbmRcbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luU2Vjb25kID0gMTAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJblllYXJcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luWWVhciA9IDUyNTYwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbk1vbnRoXG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgbW9udGguXG4gKi9cbmV4cG9ydCBjb25zdCBtaW51dGVzSW5Nb250aCA9IDQzMjAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWludXRlc0luRGF5XG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luRGF5ID0gMTQ0MDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbkhvdXJcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSBob3VyLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luSG91ciA9IDYwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbW9udGhzSW5RdWFydGVyXG4gKiBAc3VtbWFyeSBNb250aHMgaW4gMSBxdWFydGVyLlxuICovXG5leHBvcnQgY29uc3QgbW9udGhzSW5RdWFydGVyID0gMztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1vbnRoc0luWWVhclxuICogQHN1bW1hcnkgTW9udGhzIGluIDEgeWVhci5cbiAqL1xuZXhwb3J0IGNvbnN0IG1vbnRoc0luWWVhciA9IDEyO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgcXVhcnRlcnNJblllYXJcbiAqIEBzdW1tYXJ5IFF1YXJ0ZXJzIGluIDEgeWVhclxuICovXG5leHBvcnQgY29uc3QgcXVhcnRlcnNJblllYXIgPSA0O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luSG91clxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIGhvdXIuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5Ib3VyID0gMzYwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJbk1pbnV0ZVxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIG1pbnV0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJbk1pbnV0ZSA9IDYwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luRGF5XG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luRGF5ID0gc2Vjb25kc0luSG91ciAqIDI0O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luV2Vla1xuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIHdlZWsuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5XZWVrID0gc2Vjb25kc0luRGF5ICogNztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJblllYXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luWWVhciA9IHNlY29uZHNJbkRheSAqIGRheXNJblllYXI7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5Nb250aFxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIG1vbnRoXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5Nb250aCA9IHNlY29uZHNJblllYXIgLyAxMjtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJblF1YXJ0ZXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSBxdWFydGVyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luUXVhcnRlciA9IHNlY29uZHNJbk1vbnRoICogMztcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSBkYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGF0ZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgX2RhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mRGF5O1xuIiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIGNvbnN0IHV0Y0RhdGUgPSBuZXcgRGF0ZShcbiAgICBEYXRlLlVUQyhcbiAgICAgIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0TW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgZGF0ZS5nZXRIb3VycygpLFxuICAgICAgZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCksXG4gICAgKSxcbiAgKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn1cbiIsImltcG9ydCB7IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyB9IGZyb20gXCIuL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cy5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZZZWFyIH0gZnJvbSBcIi4vc3RhcnRPZlllYXIubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZ2V0RGF5T2ZZZWFyXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGF5IG9mIHRoZSB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBkYXkgb2YgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBkYXkgb2YgdGhlIHllYXIgaXMgMiBKdWx5IDIwMTQ/XG4gKiBjb25zdCByZXN1bHQgPSBnZXREYXlPZlllYXIobmV3IERhdGUoMjAxNCwgNiwgMikpXG4gKiAvLz0+IDE4M1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF5T2ZZZWFyKGRhdGUpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRpZmYgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoX2RhdGUsIHN0YXJ0T2ZZZWFyKF9kYXRlKSk7XG4gIGNvbnN0IGRheU9mWWVhciA9IGRpZmYgKyAxO1xuICByZXR1cm4gZGF5T2ZZZWFyO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldERheU9mWWVhcjtcbiIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luRGF5IH0gZnJvbSBcIi4vY29uc3RhbnRzLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZkRheSB9IGZyb20gXCIuL3N0YXJ0T2ZEYXkubWpzXCI7XG5pbXBvcnQgeyBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIH0gZnJvbSBcIi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy4gVGhpcyBtZWFucyB0aGF0IHRoZSB0aW1lcyBhcmUgcmVtb3ZlZFxuICogZnJvbSB0aGUgZGF0ZXMgYW5kIHRoZW4gdGhlIGRpZmZlcmVuY2UgaW4gZGF5cyBpcyBjYWxjdWxhdGVkLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlTGVmdCAtIFRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0gZGF0ZVJpZ2h0IC0gVGhlIGVhcmxpZXIgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5c1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBkYXlzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxMSAyMzowMDowMCBhbmQgMiBKdWx5IDIwMTIgMDA6MDA6MDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTIsIDYsIDIsIDAsIDApLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgMClcbiAqIClcbiAqIC8vPT4gMzY2XG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBkYXlzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxMSAyMzo1OTowMCBhbmQgMyBKdWx5IDIwMTEgMDA6MDE6MDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDMsIDAsIDEpLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgNTkpXG4gKiApXG4gKiAvLz0+IDFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSB7XG4gIGNvbnN0IHN0YXJ0T2ZEYXlMZWZ0ID0gc3RhcnRPZkRheShkYXRlTGVmdCk7XG4gIGNvbnN0IHN0YXJ0T2ZEYXlSaWdodCA9IHN0YXJ0T2ZEYXkoZGF0ZVJpZ2h0KTtcblxuICBjb25zdCB0aW1lc3RhbXBMZWZ0ID1cbiAgICBzdGFydE9mRGF5TGVmdC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZEYXlMZWZ0KTtcbiAgY29uc3QgdGltZXN0YW1wUmlnaHQgPVxuICAgIHN0YXJ0T2ZEYXlSaWdodC5nZXRUaW1lKCkgLVxuICAgIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheVJpZ2h0KTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgZGF5IGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgZGF5IG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoKHRpbWVzdGFtcExlZnQgLSB0aW1lc3RhbXBSaWdodCkgLyBtaWxsaXNlY29uZHNJbkRheSk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzO1xuIiwiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20ubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZlllYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgeWVhciBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZZZWFyKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMDApKVxuICogLy89PiBXZWQgSmFuIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZZZWFyKGRhdGUpIHtcbiAgY29uc3QgY2xlYW5EYXRlID0gdG9EYXRlKGRhdGUpO1xuICBjb25zdCBfZGF0ZSA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIF9kYXRlLnNldEZ1bGxZZWFyKGNsZWFuRGF0ZS5nZXRGdWxsWWVhcigpLCAwLCAxKTtcbiAgX2RhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mWWVhcjtcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIHN0YXJ0T2ZXZWVrfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZldlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGEgd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gU3VuIEF1ZyAzMSAyMDE0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRoZSB3ZWVrIHN0YXJ0cyBvbiBNb25kYXksIHRoZSBzdGFydCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZldlZWsoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IHdlZWtTdGFydHNPbiA9XG4gICAgb3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIDA7XG5cbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRheSA9IF9kYXRlLmdldERheSgpO1xuICBjb25zdCBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcblxuICBfZGF0ZS5zZXREYXRlKF9kYXRlLmdldERhdGUoKSAtIGRpZmYpO1xuICBfZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZXZWVrO1xuIiwiaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mSVNPV2Vla1xuICogQGNhdGVnb3J5IElTTyBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBJU08gd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZJU09XZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZklTT1dlZWsoZGF0ZSkge1xuICByZXR1cm4gc3RhcnRPZldlZWsoZGF0ZSwgeyB3ZWVrU3RhcnRzT246IDEgfSk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgc3RhcnRPZklTT1dlZWs7XG4iLCJpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZJU09XZWVrIH0gZnJvbSBcIi4vc3RhcnRPZklTT1dlZWsubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZ2V0SVNPV2Vla1llYXJcbiAqIEBjYXRlZ29yeSBJU08gV2Vlay1OdW1iZXJpbmcgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZSxcbiAqIHdoaWNoIGFsd2F5cyBzdGFydHMgMyBkYXlzIGJlZm9yZSB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5LlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBnaXZlbiBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIElTTy13ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDIgSmFudWFyeSAyMDA1P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0SVNPV2Vla1llYXIobmV3IERhdGUoMjAwNSwgMCwgMikpXG4gKiAvLz0+IDIwMDRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldElTT1dlZWtZZWFyKGRhdGUpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IHllYXIgPSBfZGF0ZS5nZXRGdWxsWWVhcigpO1xuXG4gIGNvbnN0IGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldEZ1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgY29uc3Qgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZklTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG5cbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0RnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIGNvbnN0IHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChfZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChfZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldElTT1dlZWtZZWFyO1xuIiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5XZWVrIH0gZnJvbSBcIi4vY29uc3RhbnRzLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZklTT1dlZWsgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vlay5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZJU09XZWVrWWVhciB9IGZyb20gXCIuL3N0YXJ0T2ZJU09XZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBnZXRJU09XZWVrXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBJU08gd2VlayBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgSVNPIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGdpdmVuIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgSVNPIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgSVNPLXdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDU/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRJU09XZWVrKG5ldyBEYXRlKDIwMDUsIDAsIDIpKVxuICogLy89PiA1M1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SVNPV2VlayhkYXRlKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICBjb25zdCBkaWZmID1cbiAgICBzdGFydE9mSVNPV2VlayhfZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZklTT1dlZWtZZWFyKF9kYXRlKS5nZXRUaW1lKCk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIG1pbGxpc2Vjb25kc0luV2VlaykgKyAxO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldElTT1dlZWs7XG4iLCJpbXBvcnQgeyBnZXRJU09XZWVrWWVhciB9IGZyb20gXCIuL2dldElTT1dlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZklTT1dlZWsgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vlay5tanNcIjtcbmltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZJU09XZWVrWWVhclxuICogQGNhdGVnb3J5IElTTyBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcixcbiAqIHdoaWNoIGFsd2F5cyBzdGFydHMgMyBkYXlzIGJlZm9yZSB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5LlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1OlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZklTT1dlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDYsIDIpKVxuICogLy89PiBNb24gSmFuIDAzIDIwMDUgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZJU09XZWVrWWVhcihkYXRlKSB7XG4gIGNvbnN0IHllYXIgPSBnZXRJU09XZWVrWWVhcihkYXRlKTtcbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5ID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldEZ1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZJU09XZWVrWWVhcjtcbiIsImltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIGdldFdlZWtZZWFyfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZ2V0V2Vla1llYXJcbiAqIEBjYXRlZ29yeSBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSBleGFjdCBjYWxjdWxhdGlvbiBkZXBlbmRzIG9uIHRoZSB2YWx1ZXMgb2ZcbiAqIGBvcHRpb25zLndlZWtTdGFydHNPbmAgKHdoaWNoIGlzIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrKVxuICogYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKHdoaWNoIGlzIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXMgYWx3YXlzIGluXG4gKiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhcilcbiAqXG4gKiBXZWVrIG51bWJlcmluZzogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2VlayNXZWVrX251bWJlcmluZ1xuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGdpdmVuIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDI2IERlY2VtYmVyIDIwMDQgd2l0aCB0aGUgZGVmYXVsdCBzZXR0aW5ncz9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldFdlZWtZZWFyKG5ldyBEYXRlKDIwMDQsIDExLCAyNikpXG4gKiAvLz0+IDIwMDVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBudW1iZXJpbmcgeWVhciBpcyAyNiBEZWNlbWJlciAyMDA0IGlmIHdlZWsgc3RhcnRzIG9uIFNhdHVyZGF5P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0V2Vla1llYXIobmV3IERhdGUoMjAwNCwgMTEsIDI2KSwgeyB3ZWVrU3RhcnRzT246IDYgfSlcbiAqIC8vPT4gMjAwNFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDI2IERlY2VtYmVyIDIwMDQgaWYgdGhlIGZpcnN0IHdlZWsgY29udGFpbnMgNCBKYW51YXJ5P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0V2Vla1llYXIobmV3IERhdGUoMjAwNCwgMTEsIDI2KSwgeyBmaXJzdFdlZWtDb250YWluc0RhdGU6IDQgfSlcbiAqIC8vPT4gMjAwNFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2Vla1llYXIoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgeWVhciA9IF9kYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICBjb25zdCBmaXJzdFdlZWtDb250YWluc0RhdGUgPVxuICAgIG9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIG9wdGlvbnM/LmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICAxO1xuXG4gIGNvbnN0IGZpcnN0V2Vla09mTmV4dFllYXIgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldEZ1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcblxuICBjb25zdCBmaXJzdFdlZWtPZlRoaXNZZWFyID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBvcHRpb25zKTtcblxuICBpZiAoX2RhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoX2RhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRXZWVrWWVhcjtcbiIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luV2VlayB9IGZyb20gXCIuL2NvbnN0YW50cy5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZXZWVrIH0gZnJvbSBcIi4vc3RhcnRPZldlZWsubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mV2Vla1llYXIgfSBmcm9tIFwiLi9zdGFydE9mV2Vla1llYXIubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBnZXRXZWVrfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZ2V0V2Vla1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBsb2NhbCB3ZWVrIGluZGV4IG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBsb2NhbCB3ZWVrIGluZGV4IG9mIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIGV4YWN0IGNhbGN1bGF0aW9uIGRlcGVuZHMgb24gdGhlIHZhbHVlcyBvZlxuICogYG9wdGlvbnMud2Vla1N0YXJ0c09uYCAod2hpY2ggaXMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWspXG4gKiBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAod2hpY2ggaXMgdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpcyBhbHdheXMgaW5cbiAqIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyKVxuICpcbiAqIFdlZWsgbnVtYmVyaW5nOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZWVrI1dlZWtfbnVtYmVyaW5nXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgbG9jYWwgd2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNSB3aXRoIGRlZmF1bHQgb3B0aW9ucz9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldFdlZWsobmV3IERhdGUoMjAwNSwgMCwgMikpXG4gKiAvLz0+IDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgbG9jYWwgd2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNSxcbiAqIC8vIGlmIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLFxuICogLy8gYW5kIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyIGFsd2F5cyBjb250YWlucyA0IEphbnVhcnk/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRXZWVrKG5ldyBEYXRlKDIwMDUsIDAsIDIpLCB7XG4gKiAgIHdlZWtTdGFydHNPbjogMSxcbiAqICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gKiB9KVxuICogLy89PiA1M1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrKGRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRpZmYgPVxuICAgIHN0YXJ0T2ZXZWVrKF9kYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLVxuICAgIHN0YXJ0T2ZXZWVrWWVhcihfZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpO1xuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBtaWxsaXNlY29uZHNJbldlZWspICsgMTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRXZWVrO1xuIiwiaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20ubWpzXCI7XG5pbXBvcnQgeyBnZXRXZWVrWWVhciB9IGZyb20gXCIuL2dldFdlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5tanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIHN0YXJ0T2ZXZWVrWWVhcn0gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZXZWVrWWVhclxuICogQGNhdGVnb3J5IFdlZWstTnVtYmVyaW5nIFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiBUaGUgZXhhY3QgY2FsY3VsYXRpb24gZGVwZW5kcyBvbiB0aGUgdmFsdWVzIG9mXG4gKiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gICh3aGljaCBpcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaylcbiAqIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgICh3aGljaCBpcyB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzIGFsd2F5cyBpblxuICogdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIpXG4gKlxuICogV2VlayBudW1iZXJpbmc6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dlZWsjV2Vla19udW1iZXJpbmdcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBhIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1IHdpdGggZGVmYXVsdCBzZXR0aW5nczpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrWWVhcihuZXcgRGF0ZSgyMDA1LCA2LCAyKSlcbiAqIC8vPT4gU3VuIERlYyAyNiAyMDA0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1XG4gKiAvLyBpZiBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB3ZWVrXG4gKiAvLyBhbmQgNCBKYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhcjpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrWWVhcihuZXcgRGF0ZSgyMDA1LCA2LCAyKSwge1xuICogICB3ZWVrU3RhcnRzT246IDEsXG4gKiAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICogfSlcbiAqIC8vPT4gTW9uIEphbiAwMyAyMDA1IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9XG4gICAgb3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIDE7XG5cbiAgY29uc3QgeWVhciA9IGdldFdlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICBjb25zdCBmaXJzdFdlZWsgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmaXJzdFdlZWsuc2V0RnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBfZGF0ZSA9IHN0YXJ0T2ZXZWVrKGZpcnN0V2Vlaywgb3B0aW9ucyk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mV2Vla1llYXI7XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIGNvbnN0IHNpZ24gPSBudW1iZXIgPCAwID8gXCItXCIgOiBcIlwiO1xuICBjb25zdCBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCkucGFkU3RhcnQodGFyZ2V0TGVuZ3RoLCBcIjBcIik7XG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufVxuIiwiaW1wb3J0IHsgYWRkTGVhZGluZ1plcm9zIH0gZnJvbSBcIi4uL2FkZExlYWRpbmdaZXJvcy5tanNcIjtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGxpZ2h0Rm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5KGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG5cbiAgICBjb25zdCBzaWduZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgY29uc3QgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09IFwieXlcIiA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIE1vbnRoXG4gIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09IFwiTVwiID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0RGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIEFNIG9yIFBNXG4gIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldEhvdXJzKCkgLyAxMiA+PSAxID8gXCJwbVwiIDogXCJhbVwiO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBcImFcIjpcbiAgICAgIGNhc2UgXCJhYVwiOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICBjYXNlIFwiYWFhXCI6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgICBjYXNlIFwiYWFhYWFcIjpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcbiAgICAgIGNhc2UgXCJhYWFhXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSBcImFtXCIgPyBcImEubS5cIiA6IFwicC5tLlwiO1xuICAgIH1cbiAgfSxcblxuICAvLyBIb3VyIFsxLTEyXVxuICBoKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBIb3VyIFswLTIzXVxuICBIKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEhvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gTWludXRlXG4gIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0TWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIFNlY29uZFxuICBzKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFNlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUyhkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIGNvbnN0IG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgY29uc3QgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLmZsb29yKFxuICAgICAgbWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMyksXG4gICAgKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IGdldERheU9mWWVhciB9IGZyb20gXCIuLi8uLi9nZXREYXlPZlllYXIubWpzXCI7XG5pbXBvcnQgeyBnZXRJU09XZWVrIH0gZnJvbSBcIi4uLy4uL2dldElTT1dlZWsubWpzXCI7XG5pbXBvcnQgeyBnZXRJU09XZWVrWWVhciB9IGZyb20gXCIuLi8uLi9nZXRJU09XZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IGdldFdlZWsgfSBmcm9tIFwiLi4vLi4vZ2V0V2Vlay5tanNcIjtcbmltcG9ydCB7IGdldFdlZWtZZWFyIH0gZnJvbSBcIi4uLy4uL2dldFdlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1plcm9zIH0gZnJvbSBcIi4uL2FkZExlYWRpbmdaZXJvcy5tanNcIjtcbmltcG9ydCB7IGxpZ2h0Rm9ybWF0dGVycyB9IGZyb20gXCIuL2xpZ2h0Rm9ybWF0dGVycy5tanNcIjtcblxuY29uc3QgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06IFwiYW1cIixcbiAgcG06IFwicG1cIixcbiAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgbm9vbjogXCJub29uXCIsXG4gIG1vcm5pbmc6IFwibW9ybmluZ1wiLFxuICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICBuaWdodDogXCJuaWdodFwiLFxufTtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbmV4cG9ydCBjb25zdCBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGVyYSA9IGRhdGUuZ2V0RnVsbFllYXIoKSA+IDAgPyAxIDogMDtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgXCJHXCI6XG4gICAgICBjYXNlIFwiR0dcIjpcbiAgICAgIGNhc2UgXCJHR0dcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHsgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIiB9KTtcbiAgICAgIC8vIEEsIEJcbiAgICAgIGNhc2UgXCJHR0dHR1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwgeyB3aWR0aDogXCJuYXJyb3dcIiB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG4gICAgICBjYXNlIFwiR0dHR1wiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHsgd2lkdGg6IFwid2lkZVwiIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gXCJ5b1wiKSB7XG4gICAgICBjb25zdCBzaWduZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICAgIGNvbnN0IHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHsgdW5pdDogXCJ5ZWFyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzaWduZWRXZWVrWWVhciA9IGdldFdlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgY29uc3Qgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjtcblxuICAgIC8vIFR3byBkaWdpdCB5ZWFyXG4gICAgaWYgKHRva2VuID09PSBcIllZXCIpIHtcbiAgICAgIGNvbnN0IHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH1cblxuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSBcIllvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7IHVuaXQ6IFwieWVhclwiIH0pO1xuICAgIH1cblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IGlzb1dlZWtZZWFyID0gZ2V0SVNPV2Vla1llYXIoZGF0ZSk7XG5cbiAgICAvLyBQYWRkaW5nXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldE1vbnRoKCkgKyAxKSAvIDMpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgXCJRXCI6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSBcIlFRXCI6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgXCJRb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7IHVuaXQ6IFwicXVhcnRlclwiIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcbiAgICAgIGNhc2UgXCJRUVFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlIFwiUVFRUVFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcIm5hcnJvd1wiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlIFwiUVFRUVwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcIndpZGVcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0TW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSBcInFcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlIFwicXFcIjpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuICAgICAgY2FzZSBcInFvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHsgdW5pdDogXCJxdWFydGVyXCIgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSBcInFxcVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcbiAgICAgIGNhc2UgXCJxcXFxcVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgXCJxcXFxXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJNXCI6XG4gICAgICBjYXNlIFwiTU1cIjpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgXCJNb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHsgdW5pdDogXCJtb250aFwiIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlIFwiTU1NXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlIFwiTU1NTU1cIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHsgd2lkdGg6IFwid2lkZVwiLCBjb250ZXh0OiBcImZvcm1hdHRpbmdcIiB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgXCJMb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHsgdW5pdDogXCJtb250aFwiIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlIFwiTExMXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlIFwiTExMTExcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgXCJMTExMXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHsgd2lkdGg6IFwid2lkZVwiLCBjb250ZXh0OiBcInN0YW5kYWxvbmVcIiB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB3ZWVrID0gZ2V0V2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gXCJ3b1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7IHVuaXQ6IFwid2Vla1wiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBpc29XZWVrID0gZ2V0SVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gXCJJb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7IHVuaXQ6IFwid2Vla1wiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09IFwiZG9cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXREYXRlKCksIHsgdW5pdDogXCJkYXRlXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgZGF5T2ZZZWFyID0gZ2V0RGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSBcIkRvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwgeyB1bml0OiBcImRheU9mWWVhclwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSBcIkVcIjpcbiAgICAgIGNhc2UgXCJFRVwiOlxuICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSBcIkVFRUVFXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgXCJFRUVFRUVcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJzaG9ydFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcIndpZGVcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIGNvbnN0IGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlIFwiZVwiOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgXCJlZVwiOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSBcImVvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7IHVuaXQ6IFwiZGF5XCIgfSk7XG4gICAgICBjYXNlIFwiZWVlXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiZWVlZWVcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImVlZWVlZVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImVlZWVcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRheU9mV2VlayA9IGRhdGUuZ2V0RGF5KCk7XG4gICAgY29uc3QgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlIFwiY2NcIjpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSBcImNvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7IHVuaXQ6IFwiZGF5XCIgfSk7XG4gICAgICBjYXNlIFwiY2NjXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiY2NjY2NcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImNjY2NjY1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIGNvbnN0IGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSBcImlcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcbiAgICAgIGNhc2UgXCJpaVwiOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuICAgICAgY2FzZSBcImlvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2VlaywgeyB1bml0OiBcImRheVwiIH0pO1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlIFwiaWlpXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiaWlpaWlcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImlpaWlpaVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImlpaWlcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuICAgIGNvbnN0IGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/IFwicG1cIiA6IFwiYW1cIjtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJhXCI6XG4gICAgICBjYXNlIFwiYWFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJhYWFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplXG4gICAgICAgICAgLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSBcImFhYWFhXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBcImFhYWFcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgbGV0IGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gXCJwbVwiIDogXCJhbVwiO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJiXCI6XG4gICAgICBjYXNlIFwiYmJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJiYmJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplXG4gICAgICAgICAgLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSBcImJiYmJiXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBcImJiYmJcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgbGV0IGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlIFwiQlwiOlxuICAgICAgY2FzZSBcIkJCXCI6XG4gICAgICBjYXNlIFwiQkJCXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICBjYXNlIFwiQkJCQkJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICBjYXNlIFwiQkJCQlwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJ3aWRlXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSBcImhvXCIpIHtcbiAgICAgIGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHsgdW5pdDogXCJob3VyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSBcIkhvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0SG91cnMoKSwgeyB1bml0OiBcImhvdXJcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSBcIktvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7IHVuaXQ6IFwiaG91clwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09IFwia29cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHsgdW5pdDogXCJob3VyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gXCJtb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldE1pbnV0ZXMoKSwgeyB1bml0OiBcIm1pbnV0ZVwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG5cbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09IFwic29cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRTZWNvbmRzKCksIHsgdW5pdDogXCJzZWNvbmRcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgY29uc3QgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFwiWlwiO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlIFwiWFwiOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG4gICAgICBjYXNlIFwiWFhYWFwiOlxuICAgICAgY2FzZSBcIlhYXCI6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG4gICAgICBjYXNlIFwiWFhYWFhcIjpcbiAgICAgIGNhc2UgXCJYWFhcIjogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICBjb25zdCB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgXCJ4XCI6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcbiAgICAgIGNhc2UgXCJ4eHh4XCI6XG4gICAgICBjYXNlIFwieHhcIjogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcbiAgICAgIGNhc2UgXCJ4eHh4eFwiOlxuICAgICAgY2FzZSBcInh4eFwiOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgXCI6XCIpO1xuICAgIH1cbiAgfSxcblxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIGNvbnN0IHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSBcIk9cIjpcbiAgICAgIGNhc2UgXCJPT1wiOlxuICAgICAgY2FzZSBcIk9PT1wiOlxuICAgICAgICByZXR1cm4gXCJHTVRcIiArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgXCJPT09PXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gXCJHTVRcIiArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCBcIjpcIik7XG4gICAgfVxuICB9LFxuXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgY29uc3QgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlIFwielwiOlxuICAgICAgY2FzZSBcInp6XCI6XG4gICAgICBjYXNlIFwienp6XCI6XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgXCI6XCIpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSBcInp6enpcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgY29uc3QgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkZWxpbWl0ZXIgPSBcIlwiKSB7XG4gIGNvbnN0IHNpZ24gPSBvZmZzZXQgPiAwID8gXCItXCIgOiBcIitcIjtcbiAgY29uc3QgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgY29uc3QgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICBjb25zdCBzaWduID0gb2Zmc2V0ID4gMCA/IFwiLVwiIDogXCIrXCI7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkZWxpbWl0ZXIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRlbGltaXRlciA9IFwiXCIpIHtcbiAgY29uc3Qgc2lnbiA9IG9mZnNldCA+IDAgPyBcIi1cIiA6IFwiK1wiO1xuICBjb25zdCBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICBjb25zdCBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIGNvbnN0IG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cbiIsImNvbnN0IGRhdGVMb25nRm9ybWF0dGVyID0gKHBhdHRlcm4sIGZvcm1hdExvbmcpID0+IHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSBcIlBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoeyB3aWR0aDogXCJzaG9ydFwiIH0pO1xuICAgIGNhc2UgXCJQUFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiBcIm1lZGl1bVwiIH0pO1xuICAgIGNhc2UgXCJQUFBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoeyB3aWR0aDogXCJsb25nXCIgfSk7XG4gICAgY2FzZSBcIlBQUFBcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiBcImZ1bGxcIiB9KTtcbiAgfVxufTtcblxuY29uc3QgdGltZUxvbmdGb3JtYXR0ZXIgPSAocGF0dGVybiwgZm9ybWF0TG9uZykgPT4ge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlIFwicFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7IHdpZHRoOiBcInNob3J0XCIgfSk7XG4gICAgY2FzZSBcInBwXCI6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHsgd2lkdGg6IFwibWVkaXVtXCIgfSk7XG4gICAgY2FzZSBcInBwcFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7IHdpZHRoOiBcImxvbmdcIiB9KTtcbiAgICBjYXNlIFwicHBwcFwiOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHsgd2lkdGg6IFwiZnVsbFwiIH0pO1xuICB9XG59O1xuXG5jb25zdCBkYXRlVGltZUxvbmdGb3JtYXR0ZXIgPSAocGF0dGVybiwgZm9ybWF0TG9uZykgPT4ge1xuICBjb25zdCBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICBjb25zdCBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICBjb25zdCB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICBsZXQgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgXCJQXCI6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoeyB3aWR0aDogXCJzaG9ydFwiIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlBQXCI6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoeyB3aWR0aDogXCJtZWRpdW1cIiB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUFBcIjpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7IHdpZHRoOiBcImxvbmdcIiB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUFBQXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7IHdpZHRoOiBcImZ1bGxcIiB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0XG4gICAgLnJlcGxhY2UoXCJ7e2RhdGV9fVwiLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpXG4gICAgLnJlcGxhY2UoXCJ7e3RpbWV9fVwiLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyLFxufTtcbiIsImNvbnN0IHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFtcIkRcIiwgXCJERFwiXTtcbmNvbnN0IHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gW1wiWVlcIiwgXCJZWVlZXCJdO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09IFwiWVlZWVwiKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICBgVXNlIFxcYHl5eXlcXGAgaW5zdGVhZCBvZiBcXGBZWVlZXFxgIChpbiBcXGAke2Zvcm1hdH1cXGApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBcXGAke2lucHV0fVxcYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kYCxcbiAgICApO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSBcIllZXCIpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgIGBVc2UgXFxgeXlcXGAgaW5zdGVhZCBvZiBcXGBZWVxcYCAoaW4gXFxgJHtmb3JtYXR9XFxgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgXFxgJHtpbnB1dH1cXGA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZGAsXG4gICAgKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gXCJEXCIpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgIGBVc2UgXFxgZFxcYCBpbnN0ZWFkIG9mIFxcYERcXGAgKGluIFxcYCR7Zm9ybWF0fVxcYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IFxcYCR7aW5wdXR9XFxgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRgLFxuICAgICk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09IFwiRERcIikge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgYFVzZSBcXGBkZFxcYCBpbnN0ZWFkIG9mIFxcYEREXFxgIChpbiBcXGAke2Zvcm1hdH1cXGApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBcXGAke2lucHV0fVxcYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kYCxcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBpc1ZhbGlkIH0gZnJvbSBcIi4vaXNWYWxpZC5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGRlZmF1bHRMb2NhbGUgfSBmcm9tIFwiLi9fbGliL2RlZmF1bHRMb2NhbGUubWpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL19saWIvZGVmYXVsdE9wdGlvbnMubWpzXCI7XG5pbXBvcnQgeyBmb3JtYXR0ZXJzIH0gZnJvbSBcIi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy5tanNcIjtcbmltcG9ydCB7IGxvbmdGb3JtYXR0ZXJzIH0gZnJvbSBcIi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMubWpzXCI7XG5pbXBvcnQge1xuICBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLFxuICBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sXG4gIHRocm93UHJvdGVjdGVkRXJyb3IsXG59IGZyb20gXCIuL19saWIvcHJvdGVjdGVkVG9rZW5zLm1qc1wiO1xuXG4vLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcbmNvbnN0IGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPVxuICAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG5cbi8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcbmNvbnN0IGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG5cbmNvbnN0IGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbmNvbnN0IGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG5jb25zdCB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG5cbi8qKlxuICogVGhlIHtAbGluayBmb3JtYXR9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl0oaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcilcbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJdKGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXIpKS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIGZvcm1hdCAtIFRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKlxuICogQHRocm93cyBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3MgYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3MgdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3MgZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0KGRhdGUsIGZvcm1hdFN0ciwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IGxvY2FsZSA9IG9wdGlvbnM/LmxvY2FsZSA/PyBkZWZhdWx0T3B0aW9ucy5sb2NhbGUgPz8gZGVmYXVsdExvY2FsZTtcblxuICBjb25zdCBmaXJzdFdlZWtDb250YWluc0RhdGUgPVxuICAgIG9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIG9wdGlvbnM/LmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICAxO1xuXG4gIGNvbnN0IHdlZWtTdGFydHNPbiA9XG4gICAgb3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIDA7XG5cbiAgY29uc3Qgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRhdGUpO1xuXG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHRpbWUgdmFsdWVcIik7XG4gIH1cblxuICBjb25zdCBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZSxcbiAgfTtcblxuICBjb25zdCByZXN1bHQgPSBmb3JtYXRTdHJcbiAgICAubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApXG4gICAgLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgICBjb25zdCBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCJwXCIgfHwgZmlyc3RDaGFyYWN0ZXIgPT09IFwiUFwiKSB7XG4gICAgICAgIGNvbnN0IGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN1YnN0cmluZztcbiAgICB9KVxuICAgIC5qb2luKFwiXCIpXG4gICAgLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApXG4gICAgLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFvcHRpb25zPy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiZcbiAgICAgICAgICBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZm9ybWF0U3RyLCBTdHJpbmcoZGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhb3B0aW9ucz8udXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJlxuICAgICAgICAgIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZm9ybWF0U3RyLCBTdHJpbmcoZGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZXIoXG4gICAgICAgICAgb3JpZ2luYWxEYXRlLFxuICAgICAgICAgIHN1YnN0cmluZyxcbiAgICAgICAgICBsb2NhbGUubG9jYWxpemUsXG4gICAgICAgICAgZm9ybWF0dGVyT3B0aW9ucyxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgICBcIkZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgXCIgK1xuICAgICAgICAgICAgZmlyc3RDaGFyYWN0ZXIgK1xuICAgICAgICAgICAgXCJgXCIsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdWJzdHJpbmc7XG4gICAgfSlcbiAgICAuam9pbihcIlwiKTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgY29uc3QgbWF0Y2hlZCA9IGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApO1xuXG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVkWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBmb3JtYXQ7XG4iLCIvL0ltcG9ydHNcbmltcG9ydCBfLCB7IGZvcm1hdCB9IGZyb20gXCJkYXRlLWZuc1wiO1xuXG4vL0NvbnN0dWN0b3IgZnVuY3Rpb25zXG5cbmZ1bmN0aW9uIFRvZG8odGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgbm90ZXMsIHByb2plY3RUYWcpIHtcbiAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGVGb3JtYXQoZHVlRGF0ZSk7XG4gIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgdGhpcy50b2RvcyA9IFtdO1xuICB0aGlzLm5vdGVzID0gbm90ZXM7XG4gIHRoaXMucHJvamVjdFRhZyA9IHByb2plY3RUYWc7XG4gIHRoaXMuc3RhdHVzID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gUHJvamVjdChwcm9qZWN0VGFnLCB0ZExpc3QpIHtcbiAgdGhpcy5wcm9qZWN0VGFnID0gcHJvamVjdFRhZztcbiAgbGV0IGxpc3QgPSB0ZExpc3QuZmlsdGVyKCh0ZCkgPT4gdGQucHJvamVjdFRhZyA9PT0gcHJvamVjdFRhZyk7XG4gIHRoaXMudGRMaXN0ID0gbGlzdDtcbn1cblxuZnVuY3Rpb24gVXNlcihuYW1lLCBhdmF0YXIpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5hdmF0YXIgPSBhdmF0YXI7XG59XG5cbi8vSGVscGVyIGZ1bmN0aW9uc1xuZnVuY3Rpb24gZHVlRGF0ZUZvcm1hdChkdWVEYXRlKSB7XG4gIGlmIChkdWVEYXRlID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIGZvcm1hdChuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCksIFwiTS1kZC15XCIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmb3JtYXQobmV3IERhdGUoZHVlRGF0ZSkudG9Mb2NhbGVTdHJpbmcoKSwgXCJNLWRkLXlcIik7XG4gIH1cbn1cblxuZXhwb3J0IHsgVG9kbywgVXNlciwgUHJvamVjdCB9O1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF8sIHthZGREYXlzfSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmltcG9ydCB7IFRvZG99IGZyb20gXCIuL2NvbnN0cnVjdG9yc1wiO1xuXG4vLyBIYXJkY29kZSBmb3IgdGVzdGluZ1xuY29uc3QgbWFpblRvZG9MaXN0ID0gW107XG5cbmhhcmRDb2RlVERzKFwiQ3JlYXRlIHVzZXIgY29uc3RydWN0b3JcIixcIkNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBzdG9yZSB1c2VyIGluZm9ybWF0aW9uIGxpa2UgaWQgYW5kIGF2YXRhclwiLFwiMDEtMjUtMjAyNFwiLFwiSGlnaFwiLFwidGVzdCBub3Rlc1wiLFwiVG8tZG8gQXBwXCIsKTtcbmhhcmRDb2RlVERzKFwiTG9vayB1cCBkYXRhLWZucyBsaWJyYXJ5XCIsXCJTZWUgd2hhdCBmdW5jdGlvbnMgYXJlIGF2YWlsYWJsZVwiLFwiMTItMjktMjAyM1wiLFwiSGlnaFwiLFwiXCIsXCJUby1kbyBBcHBcIiwpO1xuaGFyZENvZGVURHMoXCJHbyB0byB0aGUgZ3ltXCIsXCJDb21wbGV0ZSB0aGUgZGFpbHkgd29ya291dFwiLFwiXCIsXCJIaWdoXCIsIFwiXCIsXCJEYWlseVwiLCk7XG5oYXJkQ29kZVREcyhcInRlc3RlcjFcIiwgXCJjaGVja2luZyBmblwiLCBcIjA0LTExLTE5ODlcIiwgXCJMb3dcIiwgXCJcIiwgXCJUZXN0IDFcIik7XG5oYXJkQ29kZVREcyhcInRlc3RlcjJcIiwgXCJjaGVja2luZyBmblwiLCBcIjA1LTE4LTIwMjBcIiwgXCJNZWRpdW1cIiwgXCJcIiwgXCJUZXN0IDJcIik7XG5oYXJkQ29kZVREcyhcIkFsd2F5cyB0b2RheVwiLCBcImFsd2F5cyB0b2RheVwiLCBuZXcgRGF0ZSgpLCBcIkxvd1wiLCBcIlwiLCBcIlRlc3QgMVwiKTtcbmhhcmRDb2RlVERzKFwiVG9kYXkgcGx1cyAyXCIsXCJjaGVja2luZyBmblwiLCBhZGREYXlzKG5ldyBEYXRlKCksIDIpLFwiSGlnaFwiLFwiXCIsXCJUZXN0IDJcIiwpO1xuaGFyZENvZGVURHMoXCJUb2RheSBwbHVzIDVcIixcImNoZWNraW5nIGZuXCIsIGFkZERheXMobmV3IERhdGUoKSwgNSksXCJNZWRpdW1cIixcIlwiLFwiVGVzdCAzXCIsKTtcbmhhcmRDb2RlVERzKFwicmVhZCB0aGUgbmV3c3BhcGVyXCIsXCJDb21wbGV0ZSB0aGUgZGFpbHkgd29ya291dFwiLFwiXCIsXCJNZWRpdW1cIixcIlwiLFwiRGFpbHlcIiwpO1xuaGFyZENvZGVURHMoXCJCdXkgYSB5YWNodFwiLFwiQ29tcGxldGUgdGhlIGRhaWx5IHdvcmtvdXRcIixcIlwiLFwiTG93XCIsXCJcIixcIkRhaWx5XCIsKTtcblxuLy8gRnVuY3Rpb25zXG5mdW5jdGlvbiBoYXJkQ29kZVREcyh0aXRsZSwgZGVzY3JpcHQsIGR1ZURhdGUsIHByaW9yaXR5LCB0b2Rvcywgbm90ZXMsIHByb2plY3RUYWcsKSB7XG4gIGNvbnN0IG5ld1RvZG8gPSBuZXcgVG9kbyh0aXRsZSwgZGVzY3JpcHQsIGR1ZURhdGUsIHByaW9yaXR5LCB0b2Rvcywgbm90ZXMsIHByb2plY3RUYWcsKTtcbiAgbWFpblRvZG9MaXN0LnB1c2gobmV3VG9kbyk7XG4gIG1haW5Ub2RvTGlzdC5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShhLmR1ZURhdGUpIC0gbmV3IERhdGUoYi5kdWVEYXRlKSk7XG4gIGluZGV4TGlzdChtYWluVG9kb0xpc3QpO1xuICByZXR1cm4gbWFpblRvZG9MaXN0O1xufVxuXG5mdW5jdGlvbiBpbmRleExpc3QodGRMaXN0KSB7XG4gIHRkTGlzdC5mb3JFYWNoKCh0ZE9iamVjdCkgPT4ge1xuICAgIHRkT2JqZWN0W1wiZGF0YS1pbmRleFwiXSA9IHRkTGlzdC5maW5kSW5kZXgoXG4gICAgICAodGQpID0+IHRkLnRpdGxlID09PSB0ZE9iamVjdC50aXRsZSxcbiAgICApO1xuICB9KTtcbn1cblxuZXhwb3J0IHttYWluVG9kb0xpc3R9XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgXywgeyBmb3JtYXQsIGlzQmVmb3JlLCBhZGREYXlzLCBzdWJEYXlzIH0gZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSBcIi4vY29uc3RydWN0b3JzXCI7XG5cbmZ1bmN0aW9uIGRlbGV0ZVRvZG8odGRUaXRsZSwgdGRMaXN0KSB7XG4gIC8vIFJlbW92ZSBmcm9tIG1haW4gbGlzdFxuICBjb25zdCB0ZEluZGV4ID0gdGRMaXN0LmZpbmRJbmRleCgodGRPYmplY3QpID0+IHRkT2JqZWN0LnRpdGxlID09PSB0ZFRpdGxlKTtcbiAgdGRMaXN0LnNwbGljZSh0ZEluZGV4LCAxKTtcbiAgdGRMaXN0LnNvcnQoKGEsIGIpID0+IGEuZHVlRGF0ZSAtIGIuZHVlRGF0ZSk7XG4gIC8vIFJlbW92ZSBmcm9tIG1haW4gZGlzcGxheVxufVxuXG5mdW5jdGlvbiBjaGVja0lmT3ZlcmR1ZSh0ZE9iamVjdCkge1xuICByZXR1cm4gaXNCZWZvcmUodGRPYmplY3QuZHVlRGF0ZSwgc3ViRGF5cyhuZXcgRGF0ZSgpLCAxKSk7XG59XG5cbmZ1bmN0aW9uIGFkZE92ZXJkdWVDbGFzcyh0ZExpc3QpIHtcbiAgY29uc3Qgb3ZlcmR1ZUxpc3QgPSBbXTtcbiAgdGRMaXN0LmZvckVhY2goKHRkT2JqZWN0KSA9PiB7XG4gICAgaWYgKGNoZWNrSWZPdmVyZHVlKHRkT2JqZWN0KSkge1xuICAgICAgb3ZlcmR1ZUxpc3QucHVzaCh0ZE9iamVjdFtcImRhdGEtaW5kZXhcIl0udG9TdHJpbmcoKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZGl2TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG9kb1wiKTtcbiAgZGl2TGlzdC5mb3JFYWNoKChkaXYpID0+IHtcbiAgICBjb25zdCB0ZEluZGV4ID0gZGl2LmdldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIik7XG4gICAgaWYgKG92ZXJkdWVMaXN0LmluY2x1ZGVzKHRkSW5kZXgpKSB7XG4gICAgICBkaXYuY2xhc3NMaXN0LmFkZChcIm92ZXJkdWVcIik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5kZXhMaXN0KHRkTGlzdCkge1xuICB0ZExpc3QuZm9yRWFjaCgodGRPYmplY3QpID0+IHtcbiAgICB0ZE9iamVjdFtcImRhdGEtaW5kZXhcIl0gPSB0ZExpc3QuZmluZEluZGV4KCh0ZCkgPT4gdGQudGl0bGUgPT09IHRkT2JqZWN0LnRpdGxlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRvZGF5TGlzdCh0ZExpc3QpIHtcbiAgY29uc3QgdG9kYXlMaXN0ID0gdGRMaXN0LmZpbHRlcigodGQpID0+IHRkLmR1ZURhdGUgPT09IGZvcm1hdChuZXcgRGF0ZSgpLCBcIk0tZGQteVwiKSAmJiB0ZC5wcm9qZWN0VGFnICE9PSBcIkRhaWx5XCIpO1xuICByZXR1cm4gdG9kYXlMaXN0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUaGlzV2Vla0xpc3QodGRMaXN0KSB7XG4gIGNvbnN0IHRoaXNXZWVrTGlzdCA9IHRkTGlzdC5maWx0ZXIoKHRkKSA9PiB0ZC5kdWVEYXRlID49IGZvcm1hdChuZXcgRGF0ZSgpLCBcIk0tZGQteVwiKSAmJiB0ZC5kdWVEYXRlIDw9IGZvcm1hdChhZGREYXlzKG5ldyBEYXRlKCksIDcpLCBcIk0tZGQteVwiKSAmJiB0ZC5wcm9qZWN0VGFnICE9PSBcIkRhaWx5XCIpO1xuICByZXR1cm4gdGhpc1dlZWtMaXN0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEYWlseUxpc3QodGRMaXN0KSB7XG4gIGNvbnN0IGRhaWx5TGlzdCA9IHRkTGlzdC5maWx0ZXIoKHRkKSA9PiB0ZC5wcm9qZWN0VGFnID09PSBcIkRhaWx5XCIpO1xuICByZXR1cm4gZGFpbHlMaXN0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0VGFnTGlzdCh0ZExpc3QpIHtcbiAgY29uc3QgcHJvamVjdFRhZ0xpc3QgPSBbXTtcbiAgdGRMaXN0LmZvckVhY2goKHRkT2JqZWN0KSA9PiB7XG4gICAgY29uc3QgbmV3UHJvamVjdCA9IHRkT2JqZWN0LnByb2plY3RUYWc7XG4gICAgaWYgKG5ld1Byb2plY3QgIT09IFwiRGFpbHlcIiAmJiBuZXdQcm9qZWN0ICE9PSBcIlwiICYmICFwcm9qZWN0VGFnTGlzdC5pbmNsdWRlcyhuZXdQcm9qZWN0KSkge1xuICAgICAgcHJvamVjdFRhZ0xpc3QucHVzaChuZXdQcm9qZWN0KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJvamVjdFRhZ0xpc3Q7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3RMaXN0KHRkTGlzdCwgcHJvamVjdFRhZykge1xuICBjb25zdCBwcm9qZWN0TGlzdCA9IHRkTGlzdC5maWx0ZXIoKHRkKSA9PiB0ZC5wcm9qZWN0VGFnID09PSBwcm9qZWN0VGFnKTtcbiAgcmV0dXJuIHByb2plY3RMaXN0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0VERMaXN0cyh0ZExpc3QpIHtcbiAgY29uc3QgcHJvamVjdFRhZ0xpc3QgPSBjcmVhdGVQcm9qZWN0VGFnTGlzdCh0ZExpc3QpO1xuICBjb25zdCBwcm9qZWN0VGRMaXN0cyA9IFtdO1xuICBwcm9qZWN0VGFnTGlzdC5mb3JFYWNoKChwcm9qZWN0VGFnKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFByb2plY3QgPSBuZXcgUHJvamVjdChwcm9qZWN0VGFnLCB0ZExpc3QpO1xuICAgIHByb2plY3RUZExpc3RzLnB1c2goY3VycmVudFByb2plY3QpO1xuICB9KTtcbiAgcmV0dXJuIHByb2plY3RUZExpc3RzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVRdWFkTGlzdHModGRMaXN0KSB7XG4gIGNvbnN0IHVyZ2VuY3lEYXRlID0gYWRkRGF5cyhuZXcgRGF0ZSgpLCAxMCk7XG4gIGNvbnN0IHF1YWQxID0gdGRMaXN0LmZpbHRlcigodGQpID0+IHRkLnByaW9yaXR5ID09PSBcIkhpZ2hcIiAmJiB0ZC5kdWVEYXRlIDw9IGZvcm1hdCh1cmdlbmN5RGF0ZSwgXCJNLWRkLXlcIikpO1xuICBjb25zdCBxdWFkMiA9IHRkTGlzdC5maWx0ZXIoKHRkKSA9PiAodGQucHJpb3JpdHkgPT09IFwiSGlnaFwiICYmIHRkLmR1ZURhdGUgPiBmb3JtYXQodXJnZW5jeURhdGUsIFwiTS1kZC15XCIpKSB8fCAodGQucHJpb3JpdHkgPT09IFwiTWVkaXVtXCIgJiYgdGQuZHVlRGF0ZSA+IGZvcm1hdCh1cmdlbmN5RGF0ZSwgXCJNLWRkLXlcIikpKTtcbiAgY29uc3QgcXVhZDMgPSB0ZExpc3QuZmlsdGVyKCh0ZCkgPT4gKHRkLnByaW9yaXR5ID09PSBcIkxvd1wiICYmIHRkLmR1ZURhdGUgPD0gZm9ybWF0KHVyZ2VuY3lEYXRlLCBcIk0tZGQteVwiKSkgfHwgKHRkLnByaW9yaXR5ID09PSBcIk1lZGl1bVwiICYmIHRkLmR1ZURhdGUgPD0gZm9ybWF0KHVyZ2VuY3lEYXRlLCBcIk0tZGQteVwiKSkpO1xuICBjb25zdCBxdWFkNCA9IHRkTGlzdC5maWx0ZXIoKHRkKSA9PiB0ZC5wcmlvcml0eSA9PT0gXCJMb3dcIiAmJiB0ZC5kdWVEYXRlID4gZm9ybWF0KHVyZ2VuY3lEYXRlLCBcIk0tZGQteVwiKSk7XG4gIGNvbnN0IHF1YWRMaXN0cyA9IFtxdWFkMSwgcXVhZDIsIHF1YWQzLCBxdWFkNF07XG4gIHJldHVybiBxdWFkTGlzdHM7XG59XG5cbmZ1bmN0aW9uIGdldFByb2plY3RTdGF0cyhwcm9qZWN0TGlzdCkge1xuICBjb25zdCBjb21wbGV0ZWRUZHMgPSBwcm9qZWN0TGlzdC5maWx0ZXIoKHRkKSA9PiB0ZC5zdGF0dXMgPT09IFwiY29tcGxldGVcIik7XG4gIGNvbnN0IG51bUNvbXBsZXRlZCA9IGNvbXBsZXRlZFRkcy5sZW5ndGg7XG4gIGNvbnN0IG51bVRkcyA9IHByb2plY3RMaXN0Lmxlbmd0aDtcbiAgY29uc3QgcXVhZExpc3RzID0gY3JlYXRlUXVhZExpc3RzKHByb2plY3RMaXN0KTtcbiAgY29uc3QgbnVtUTEgPSBxdWFkTGlzdHNbMF0ubGVuZ3RoO1xuICBjb25zdCBudW1RMiA9IHF1YWRMaXN0c1sxXS5sZW5ndGg7XG4gIGNvbnN0IG51bVEzID0gcXVhZExpc3RzWzJdLmxlbmd0aDtcbiAgY29uc3QgbnVtUTQgPSBxdWFkTGlzdHNbM10ubGVuZ3RoO1xuICByZXR1cm4geyBudW1UZHMsIG51bUNvbXBsZXRlZCwgbnVtUTEsIG51bVEyLCBudW1RMywgbnVtUTQgfTtcbn1cbi8vIGV4cG9ydHNcblxuZXhwb3J0IHtcbiAgY3JlYXRlVG9kYXlMaXN0LFxuICBjcmVhdGVUaGlzV2Vla0xpc3QsXG4gIGNyZWF0ZURhaWx5TGlzdCxcbiAgZGVsZXRlVG9kbyxcbiAgaW5kZXhMaXN0LFxuICBhZGRPdmVyZHVlQ2xhc3MsXG4gIGNyZWF0ZVF1YWRMaXN0cyxcbiAgY3JlYXRlUHJvamVjdFRhZ0xpc3QsXG4gIGNyZWF0ZVByb2plY3RMaXN0LFxuICBnZXRQcm9qZWN0U3RhdHMsXG4gIGNyZWF0ZVByb2plY3RURExpc3RzLFxufTtcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBpc0JlZm9yZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0aGF0IHNob3VsZCBiZSBiZWZvcmUgdGhlIG90aGVyIG9uZSB0byByZXR1cm4gdHJ1ZVxuICogQHBhcmFtIGRhdGVUb0NvbXBhcmUgLSBUaGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqXG4gKiBAcmV0dXJucyBUaGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBkYXRlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElzIDEwIEp1bHkgMTk4OSBiZWZvcmUgMTEgRmVicnVhcnkgMTk4Nz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzQmVmb3JlKG5ldyBEYXRlKDE5ODksIDYsIDEwKSwgbmV3IERhdGUoMTk4NywgMSwgMTEpKVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCZWZvcmUoZGF0ZSwgZGF0ZVRvQ29tcGFyZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgX2RhdGVUb0NvbXBhcmUgPSB0b0RhdGUoZGF0ZVRvQ29tcGFyZSk7XG4gIHJldHVybiArX2RhdGUgPCArX2RhdGVUb0NvbXBhcmU7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgaXNCZWZvcmU7XG4iLCJpbXBvcnQgeyBhZGREYXlzIH0gZnJvbSBcIi4vYWRkRGF5cy5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdWJEYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSBhbW91bnQgLSBUaGUgYW1vdW50IG9mIGRheXMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICpcbiAqIEByZXR1cm5zIFRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBkYXlzIHN1YnRyYWN0ZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgMTAgZGF5cyBmcm9tIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJEYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gRnJpIEF1ZyAyMiAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJEYXlzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkRGF5cyhkYXRlLCAtYW1vdW50KTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdWJEYXlzO1xuIiwiaW1wb3J0IHsgZm9ybWF0LCBhZGREYXlzIH0gZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgeyBjcmVhdGVQcm9qZWN0VGFnTGlzdCwgaW5kZXhMaXN0IH0gZnJvbSBcIi4vbGlzdE1hbmFnbWVudFwiO1xuaW1wb3J0IHsgVG9kbyB9IGZyb20gXCIuL2NvbnN0cnVjdG9yc1wiO1xuaW1wb3J0IHsgbWFpblRvZG9MaXN0IH0gZnJvbSBcIi4vdGVzdFRETGlzdFwiO1xuXG4vLyBOZXcgVG9kb1xuZnVuY3Rpb24gY3JlYXRlTmV3VG9kb0Zvcm0odGRMaXN0KSB7XG4gIGNvbnN0IGRpYWxvZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaWFsb2dcIik7XG4gIGRpYWxvZy5jbGFzc0xpc3QuYWRkKFwibW9kYWxcIik7XG4gIGRpYWxvZy5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm5ld1RvZG9EaWFsb2dcIik7XG5cbiAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuICBmb3JtLnNldEF0dHJpYnV0ZShcIm1ldGhvZFwiLCBcImRpYWxvZ1wiKTtcbiAgZm9ybS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm15Rm9ybVwiKTtcblxuICBjb25zdCB0aXRsZVJvdyA9IGNyZWF0ZUZvcm1Sb3coXCJ0ZC10aXRsZVwiLCBcIlRpdGxlIG9mIFRvZG9cIiwgXCJ0ZXh0XCIpO1xuICBjb25zdCBkZXNjcmlwdFJvdyA9IGNyZWF0ZUZvcm1Sb3coXCJ0ZC1kZXNjcmlwdGlvblwiLCBcIkRlc2NyaXB0aW9uIG9mIFRvZG9cIiwgXCJ0ZXh0XCIpO1xuICBjb25zdCBkYXRlUm93ID0gY3JlYXRlRm9ybVJvdyhcInRkLWR1ZURhdGVcIiwgXCJEdWUgRGF0ZTpcIiwgXCJkYXRlXCIpO1xuICBjb25zdCBwcmlvcml0eVJvdyA9IGNyZWF0ZVNlbGVjdEZvcm1Sb3coXCJ0ZC1wcmlvcml0eVwiLCBcIlByaW9yaXR5XCIsIFtcIkhpZ2hcIiwgXCJNZWRpdW1cIiwgXCJMb3dcIl0pO1xuICBjb25zb2xlLmxvZyh0ZExpc3QpO1xuICBjb25zdCBwcm9qZWN0Um93ID0gY3JlYXRlU2VsZWN0Rm9ybVJvdyhcInRkLXByb2plY3RUYWdcIiwgXCJQcm9qZWN0XCIsIGNyZWF0ZVByb2plY3RUYWdMaXN0KHRkTGlzdCkpO1xuXG4gIGNvbnN0IGJ0bkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGJ0bkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZm9ybS1idXR0b25zXCIpO1xuXG4gIGNvbnN0IGNhbmNlbEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIGNhbmNlbEJ0bi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImNhbmNlbEJ0blwiKTtcbiAgY2FuY2VsQnRuLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiY2FuY2VsXCIpO1xuICBjYW5jZWxCdG4uc2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiLCBcImRpYWxvZ1wiKTtcbiAgY2FuY2VsQnRuLnRleHRDb250ZW50ID0gXCJDYW5jZWxcIjtcblxuICBjb25zdCBjb25maXJtQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgY29uZmlybUJ0bi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImNvbmZpcm1CdG5cIik7XG4gIGNvbmZpcm1CdG4uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJkZWZhdWx0XCIpO1xuICBjb25maXJtQnRuLnRleHRDb250ZW50ID0gXCJDb25maXJtXCI7XG5cbiAgYnRuQ29udGFpbmVyLmFwcGVuZENoaWxkKGNhbmNlbEJ0bik7XG4gIGJ0bkNvbnRhaW5lci5hcHBlbmRDaGlsZChjb25maXJtQnRuKTtcbiAgZm9ybS5hcHBlbmRDaGlsZCh0aXRsZVJvdyk7XG4gIGZvcm0uYXBwZW5kQ2hpbGQoZGVzY3JpcHRSb3cpO1xuICBmb3JtLmFwcGVuZENoaWxkKGRhdGVSb3cpO1xuICBmb3JtLmFwcGVuZENoaWxkKHByaW9yaXR5Um93KTtcbiAgZm9ybS5hcHBlbmRDaGlsZChwcm9qZWN0Um93KTtcbiAgZm9ybS5hcHBlbmRDaGlsZChidG5Db250YWluZXIpO1xuICBkaWFsb2cuYXBwZW5kQ2hpbGQoZm9ybSk7XG4gIHJldHVybiBkaWFsb2c7XG59XG5cbmZ1bmN0aW9uIGFkZE5ld1RvZG8odGRMaXN0KSB7XG4gIGNvbnN0IHRkVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRkLXRpdGxlXCIpLnZhbHVlO1xuICBjb25zdCB0ZGRlc2NyaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZC1kZXNjcmlwdGlvblwiKS52YWx1ZTtcbiAgY29uc3QgdGRkdWVEYXRlID0gZm9ybWF0KGFkZERheXMoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZC1kdWVEYXRlXCIpLnZhbHVlLCAxKSwgXCJNLWRkLXlcIik7XG4gIGNvbnN0IHRkcHJpb3JpdHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRkLXByaW9yaXR5XCIpLnZhbHVlO1xuICBjb25zdCB0ZHByb2plY3RUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRkLXByb2plY3RUYWdcIikudmFsdWU7XG4gIGNvbnN0IG5ld1RvZG8gPSBuZXcgVG9kbyh0ZFRpdGxlLCB0ZGRlc2NyaXB0LCB0ZGR1ZURhdGUsIHRkcHJpb3JpdHksIFtdLCBcIlwiLCB0ZHByb2plY3RUYWcpO1xuICB0ZExpc3QucHVzaChuZXdUb2RvKTtcbiAgdGRMaXN0LnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGEuZHVlRGF0ZSkgLSBuZXcgRGF0ZShiLmR1ZURhdGUpKTtcbiAgaW5kZXhMaXN0KHRkTGlzdCk7XG4gIHJldHVybiBuZXdUb2RvO1xufVxuXG4vLyBoZWxwZXIgZnVuY3Rpb25zXG5mdW5jdGlvbiBjcmVhdGVGb3JtUm93KGlkLCB0aXRsZSwgaVR5cGUpIHtcbiAgY29uc3QgZm9ybVJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGZvcm1Sb3cuY2xhc3NMaXN0LmFkZChcImZvcm0tcm93XCIpO1xuXG4gIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBsYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgaWQpO1xuICBsYWJlbC50ZXh0Q29udGVudCA9IHRpdGxlO1xuXG4gIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIGlUeXBlKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBpZCk7XG4gIGlucHV0LnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcblxuICBmb3JtUm93LmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgZm9ybVJvdy5hcHBlbmRDaGlsZChpbnB1dCk7XG4gIHJldHVybiBmb3JtUm93O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RGb3JtUm93KGlkLCB0aXRsZSwgb3B0aW9uc0xpc3QpIHtcbiAgY29uc3QgZm9ybVJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGZvcm1Sb3cuY2xhc3NMaXN0LmFkZChcImZvcm0tcm93XCIpO1xuXG4gIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBsYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgaWQpO1xuICBsYWJlbC50ZXh0Q29udGVudCA9IHRpdGxlO1xuXG4gIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gIHNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZCk7XG4gIHNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIGlkKTtcblxuICBvcHRpb25zTGlzdC5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICBjb25zdCBjdXJyZW50T3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICBjdXJyZW50T3B0aW9uLnRleHRDb250ZW50ID0gb3B0aW9uO1xuICAgIHNlbGVjdC5hcHBlbmRDaGlsZChjdXJyZW50T3B0aW9uKTtcbiAgfSk7XG5cbiAgZm9ybVJvdy5hcHBlbmRDaGlsZChsYWJlbCk7XG4gIGZvcm1Sb3cuYXBwZW5kQ2hpbGQoc2VsZWN0KTtcbiAgcmV0dXJuIGZvcm1Sb3c7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZU5ld1RvZG9Gb3JtLCBhZGROZXdUb2RvIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVQcm9qZWN0VGFnTGlzdCwgY3JlYXRlUHJvamVjdFRETGlzdHMsIGdldFByb2plY3RTdGF0cyB9IGZyb20gXCIuL2xpc3RNYW5hZ21lbnRcIjtcblxuZnVuY3Rpb24gZ2VuZXJhdGVRdWFkRGF0ZVNlbGVjdG9yKCkge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcImRhdGUtc2VsZWN0b3ItZGl2XCIpO1xuXG4gIGNvbnN0IGRhdGVTZWxlY3RvckxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBkYXRlU2VsZWN0b3JMYWJlbC5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1zZWxlY3RvclwiKTtcbiAgZGF0ZVNlbGVjdG9yTGFiZWwudGV4dENvbnRlbnQgPSBcIkNob29zZSB0aGUgZGF0ZSBjdXQgb2ZmIGZvciB1cmdlbmN5OiAgIFwiO1xuICBjb25zdCBkYXRlU2VsZWN0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGRhdGVTZWxlY3Rvci5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiZGF0ZVwiKTtcbiAgZGF0ZVNlbGVjdG9yLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZGF0ZS1zZWxlY3RvclwiKTtcblxuICBkYXRlU2VsZWN0b3JMYWJlbC5hcHBlbmRDaGlsZChkYXRlU2VsZWN0b3IpO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGF0ZVNlbGVjdG9yTGFiZWwpO1xuICByZXR1cm4gY29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVByb2plY3RPdmVydmlld3NEaXNwbGF5KHRkTGlzdCkge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcInByb2plY3RPdmVydmlld3MtY29udGFpbmVyXCIpO1xuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcImxpc3QtZGlzcGxheVwiKTtcbiAgY29uc3QgcHJvamVjdE9iamVjdExpc3QgPSBjcmVhdGVQcm9qZWN0VERMaXN0cyh0ZExpc3QpO1xuICBwcm9qZWN0T2JqZWN0TGlzdC5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICBjb25zdCBkaXYgPSBnZW5lcmF0ZVN0YXRzRGl2KG9iamVjdCk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdik7XG4gIH0pO1xuICByZXR1cm4gY29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiB0YXNrR3JhbW1hcihudW0pIHtcbiAgbGV0IHRhc2sgPSBcIlwiO1xuICBpZiAobnVtID09PSAxKSB7XG4gICAgdGFzayA9IFwidGFzayBpc1wiO1xuICB9IGVsc2Uge1xuICAgIHRhc2sgPSBcInRhc2tzIGFyZVwiO1xuICB9XG4gIHJldHVybiB0YXNrO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVN0YXRzRGl2KHByb2plY3RPYmplY3QpIHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LW92ZXJ2aWV3XCIpO1xuICBjb25zdCB0aXRsZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoM1wiKTtcbiAgdGl0bGVEaXYuY2xhc3NMaXN0LmFkZChcIm92ZXJ2aWV3LXRpdGxlXCIpO1xuICB0aXRsZURpdi50ZXh0Q29udGVudCA9IHByb2plY3RPYmplY3QucHJvamVjdFRhZztcbiAgY29uc3QgcHJvamVjdFN0YXRzID0gZ2V0UHJvamVjdFN0YXRzKHByb2plY3RPYmplY3QudGRMaXN0KTtcblxuICBjb25zdCBjb21wbGV0ZW5lc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29tcGxldGVuZXNzLnRleHRDb250ZW50ID0gYCR7cHJvamVjdFN0YXRzLm51bUNvbXBsZXRlZH0gLyAke3Byb2plY3RTdGF0cy5udW1UZHN9IHRhc2tzIGNvbXBsZXRlZGA7XG5cbiAgY29uc3QgcTEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29uc3QgdGFzazEgPSB0YXNrR3JhbW1hcihwcm9qZWN0U3RhdHMubnVtUTEpO1xuICBxMS50ZXh0Q29udGVudCA9IGAke3Byb2plY3RTdGF0cy5udW1RMX0gICR7dGFzazF9IHVyZ2VudCBhbmQgaW1wb3J0YW50LmA7XG5cbiAgY29uc3QgcTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29uc3QgdGFzazIgPSB0YXNrR3JhbW1hcihwcm9qZWN0U3RhdHMubnVtUTIpO1xuICBxMi50ZXh0Q29udGVudCA9IGAke3Byb2plY3RTdGF0cy5udW1RMn0gJHt0YXNrMn0gbm90IHVyZ2VudCBhbmQgaW1wb3J0YW50LmA7XG5cbiAgY29uc3QgcTMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29uc3QgdGFzazMgPSB0YXNrR3JhbW1hcihwcm9qZWN0U3RhdHMubnVtUTMpO1xuICBxMy50ZXh0Q29udGVudCA9IGAke3Byb2plY3RTdGF0cy5udW1RM30gJHt0YXNrM30gdXJnZW50IGFuZCB1bmltcG9ydGFudC5gO1xuXG4gIGNvbnN0IHE0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gIGNvbnN0IHRhc2s0ID0gdGFza0dyYW1tYXIocHJvamVjdFN0YXRzLm51bVE0KTtcbiAgcTQudGV4dENvbnRlbnQgPSBgJHtwcm9qZWN0U3RhdHMubnVtUTR9ICR7dGFzazR9IG5vdCB1cmdlbnQgYW5kIHVuaW1wb3J0YW50LmA7XG5cbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlRGl2KTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbXBsZXRlbmVzcyk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChxMSk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChxMik7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChxMyk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChxNCk7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVQcm9qZWN0QnV0dG9ucyh0ZExpc3QpIHtcbiAgY29uc3QgUEJDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIlBCQ29udGFpbmVyXCIpO1xuICBjb25zdCBwcm9qZWN0VGFnTGlzdCA9IGNyZWF0ZVByb2plY3RUYWdMaXN0KHRkTGlzdCk7XG4gIHByb2plY3RUYWdMaXN0LmZvckVhY2goKHRhZykgPT4ge1xuICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgYnRuLmNsYXNzTGlzdC5hZGQoXCJidXR0b25cIik7XG4gICAgYnRuLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LWJ0blwiKTtcbiAgICBidG4udGV4dENvbnRlbnQgPSB0YWc7XG4gICAgUEJDb250YWluZXIuYXBwZW5kQ2hpbGQoYnRuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUHJvamVjdEhlYWRlcih0aXRsZSkge1xuICBjb25zdCBwSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgyXCIpO1xuICBwSGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJwSGVhZGVyXCIpO1xuICBwSGVhZGVyLnRleHRDb250ZW50ID0gdGl0bGU7XG4gIHJldHVybiBwSGVhZGVyO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVRkTGlzdERpc3BsYXkodGRMaXN0KSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibGlzdC1kaXNwbGF5XCIpO1xuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcInRkTGlzdC1jb250YWluZXJcIik7XG4gIHRkTGlzdC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgY29uc3QgdGQgPSBjcmVhdGVUb2RvRGl2KGVsZW1lbnQpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZCk7XG4gIH0pO1xuICByZXR1cm4gY29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVRkUXVhZERpc3BsYXkocXVhZExpc3RzKSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwicXVhZC1kaXNwbGF5XCIpO1xuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcInF1YWQtY29udGFpbmVyXCIpO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IDU7IGkrKykge1xuICAgIGNvbnN0IG5ld1F1YWQgPSBjcmVhdGVRdWFkQ29udGFpbmVyKHF1YWRMaXN0c1tpIC0gMV0pO1xuICAgIG5ld1F1YWQuY2xhc3NMaXN0LmFkZChgcXVhZCR7aX1gKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobmV3UXVhZCk7XG4gIH1cblxuICBjb25zdCB1cmdlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICB1cmdlbnQuY2xhc3NMaXN0LmFkZChcInF1YWQtZ3JpZC1sYWJlbFwiKTtcbiAgdXJnZW50LmNsYXNzTGlzdC5hZGQoXCJ1cmdlbnRcIik7XG4gIHVyZ2VudC50ZXh0Q29udGVudCA9IFwiVVJHRU5UXCI7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh1cmdlbnQpO1xuXG4gIGNvbnN0IGxhdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgbGF0ZXIuY2xhc3NMaXN0LmFkZChcInF1YWQtZ3JpZC1sYWJlbFwiKTtcbiAgbGF0ZXIuY2xhc3NMaXN0LmFkZChcImxhdGVyXCIpO1xuICBsYXRlci50ZXh0Q29udGVudCA9IFwiTk9UIFVSR0VOVFwiO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGF0ZXIpO1xuXG4gIGNvbnN0IGltcG9ydGFudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGltcG9ydGFudC5jbGFzc0xpc3QuYWRkKFwicXVhZC1ncmlkLWxhYmVsXCIpO1xuICBpbXBvcnRhbnQuY2xhc3NMaXN0LmFkZChcInJvdGF0ZVwiKTtcbiAgaW1wb3J0YW50LmNsYXNzTGlzdC5hZGQoXCJpbXBvcnRhbnRcIik7XG4gIGltcG9ydGFudC50ZXh0Q29udGVudCA9IFwiSU1QT1JUQU5UXCI7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbXBvcnRhbnQpO1xuXG4gIGNvbnN0IHVuaW1wb3J0YW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdW5pbXBvcnRhbnQuY2xhc3NMaXN0LmFkZChcInF1YWQtZ3JpZC1sYWJlbFwiKTtcbiAgdW5pbXBvcnRhbnQuY2xhc3NMaXN0LmFkZChcInJvdGF0ZVwiKTtcbiAgdW5pbXBvcnRhbnQuY2xhc3NMaXN0LmFkZChcInVuaW1wb3J0YW50XCIpO1xuICB1bmltcG9ydGFudC50ZXh0Q29udGVudCA9IFwiIE5PVCBJTVBPUlRBTlRcIjtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHVuaW1wb3J0YW50KTtcblxuICByZXR1cm4gY29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVRdWFkQ29udGFpbmVyKGxpc3QpIHtcbiAgY29uc3QgcXVhZENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHF1YWRDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInRkTGlzdC1jb250YWluZXJcIik7XG4gIGxpc3QuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IHRkID0gY3JlYXRlVG9kb0RpdihlbGVtZW50KTtcbiAgICBxdWFkQ29udGFpbmVyLmFwcGVuZENoaWxkKHRkKTtcbiAgfSk7XG4gIHJldHVybiBxdWFkQ29udGFpbmVyO1xufVxuLy8gSGVscGVyIEZ1bmN0aW9uc1xuXG5mdW5jdGlvbiBjcmVhdGVUb2RvRGl2KHRkT2JqZWN0KSB7XG4gIC8vIENyZWF0ZSBjb250YWluZXIgRGl2XG4gIGNvbnN0IHRvZG9EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICB0b2RvRGl2LmNsYXNzTGlzdC5hZGQoXCJ0b2RvXCIpO1xuICB0b2RvRGl2LnNldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIiwgdGRPYmplY3RbXCJkYXRhLWluZGV4XCJdKTtcbiAgLy8gY3JlYXRlIGNoZWNrYm94IGltZy9kaXYgd2l0aCBzcmMgY29udHJvbGxlZCBieSBjc3NcbiAgY29uc3Qgc3RhdHVzQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgc3RhdHVzQm94LmNsYXNzTGlzdC5hZGQoXCJjaGVja2JveFwiKTtcbiAgc3RhdHVzQm94LnNyYyA9IFwiLi4vc3JjL0ltYWdlcy91bmNoZWNrZWQtYm94LnBuZ1wiO1xuICAvLyBjcmVhdGUgdGl0bGUgZGl2L2J1dHRvbiB0byBleHBhbmRcbiAgY29uc3QgdG9kb1RpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdG9kb1RpdGxlLmNsYXNzTGlzdC5hZGQoXCJ0b2RvLXRpdGxlXCIpO1xuICB0b2RvVGl0bGUudGV4dENvbnRlbnQgPSB0ZE9iamVjdC50aXRsZTtcbiAgLy8gY3JlYXRlIGR1ZURhdGUgZGl2XG4gIGNvbnN0IGR1ZURhdGVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBkdWVEYXRlRGl2LmNsYXNzTGlzdC5hZGQoXCJkdWVEYXRlLWRpdlwiKTtcbiAgZHVlRGF0ZURpdi50ZXh0Q29udGVudCA9IHRkT2JqZWN0LmR1ZURhdGU7XG4gIC8vIGNyZWF0ZSBQcmlvcml0eSBkaXZcbiAgY29uc3QgcHJpb3JpdHlEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBwcmlvcml0eURpdi5jbGFzc0xpc3QuYWRkKFwicHJpb3JpdHktZGl2XCIpO1xuICBwcmlvcml0eURpdi50ZXh0Q29udGVudCA9IHRkT2JqZWN0LnByaW9yaXR5O1xuICBwcmlvcml0eURpdi5zdHlsZS5jb2xvciA9IGdldFByaW9yaXR5Q29sb3IodGRPYmplY3QpO1xuICAvLyBjcmVhdGUgZWRpdCBidXR0b25cbiAgY29uc3QgZWRpdEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gIGVkaXRCdG4uY2xhc3NMaXN0LmFkZChcImVkaXRcIik7XG4gIGVkaXRCdG4uc3JjID0gXCIuLi9zcmMvSW1hZ2VzL3BlbmNpbC5wbmdcIjtcbiAgLy8gY3JlYXRlIGRlbGV0ZSBidXR0b25cbiAgY29uc3QgZGVsZXRlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgZGVsZXRlQnRuLmNsYXNzTGlzdC5hZGQoXCJkZWxldGVcIik7XG4gIGRlbGV0ZUJ0bi5zcmMgPSBcIi4uL3NyYy9JbWFnZXMvZGVsZXRlLnBuZ1wiO1xuICAvLyBhcHBlbmQgZWxlbWVudHMgdG8gY29udGFpbmVyXG4gIHRvZG9EaXYuYXBwZW5kQ2hpbGQoc3RhdHVzQm94KTtcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZCh0b2RvVGl0bGUpO1xuICB0b2RvRGl2LmFwcGVuZENoaWxkKGR1ZURhdGVEaXYpO1xuICB0b2RvRGl2LmFwcGVuZENoaWxkKHByaW9yaXR5RGl2KTtcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZChlZGl0QnRuKTtcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZChkZWxldGVCdG4pO1xuXG4gIHJldHVybiB0b2RvRGl2O1xufVxuXG5mdW5jdGlvbiBzZXRUb2RvU3RhdHVzSW1hZ2UodGREaXYsIHRkTGlzdCkge1xuICBjb25zdCB0ZEluZGV4ID0gdGREaXYuZ2V0QXR0cmlidXRlKFwiZGF0YS1pbmRleFwiKTtcbiAgY29uc3QgY3VycmVudFN0YXR1cyA9IHRkTGlzdFt0ZEluZGV4XS5zdGF0dXM7XG4gIGlmIChjdXJyZW50U3RhdHVzICE9PSBcImNvbXBsZXRlXCIpIHtcbiAgICB0ZERpdi5jbGFzc0xpc3QucmVtb3ZlKFwiY29tcGxldGVcIik7XG4gICAgdGREaXYuZmlyc3RDaGlsZC5zcmMgPSBcIi4uL3NyYy9JbWFnZXMvdW5jaGVja2VkLWJveC5wbmdcIjtcbiAgfSBlbHNlIGlmIChjdXJyZW50U3RhdHVzID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICB0ZERpdi5jbGFzc0xpc3QuYWRkKFwiY29tcGxldGVcIik7XG4gICAgdGREaXYuZmlyc3RDaGlsZC5zcmMgPSBcIi4uL3NyYy9JbWFnZXMvY2hlY2tlZC1jaGVja2JveC5wbmdcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQcmlvcml0eUNvbG9yKHRvZG9PYmplY3QpIHtcbiAgY29uc3QgeyBwcmlvcml0eSB9ID0gdG9kb09iamVjdDtcbiAgaWYgKHByaW9yaXR5ID09PSBcIkhpZ2hcIikge1xuICAgIHJldHVybiBcInJlZFwiO1xuICB9XG4gIGlmIChwcmlvcml0eSA9PT0gXCJNZWRpdW1cIikge1xuICAgIHJldHVybiBcImJsdWVcIjtcbiAgfVxuICBpZiAocHJpb3JpdHkgPT09IFwiTG93XCIpIHtcbiAgICByZXR1cm4gXCJibGFja1wiO1xuICB9XG4gIHJldHVybiBcImdyZXlcIjtcbn1cblxuLy8gRXhwb3J0c1xuXG5leHBvcnQgeyBnZW5lcmF0ZVRkTGlzdERpc3BsYXksIGdlbmVyYXRlUHJvamVjdEhlYWRlciwgY3JlYXRlVG9kb0Rpdiwgc2V0VG9kb1N0YXR1c0ltYWdlLCBnZW5lcmF0ZVRkUXVhZERpc3BsYXksIGdlbmVyYXRlUHJvamVjdEJ1dHRvbnMsIGdlbmVyYXRlUHJvamVjdE92ZXJ2aWV3c0Rpc3BsYXkgfTtcbiIsImltcG9ydCB7IGNyZWF0ZU5ld1RvZG9Gb3JtIH0gZnJvbSBcIi4vbmV3VERcIjtcbmltcG9ydCB7IGVkaXRUb2RvRm9ybSB9IGZyb20gXCIuL2VkaXRURFwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVUZFF1YWREaXNwbGF5LCBnZW5lcmF0ZVRkTGlzdERpc3BsYXksIGdlbmVyYXRlUHJvamVjdEhlYWRlciB9IGZyb20gXCIuL3NpdGVkeW5hbWljXCI7XG5pbXBvcnQgeyBhZGRPdmVyZHVlQ2xhc3MsIGNyZWF0ZVF1YWRMaXN0cyB9IGZyb20gXCIuL2xpc3RNYW5hZ21lbnRcIjtcblxuY29uc3QgY29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGVudFwiKTtcbmNvbnN0IG1haW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1haW5cIik7XG5jb25zdCBhbGxUYXNrc0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWxsXCIpO1xuYWxsVGFza3NCdG4uY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKTtcblxuZnVuY3Rpb24gaW5pdGlhbGl6ZURpc3BsYXkoY3VycmVudFRvZG9MaXN0KSB7XG4gIG1haW4uYXBwZW5kQ2hpbGQoZ2VuZXJhdGVQcm9qZWN0SGVhZGVyKFwiQWxsIHRhc2tzXCIpKTtcbiAgaWYgKG1haW4uY2xhc3NMaXN0LmNvbnRhaW5zKFwicXVhZFwiKSkge1xuICAgIG1haW4uYXBwZW5kQ2hpbGQoZ2VuZXJhdGVUZFF1YWREaXNwbGF5KGNyZWF0ZVF1YWRMaXN0cyhjdXJyZW50VG9kb0xpc3QpKSk7XG4gIH0gZWxzZSB7XG4gICAgbWFpbi5hcHBlbmRDaGlsZChnZW5lcmF0ZVRkTGlzdERpc3BsYXkoY3VycmVudFRvZG9MaXN0KSk7XG4gIH1cbiAgYWRkT3ZlcmR1ZUNsYXNzKGN1cnJlbnRUb2RvTGlzdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNpdGUodGRMaXN0KSB7XG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQoY3JlYXRlTmV3VG9kb0Zvcm0odGRMaXN0KSk7XG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQoZWRpdFRvZG9Gb3JtKCkpO1xuICBpbml0aWFsaXplRGlzcGxheSh0ZExpc3QpO1xufVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IHsgbWFpblRvZG9MaXN0IH0gZnJvbSBcIi4vdGVzdFRETGlzdFwiO1xuaW1wb3J0IGNyZWF0ZVNpdGUgZnJvbSBcIi4vc2l0ZUNvbnN0YW50c1wiO1xuaW1wb3J0IHsgY3JlYXRlRGFpbHlMaXN0LCBjcmVhdGVUaGlzV2Vla0xpc3QsIGNyZWF0ZVRvZGF5TGlzdCwgZGVsZXRlVG9kbywgYWRkT3ZlcmR1ZUNsYXNzLCBjcmVhdGVRdWFkTGlzdHMsIGNyZWF0ZVByb2plY3RMaXN0IH0gZnJvbSBcIi4vbGlzdE1hbmFnbWVudFwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVUZExpc3REaXNwbGF5LCBnZW5lcmF0ZVByb2plY3RIZWFkZXIsIGNyZWF0ZVRvZG9EaXYsIHNldFRvZG9TdGF0dXNJbWFnZSwgZ2VuZXJhdGVUZFF1YWREaXNwbGF5LCBnZW5lcmF0ZVByb2plY3RCdXR0b25zLCBnZW5lcmF0ZVByb2plY3RPdmVydmlld3NEaXNwbGF5IH0gZnJvbSBcIi4vc2l0ZWR5bmFtaWNcIjtcbmltcG9ydCB7IGFkZE5ld1RvZG8gfSBmcm9tIFwiLi9uZXdURFwiO1xuaW1wb3J0IHsgZWRpdFRvZG9Qcm9wZXJ0eSwgY2hhbmdlQ29tcGxldGVQcm9wZXJ0eSB9IGZyb20gXCIuL2VkaXRURFwiO1xuXG4vLyBTZXR0aW5nIExvY2FsIFN0b3JhZ2VcbmxldCBjdXJyZW50VG9kb0xpc3QgPSBbXTtcbmZ1bmN0aW9uIHJldHJpZXZlVGRMaXN0KCkge1xuICBjb25zdCB0ZExpc3RSZXQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRkTGlzdFwiKTtcbiAgY3VycmVudFRvZG9MaXN0ID0gSlNPTi5wYXJzZSh0ZExpc3RSZXQpO1xufVxuXG5mdW5jdGlvbiBzdG9yZVRkTGlzdCh0ZExpc3QpIHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0ZExpc3RcIiwgSlNPTi5zdHJpbmdpZnkodGRMaXN0KSk7XG4gIHJldHJpZXZlVGRMaXN0KCk7XG59XG5cbi8vIFNpdGUgaW5pdGlhbGl6YXRpb25cbmlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRkTGlzdFwiKSkge1xuICByZXRyaWV2ZVRkTGlzdCgpO1xufSBlbHNlIHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0ZExpc3RcIiwgSlNPTi5zdHJpbmdpZnkobWFpblRvZG9MaXN0KSk7XG4gIHJldHJpZXZlVGRMaXN0KCk7XG59XG5jcmVhdGVTaXRlKGN1cnJlbnRUb2RvTGlzdCk7XG5jb25zdCBtYWluID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluXCIpO1xuYWN0aXZhdGVBbGxCdG5zKCk7XG5jb25zdCB0ZERpdkxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvZG9cIik7XG50ZERpdkxpc3QuZm9yRWFjaCgoZGl2KSA9PiB7XG4gIHNldFRvZG9TdGF0dXNJbWFnZShkaXYsIGN1cnJlbnRUb2RvTGlzdCk7XG59KTtcblxuY29uc29sZS50YWJsZShjdXJyZW50VG9kb0xpc3QpO1xuXG4vLyBTZXQgdXAgQnV0dG9uc1xuY29uc3QgdG9nZ2xlQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50b2dnbGUtYm94XCIpO1xuY29uc3QgY2lyY2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaXJjbGVcIik7XG5jb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9nZ2xlLWNoZWNrYm94XCIpO1xuXG5jaXJjbGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHN3aXRjaERpc3BsYXlNb2RlKCkpO1xuXG50b2dnbGVCb3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgaWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICBjaXJjbGUuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGVYKDQycHgpXCI7XG4gIH0gZWxzZSB7XG4gICAgY2lyY2xlLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWCgwcHgpXCI7XG4gIH1cbn0pO1xuXG4vLyBEUlkgQnV0dG9uIGxvZ2ljXG5jb25zdCBuYXZCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5uYXZCdG5cIik7XG5jb25zb2xlLmxvZyhuYXZCdG5zKTtcbm5hdkJ0bnMuZm9yRWFjaCgoYnRuKSA9PiB7XG4gIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgY2xlYXJEb21EaXNwbGF5KCk7XG4gICAgdG9nZ2xlTmF2QnRucyhldmVudCk7XG4gICAgcmVmcmVzaERpc3BsYXkoKTtcbiAgfSk7XG59KTtcblxuY29uc3QgcHJvamVjdE5hdkJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdHNcIik7XG5jb25zdCBQQkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiUEJDb250YWluZXJcIik7XG5wcm9qZWN0TmF2QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgY29uc29sZS5sb2coUEJDb250YWluZXIpO1xuICBpZiAoIVBCQ29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICB0b2dnbGVOYXZCdG5zKGV2ZW50KTtcbiAgICBnZW5lcmF0ZVByb2plY3RCdXR0b25zKGN1cnJlbnRUb2RvTGlzdCk7XG4gICAgY2xlYXJEb21EaXNwbGF5KCk7XG4gICAgbWFpbi5hcHBlbmRDaGlsZChnZW5lcmF0ZVByb2plY3RIZWFkZXIoXCJBbGwgUHJvamVjdHNcIikpO1xuICAgIG1haW4uYXBwZW5kQ2hpbGQoZ2VuZXJhdGVQcm9qZWN0T3ZlcnZpZXdzRGlzcGxheShjdXJyZW50VG9kb0xpc3QpKTtcbiAgICBhY3RpdmF0ZUFsbEJ0bnMoKTtcbiAgICAvLyBjbGVhcmluZyBET00gYW5kIHNob3dpbmcgcHJvamVjdCBkZXRhaWxzIHdoZW4gcHJvamVjdCBpcyBzZWxlY3RlZFxuICAgIGNvbnN0IHByb2plY3RCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcm9qZWN0LWJ0blwiKTtcbiAgICBwcm9qZWN0QnRucy5mb3JFYWNoKChidG4pID0+XG4gICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBjbGVhckRvbURpc3BsYXkoKTtcbiAgICAgICAgdG9nZ2xlTmF2QnRucyhldmVudCk7XG4gICAgICAgIHJlZnJlc2hEaXNwbGF5KCk7XG4gICAgICAgIHByb2plY3RCdG5zLmZvckVhY2goKGJ0bikgPT4gYnRuLnJlbW92ZSgpKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn0pO1xuXG5jb25zdCBuZXdUREJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV3LXRvZG8tYnRuXCIpO1xuY29uc3QgbmV3VG9kb0RpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV3VG9kb0RpYWxvZ1wiKTtcbmNvbnN0IGNhbmNlbEJ0biA9IG5ld1RvZG9EaWFsb2cucXVlcnlTZWxlY3RvcihcIiNjYW5jZWxCdG5cIik7XG5jb25zdCBjb25maXJtQnRuID0gbmV3VG9kb0RpYWxvZy5xdWVyeVNlbGVjdG9yKFwiI2NvbmZpcm1CdG5cIik7XG5cbm5ld1REQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIG5ld1REQnRuLmNsYXNzTGlzdC50b2dnbGUoXCJjbGlja2VkXCIpO1xuICBuZXdUb2RvRGlhbG9nLnNob3dNb2RhbCgpO1xufSk7XG5cbmNvbmZpcm1CdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBjb25zdCBuZXdUZE9iamVjdCA9IGFkZE5ld1RvZG8oY3VycmVudFRvZG9MaXN0KTtcbiAgZGlzcGxheU5ld1RkRGl2KG5ld1RkT2JqZWN0KTtcbiAgYWN0aXZhdGVBbGxCdG5zKCk7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlGb3JtXCIpLnJlc2V0KCk7XG4gIG5ld1RvZG9EaWFsb2cuY2xvc2UoKTtcbiAgc3RvcmVUZExpc3QoY3VycmVudFRvZG9MaXN0KTtcbiAgYWRkT3ZlcmR1ZUNsYXNzKGN1cnJlbnRUb2RvTGlzdCk7XG59KTtcblxuY2FuY2VsQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlGb3JtXCIpLnJlc2V0KCk7XG4gIG5ld1RvZG9EaWFsb2cuY2xvc2UoKTtcbn0pO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb25zXG5cbmZ1bmN0aW9uIHN3aXRjaERpc3BsYXlNb2RlKCkge1xuICBtYWluLmNsYXNzTGlzdC50b2dnbGUoXCJxdWFkXCIpO1xuICBjbGVhckRvbURpc3BsYXkoKTtcbiAgcmVmcmVzaERpc3BsYXkoKTtcbn1cblxuZnVuY3Rpb24gZGlzcGxheU5ld1RkRGl2KHRkT2JqZWN0KSB7XG4gIGNvbnN0IG5ld0RpdiA9IGNyZWF0ZVRvZG9EaXYodGRPYmplY3QpO1xuICBjb25zdCB0ZEluZGV4ID0gY3VycmVudFRvZG9MaXN0LmZpbmRJbmRleCgoZWxlbWVudCkgPT4gZWxlbWVudC50aXRsZSA9PT0gdGRPYmplY3QudGl0bGUpO1xuICBjb25zdCBkaXZMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50b2RvXCIpO1xuICBpZiAodGRJbmRleCAhPT0gMCkge1xuICAgIGNvbnN0IHNpYmxpbmdUaXRsZSA9IGN1cnJlbnRUb2RvTGlzdFt0ZEluZGV4IC0gMV0udGl0bGU7XG4gICAgZGl2TGlzdC5mb3JFYWNoKChkaXYpID0+IHtcbiAgICAgIGlmIChkaXYudGV4dENvbnRlbnQuaW5jbHVkZXMoc2libGluZ1RpdGxlKSkge1xuICAgICAgICBkaXYuYWZ0ZXIobmV3RGl2KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzZWNvbmRUaXRsZSA9IGN1cnJlbnRUb2RvTGlzdFsxXS50aXRsZTtcbiAgICBkaXZMaXN0LmZvckVhY2goKGRpdikgPT4ge1xuICAgICAgaWYgKGRpdi50ZXh0Q29udGVudC5pbmNsdWRlcyhzZWNvbmRUaXRsZSkpIHtcbiAgICAgICAgZGl2LmJlZm9yZShuZXdEaXYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQWxsQnRucygpIHtcbiAgYWN0aXZhdGVDaGVja0JveGVzKCk7XG4gIGFjdGl2YXRlRGVsZXRlQnRucygpO1xuICBhY3RpdmF0ZUVkaXRCdG5zKCk7XG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlRGVsZXRlQnRucygpIHtcbiAgY29uc3QgZGVsZXRlQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZGVsZXRlXCIpO1xuICBkZWxldGVCdG5zLmZvckVhY2goKEJ0bikgPT4gQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IGRlbGV0ZVRkRGl2KGV2ZW50KSkpO1xufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoZWNrQm94ZXMoKSB7XG4gIGNvbnN0IGNoZWNrQm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNoZWNrYm94XCIpO1xuICBjaGVja0JveGVzLmZvckVhY2goKGJveCkgPT4gYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHRvZ2dsZUNvbXBsZXRlKGV2ZW50KSkpO1xufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUVkaXRCdG5zKCkge1xuICBjb25zdCBlZGl0VGRCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0XCIpO1xuICBjb25zdCBlZGl0VG9kb0RpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZWRpdFRvZG9EaWFsb2dcIik7XG4gIGNvbnN0IGVkaXRDYW5jZWxCdG4gPSBlZGl0VG9kb0RpYWxvZy5xdWVyeVNlbGVjdG9yKFwiI2VkaXRDYW5jZWxCdG5cIik7XG4gIGNvbnN0IGVkaXRDb25maXJtQnRuID0gZWRpdFRvZG9EaWFsb2cucXVlcnlTZWxlY3RvcihcIiNlZGl0Q29uZmlybUJ0blwiKTtcblxuICBlZGl0VGRCdG5zLmZvckVhY2goKEJ0bikgPT5cbiAgICBCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgdGRUaXRsZSA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmZpcnN0Q2hpbGQubmV4dFNpYmxpbmcudGV4dENvbnRlbnQ7XG4gICAgICBjb25zdCB0ZEluZGV4ID0gY3VycmVudFRvZG9MaXN0LmZpbmRJbmRleCgodGRPYmplY3QpID0+IHRkT2JqZWN0LnRpdGxlID09PSB0ZFRpdGxlKTtcbiAgICAgIGVkaXRUb2RvRGlhbG9nLnNob3dNb2RhbCgpO1xuICAgICAgZWRpdENvbmZpcm1CdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlZGl0VG9kb1Byb3BlcnR5KHRkSW5kZXgsIGN1cnJlbnRUb2RvTGlzdCk7XG4gICAgICAgIGN1cnJlbnRUb2RvTGlzdC5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShhLmR1ZURhdGUpIC0gbmV3IERhdGUoYi5kdWVEYXRlKSk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZWRpdEZvcm1cIikucmVzZXQoKTtcbiAgICAgICAgZWRpdFRvZG9EaWFsb2cuY2xvc2UoKTtcbiAgICAgICAgc3RvcmVUZExpc3QoY3VycmVudFRvZG9MaXN0KTtcbiAgICAgICAgY2xlYXJEb21EaXNwbGF5KCk7XG4gICAgICAgIHJlZnJlc2hEaXNwbGF5KCk7XG4gICAgICB9KTtcbiAgICAgIGVkaXRDYW5jZWxCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlZGl0Rm9ybVwiKS5yZXNldCgpO1xuICAgICAgICBlZGl0VG9kb0RpYWxvZy5jbG9zZSgpO1xuICAgICAgfSk7XG4gICAgfSksXG4gICk7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNvbXBsZXRlKGV2ZW50KSB7XG4gIGNvbnN0IHRkRGl2ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gIGNvbnNvbGUubG9nKHRkRGl2KTtcbiAgY29uc3QgdGRJbmRleCA9IHRkRGl2LmdldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIik7XG4gIGNoYW5nZUNvbXBsZXRlUHJvcGVydHkodGRJbmRleCwgY3VycmVudFRvZG9MaXN0KTtcbiAgc2V0VG9kb1N0YXR1c0ltYWdlKHRkRGl2LCBjdXJyZW50VG9kb0xpc3QpO1xuICBzdG9yZVRkTGlzdChjdXJyZW50VG9kb0xpc3QpO1xuICBjb25zb2xlLnRhYmxlKGN1cnJlbnRUb2RvTGlzdCk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZVRkRGl2KGV2ZW50KSB7XG4gIGNvbnN0IHRkVGl0bGUgPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5maXJzdENoaWxkLm5leHRTaWJsaW5nLnRleHRDb250ZW50O1xuICBkZWxldGVUb2RvKHRkVGl0bGUsIGN1cnJlbnRUb2RvTGlzdCk7XG4gIGNvbnN0IHRkRGl2ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gIHRkRGl2LnJlbW92ZSgpO1xuICBzdG9yZVRkTGlzdChjdXJyZW50VG9kb0xpc3QpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVOYXZCdG5zKGV2ZW50KSB7XG4gIGlmIChldmVudC50YXJnZXQudGV4dENvbnRlbnQgPT0gXCIrIEFkZCBOZXcgVG9kb1wiKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9sZEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYWN0aXZlXCIpO1xuICBvbGRCdG4uZm9yRWFjaCgoZWxlbWVudCkgPT4gZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiYWN0aXZlXCIpKTtcbiAgY29uc3QgYnRuID0gZXZlbnQudGFyZ2V0O1xuICBidG4uY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJEb21EaXNwbGF5KCkge1xuICB3aGlsZSAobWFpbi5maXJzdENoaWxkKSB7XG4gICAgbWFpbi5yZW1vdmVDaGlsZChtYWluLmZpcnN0Q2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hEaXNwbGF5KCkge1xuICBjb25zdCBjdXJyZW50VGFiID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hY3RpdmVcIik7XG4gIGNvbnN0IGhlYWRlciA9IGN1cnJlbnRUYWIudGV4dENvbnRlbnQ7XG4gIGxldCBjb250ZW50ID0gXCJcIjtcbiAgc3dpdGNoIChoZWFkZXIpIHtcbiAgICBjYXNlIFwiVG9kYXlcIjpcbiAgICAgIGNvbnRlbnQgPSBjcmVhdGVUb2RheUxpc3QoY3VycmVudFRvZG9MaXN0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJUaGlzIFdlZWtcIjpcbiAgICAgIGNvbnRlbnQgPSBjcmVhdGVUaGlzV2Vla0xpc3QoY3VycmVudFRvZG9MaXN0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJBbGwgVGFza3NcIjpcbiAgICAgIGNvbnRlbnQgPSBjdXJyZW50VG9kb0xpc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiRGFpbHkgVGFza3NcIjpcbiAgICAgIGNvbnRlbnQgPSBjcmVhdGVEYWlseUxpc3QoY3VycmVudFRvZG9MaXN0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCIrIEFkZCBOZXcgVG9kb1wiOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDogLy8gZm9yIHByb2plY3QgdGFic1xuICAgICAgY29udGVudCA9IGNyZWF0ZVByb2plY3RMaXN0KGN1cnJlbnRUb2RvTGlzdCwgaGVhZGVyKTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIG1haW4uYXBwZW5kQ2hpbGQoZ2VuZXJhdGVQcm9qZWN0SGVhZGVyKGhlYWRlcikpO1xuICBpZiAobWFpbi5jbGFzc0xpc3QuY29udGFpbnMoXCJxdWFkXCIpKSB7XG4gICAgbWFpbi5hcHBlbmRDaGlsZChnZW5lcmF0ZVRkUXVhZERpc3BsYXkoY3JlYXRlUXVhZExpc3RzKGNvbnRlbnQpKSk7XG4gICAgYWRkT3ZlcmR1ZUNsYXNzKGN1cnJlbnRUb2RvTGlzdCk7XG4gIH0gZWxzZSB7XG4gICAgbWFpbi5hcHBlbmRDaGlsZChnZW5lcmF0ZVRkTGlzdERpc3BsYXkoY29udGVudCkpO1xuICAgIGFkZE92ZXJkdWVDbGFzcyhjdXJyZW50VG9kb0xpc3QpO1xuICB9XG4gIGFjdGl2YXRlQWxsQnRucygpO1xuICBjb25zdCB0ZERpdkxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvZG9cIik7XG4gIHRkRGl2TGlzdC5mb3JFYWNoKChkaXYpID0+IHtcbiAgICBzZXRUb2RvU3RhdHVzSW1hZ2UoZGl2LCBjdXJyZW50VG9kb0xpc3QpO1xuICB9KTtcbn1cbiIsIlxuXG4vLyBOZXcgVG9kb1xuZnVuY3Rpb24gZWRpdFRvZG9Gb3JtKCkge1xuICBjb25zdCBkaWFsb2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGlhbG9nXCIpO1xuICBkaWFsb2cuY2xhc3NMaXN0LmFkZChcIm1vZGFsXCIpO1xuICBkaWFsb2cuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJlZGl0VG9kb0RpYWxvZ1wiKTtcblxuICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG4gIGZvcm0uc2V0QXR0cmlidXRlKFwibWV0aG9kXCIsIFwiZGlhbG9nXCIpO1xuICBmb3JtLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZWRpdEZvcm1cIik7XG5cbiAgY29uc3QgcHJvcGVydHlSb3cgPSBjcmVhdGVTZWxlY3RGb3JtUm93KFwidGQtcHJvcGVydHlcIiwgXCJDaG9vc2UgYSBwcm9wZXJ0eVwiLCBbXG4gICAgXCJ0aXRsZVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIixcbiAgICBcImR1ZURhdGVcIixcbiAgICBcInByaW9yaXR5XCIsXG4gICAgXCJub3Rlc1wiLFxuICAgIFwicHJvamVjdCB0YWdcIixcbiAgXSk7XG4gIGNvbnN0IG5ld1ZhbHVlUm93ID0gY3JlYXRlRm9ybVJvdyhcIm5ld1ZhbHVlXCIsIFwiXCIsIFwidGV4dFwiKTtcblxuICBjb25zdCBidG5Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBidG5Db250YWluZXIuY2xhc3NMaXN0LmFkZChcImZvcm0tYnV0dG9uc1wiKTtcblxuICBjb25zdCBjYW5jZWxCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjYW5jZWxCdG4uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJlZGl0Q2FuY2VsQnRuXCIpO1xuICBjYW5jZWxCdG4uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJjYW5jZWxcIik7XG4gIGNhbmNlbEJ0bi5zZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIsIFwiZGlhbG9nXCIpO1xuICBjYW5jZWxCdG4udGV4dENvbnRlbnQgPSBcIkNhbmNlbFwiO1xuXG4gIGNvbnN0IGNvbmZpcm1CdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjb25maXJtQnRuLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZWRpdENvbmZpcm1CdG5cIik7XG4gIGNvbmZpcm1CdG4uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJkZWZhdWx0XCIpO1xuICBjb25maXJtQnRuLnRleHRDb250ZW50ID0gXCJDb25maXJtXCI7XG5cbiAgYnRuQ29udGFpbmVyLmFwcGVuZENoaWxkKGNhbmNlbEJ0bik7XG4gIGJ0bkNvbnRhaW5lci5hcHBlbmRDaGlsZChjb25maXJtQnRuKTtcbiAgZm9ybS5hcHBlbmRDaGlsZChwcm9wZXJ0eVJvdyk7XG4gIGZvcm0uYXBwZW5kQ2hpbGQobmV3VmFsdWVSb3cpO1xuICBmb3JtLmFwcGVuZENoaWxkKGJ0bkNvbnRhaW5lcik7XG4gIGRpYWxvZy5hcHBlbmRDaGlsZChmb3JtKTtcbiAgcmV0dXJuIGRpYWxvZztcbn1cblxuZnVuY3Rpb24gZWRpdFRvZG9Qcm9wZXJ0eSh0ZEluZGV4LCB0ZExpc3QpIHtcbiAgY29uc3QgZWRpdFByb3BlcnR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZC1wcm9wZXJ0eVwiKS52YWx1ZTtcbiAgY29uc3QgbmV3VmFsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5ld1ZhbHVlXCIpLnZhbHVlO1xuICB0ZExpc3RbdGRJbmRleF1bZWRpdFByb3BlcnR5XSA9IG5ld1ZhbHVlO1xuICBjb25zdCBlZGl0ZWRUZCA9IHRkTGlzdFt0ZEluZGV4XTtcbiAgcmV0dXJuIGVkaXRlZFRkO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VDb21wbGV0ZVByb3BlcnR5KHRkSW5kZXgsIHRkTGlzdCkge1xuICBjb25zdCBjdXJyZW50U3RhdHVzID0gdGRMaXN0W3RkSW5kZXhdLnN0YXR1c1xuICBjb25zb2xlLmxvZyhgT3JpZ2luYWwgU3RhdHVzOiAke2N1cnJlbnRTdGF0dXN9YClcbiAgaWYgKHRkTGlzdFt0ZEluZGV4XS5zdGF0dXMgPT09IFwiXCIpIHtcbiAgICB0ZExpc3RbdGRJbmRleF0uc3RhdHVzID0gXCJjb21wbGV0ZVwiO1xuICB9IGVsc2Uge1xuICAgIHRkTGlzdFt0ZEluZGV4XS5zdGF0dXMgPSBcIlwiO1xuICB9XG4gIGNvbnNvbGUubG9nKGBOZXcgc3RhdHVzOiAke3RkTGlzdFt0ZEluZGV4XS5zdGF0dXN9YClcbiAgcmV0dXJuIHRkTGlzdFt0ZEluZGV4XS5zdGF0dXNcbn1cblxuLy8gaGVscGVyIGZ1bmN0aW9uc1xuZnVuY3Rpb24gY3JlYXRlRm9ybVJvdyhpZCwgdGl0bGUsIGlUeXBlKSB7XG4gIGNvbnN0IGZvcm1Sb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBmb3JtUm93LmNsYXNzTGlzdC5hZGQoXCJmb3JtLXJvd1wiKTtcblxuICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgbGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIGlkKTtcbiAgbGFiZWwudGV4dENvbnRlbnQgPSB0aXRsZTtcblxuICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBpVHlwZSk7XG4gIGlucHV0LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgaWQpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZCk7XG5cbiAgZm9ybVJvdy5hcHBlbmRDaGlsZChsYWJlbCk7XG4gIGZvcm1Sb3cuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICByZXR1cm4gZm9ybVJvdztcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0Rm9ybVJvdyhpZCwgdGl0bGUsIG9wdGlvbnNMaXN0KSB7XG4gIGNvbnN0IGZvcm1Sb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBmb3JtUm93LmNsYXNzTGlzdC5hZGQoXCJmb3JtLXJvd1wiKTtcblxuICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgbGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIGlkKTtcbiAgbGFiZWwudGV4dENvbnRlbnQgPSB0aXRsZTtcblxuICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuICBzZWxlY3Quc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xuICBzZWxlY3Quc2V0QXR0cmlidXRlKFwibmFtZVwiLCBpZCk7XG5cbiAgb3B0aW9uc0xpc3QuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgY29uc3QgY3VycmVudE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgY3VycmVudE9wdGlvbi50ZXh0Q29udGVudCA9IG9wdGlvbjtcbiAgICBzZWxlY3QuYXBwZW5kQ2hpbGQoY3VycmVudE9wdGlvbik7XG4gIH0pO1xuXG4gIGZvcm1Sb3cuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICBmb3JtUm93LmFwcGVuZENoaWxkKHNlbGVjdCk7XG4gIHJldHVybiBmb3JtUm93O1xufVxuXG5leHBvcnQgeyBlZGl0VG9kb1Byb3BlcnR5LCBlZGl0VG9kb0Zvcm0sIGNoYW5nZUNvbXBsZXRlUHJvcGVydHkgfTtcbiJdLCJuYW1lcyI6WyJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIkRhdGUiLCJjb25zdHJ1Y3RvciIsIk5hTiIsImNvbnN0cnVjdEZyb20iLCJkYXRlIiwidmFsdWUiLCJhZGREYXlzIiwiYW1vdW50IiwiX2RhdGUiLCJpc05hTiIsInNldERhdGUiLCJnZXREYXRlIiwiaXNWYWxpZCIsIk51bWJlciIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsImFyZ3MiLCJvcHRpb25zIiwid2lkdGgiLCJTdHJpbmciLCJkZWZhdWx0V2lkdGgiLCJmb3JtYXRzIiwiZm9ybWF0TG9uZyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwic2hvcnQiLCJ0aW1lIiwiZGF0ZVRpbWUiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZSIsImxhc3RXZWVrIiwieWVzdGVyZGF5IiwidG9kYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwidmFsdWVzQXJyYXkiLCJjb250ZXh0IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJ2YWx1ZXMiLCJhcmd1bWVudENhbGxiYWNrIiwiYnVpbGRNYXRjaEZuIiwic3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJhcnJheSIsInByZWRpY2F0ZSIsImxlbmd0aCIsInRlc3QiLCJmaW5kSW5kZXgiLCJvYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsInNsaWNlIiwiZW5VUyIsImNvZGUiLCJmb3JtYXREaXN0YW5jZSIsInRva2VuIiwiY291bnQiLCJyZXN1bHQiLCJ0b2tlblZhbHVlIiwicmVwbGFjZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9iYXNlRGF0ZSIsIl9vcHRpb25zIiwibG9jYWxpemUiLCJvcmRpbmFsTnVtYmVyIiwiZGlydHlOdW1iZXIiLCJudW1iZXIiLCJyZW0xMDAiLCJlcmEiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJxdWFydGVyIiwibW9udGgiLCJkYXkiLCJkYXlQZXJpb2QiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsInBhcnNlUGF0dGVybiIsInBhcnNlSW50IiwicGFyc2VSZXN1bHQiLCJhbnkiLCJpbmRleCIsIndlZWtTdGFydHNPbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJNYXRoIiwicG93IiwibWlsbGlzZWNvbmRzSW5XZWVrIiwibWlsbGlzZWNvbmRzSW5EYXkiLCJzdGFydE9mRGF5Iiwic2V0SG91cnMiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidXRjRGF0ZSIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwic2V0VVRDRnVsbFllYXIiLCJnZXRUaW1lIiwiZ2V0RGF5T2ZZZWFyIiwiZGF0ZUxlZnQiLCJkYXRlUmlnaHQiLCJzdGFydE9mRGF5TGVmdCIsInN0YXJ0T2ZEYXlSaWdodCIsInRpbWVzdGFtcExlZnQiLCJ0aW1lc3RhbXBSaWdodCIsInJvdW5kIiwiZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIiwiY2xlYW5EYXRlIiwic2V0RnVsbFllYXIiLCJzdGFydE9mWWVhciIsInN0YXJ0T2ZXZWVrIiwibG9jYWxlIiwiZ2V0RGF5IiwiZGlmZiIsInN0YXJ0T2ZJU09XZWVrIiwiZ2V0SVNPV2Vla1llYXIiLCJ5ZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJnZXRJU09XZWVrIiwiZm91cnRoT2ZKYW51YXJ5Iiwic3RhcnRPZklTT1dlZWtZZWFyIiwiZ2V0V2Vla1llYXIiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsImdldFdlZWsiLCJmaXJzdFdlZWsiLCJzdGFydE9mV2Vla1llYXIiLCJhZGRMZWFkaW5nWmVyb3MiLCJ0YXJnZXRMZW5ndGgiLCJhYnMiLCJwYWRTdGFydCIsImxpZ2h0Rm9ybWF0dGVycyIsInkiLCJzaWduZWRZZWFyIiwiTSIsImQiLCJhIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwidG9VcHBlckNhc2UiLCJoIiwiSCIsIm0iLCJzIiwiUyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZmxvb3IiLCJmb3JtYXR0ZXJzIiwiRyIsInVuaXQiLCJZIiwic2lnbmVkV2Vla1llYXIiLCJ3ZWVrWWVhciIsIlIiLCJ1IiwiUSIsImNlaWwiLCJxIiwiTCIsInciLCJ3ZWVrIiwiSSIsImlzb1dlZWsiLCJEIiwiZGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImUiLCJsb2NhbERheU9mV2VlayIsImMiLCJpIiwiaXNvRGF5T2ZXZWVrIiwidG9Mb3dlckNhc2UiLCJiIiwiaG91cnMiLCJCIiwiSyIsImsiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsIngiLCJPIiwiZm9ybWF0VGltZXpvbmVTaG9ydCIsInoiLCJ0Iiwib3JpZ2luYWxEYXRlIiwiVCIsIm9mZnNldCIsImRlbGltaXRlciIsInNpZ24iLCJhYnNPZmZzZXQiLCJtaW51dGVzIiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJwYXR0ZXJuIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJsb25nRm9ybWF0dGVycyIsInAiLCJQIiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsImRhdGVUaW1lRm9ybWF0IiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJ0aHJvd1Byb3RlY3RlZEVycm9yIiwiZm9ybWF0IiwiaW5wdXQiLCJSYW5nZUVycm9yIiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJmb3JtYXRTdHIiLCJmb3JtYXR0ZXJPcHRpb25zIiwibWFwIiwic3Vic3RyaW5nIiwiZmlyc3RDaGFyYWN0ZXIiLCJsb25nRm9ybWF0dGVyIiwiam9pbiIsIm1hdGNoZWQiLCJjbGVhbkVzY2FwZWRTdHJpbmciLCJmb3JtYXR0ZXIiLCJ1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMiLCJpbmRleE9mIiwidXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyIsImlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4iLCJUb2RvIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsIm5vdGVzIiwicHJvamVjdFRhZyIsInRoaXMiLCJ0b0xvY2FsZVN0cmluZyIsImR1ZURhdGVGb3JtYXQiLCJ0b2RvcyIsInN0YXR1cyIsIlByb2plY3QiLCJ0ZExpc3QiLCJsaXN0IiwiZmlsdGVyIiwidGQiLCJtYWluVG9kb0xpc3QiLCJoYXJkQ29kZVREcyIsImRlc2NyaXB0IiwibmV3VG9kbyIsInB1c2giLCJzb3J0IiwiZm9yRWFjaCIsInRkT2JqZWN0IiwiYWRkT3ZlcmR1ZUNsYXNzIiwib3ZlcmR1ZUxpc3QiLCJkYXRlVG9Db21wYXJlIiwiaXNCZWZvcmUiLCJjaGVja0lmT3ZlcmR1ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImRpdiIsInRkSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJpbmNsdWRlcyIsImNsYXNzTGlzdCIsImFkZCIsImNyZWF0ZVByb2plY3RUYWdMaXN0IiwicHJvamVjdFRhZ0xpc3QiLCJuZXdQcm9qZWN0IiwiY3JlYXRlUXVhZExpc3RzIiwidXJnZW5jeURhdGUiLCJjcmVhdGVGb3JtUm93IiwiaWQiLCJpVHlwZSIsImZvcm1Sb3ciLCJjcmVhdGVFbGVtZW50IiwibGFiZWwiLCJzZXRBdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwiY3JlYXRlU2VsZWN0Rm9ybVJvdyIsIm9wdGlvbnNMaXN0Iiwic2VsZWN0Iiwib3B0aW9uIiwiY3VycmVudE9wdGlvbiIsInRhc2tHcmFtbWFyIiwibnVtIiwidGFzayIsImdlbmVyYXRlUHJvamVjdEhlYWRlciIsInBIZWFkZXIiLCJnZW5lcmF0ZVRkTGlzdERpc3BsYXkiLCJjb250YWluZXIiLCJlbGVtZW50IiwiY3JlYXRlVG9kb0RpdiIsImdlbmVyYXRlVGRRdWFkRGlzcGxheSIsInF1YWRMaXN0cyIsIm5ld1F1YWQiLCJjcmVhdGVRdWFkQ29udGFpbmVyIiwidXJnZW50IiwibGF0ZXIiLCJpbXBvcnRhbnQiLCJ1bmltcG9ydGFudCIsInF1YWRDb250YWluZXIiLCJ0b2RvRGl2Iiwic3RhdHVzQm94Iiwic3JjIiwidG9kb1RpdGxlIiwiZHVlRGF0ZURpdiIsInByaW9yaXR5RGl2Iiwic3R5bGUiLCJjb2xvciIsInRvZG9PYmplY3QiLCJnZXRQcmlvcml0eUNvbG9yIiwiZWRpdEJ0biIsImRlbGV0ZUJ0biIsInNldFRvZG9TdGF0dXNJbWFnZSIsInRkRGl2IiwiY3VycmVudFN0YXR1cyIsInJlbW92ZSIsImZpcnN0Q2hpbGQiLCJjb250ZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJtYWluIiwidG9nZ2xlIiwiY3VycmVudFRvZG9MaXN0IiwicmV0cmlldmVUZExpc3QiLCJ0ZExpc3RSZXQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwic3RvcmVUZExpc3QiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZGlhbG9nIiwiZm9ybSIsInRpdGxlUm93IiwiZGVzY3JpcHRSb3ciLCJkYXRlUm93IiwicHJpb3JpdHlSb3ciLCJjb25zb2xlIiwibG9nIiwicHJvamVjdFJvdyIsImJ0bkNvbnRhaW5lciIsImNhbmNlbEJ0biIsImNvbmZpcm1CdG4iLCJjcmVhdGVOZXdUb2RvRm9ybSIsInByb3BlcnR5Um93IiwibmV3VmFsdWVSb3ciLCJlZGl0VG9kb0Zvcm0iLCJjb250YWlucyIsImluaXRpYWxpemVEaXNwbGF5IiwiYWN0aXZhdGVBbGxCdG5zIiwidGFibGUiLCJ0b2dnbGVCb3giLCJxdWVyeVNlbGVjdG9yIiwiY2lyY2xlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsZWFyRG9tRGlzcGxheSIsInJlZnJlc2hEaXNwbGF5IiwiY2hlY2tlZCIsInRyYW5zZm9ybSIsIm5hdkJ0bnMiLCJidG4iLCJldmVudCIsInRvZ2dsZU5hdkJ0bnMiLCJwcm9qZWN0TmF2QnRuIiwiUEJDb250YWluZXIiLCJ0YWciLCJnZW5lcmF0ZVByb2plY3RCdXR0b25zIiwicHJvamVjdE9iamVjdExpc3QiLCJwcm9qZWN0VGRMaXN0cyIsImN1cnJlbnRQcm9qZWN0IiwiY3JlYXRlUHJvamVjdFRETGlzdHMiLCJwcm9qZWN0T2JqZWN0IiwidGl0bGVEaXYiLCJwcm9qZWN0U3RhdHMiLCJwcm9qZWN0TGlzdCIsIm51bUNvbXBsZXRlZCIsIm51bVRkcyIsIm51bVExIiwibnVtUTIiLCJudW1RMyIsIm51bVE0IiwiZ2V0UHJvamVjdFN0YXRzIiwiY29tcGxldGVuZXNzIiwicTEiLCJ0YXNrMSIsInEyIiwidGFzazIiLCJxMyIsInRhc2szIiwicTQiLCJ0YXNrNCIsImdlbmVyYXRlU3RhdHNEaXYiLCJnZW5lcmF0ZVByb2plY3RPdmVydmlld3NEaXNwbGF5IiwicHJvamVjdEJ0bnMiLCJuZXdUREJ0biIsIm5ld1RvZG9EaWFsb2ciLCJib3giLCJ0YXJnZXQiLCJwYXJlbnRFbGVtZW50IiwiY2hhbmdlQ29tcGxldGVQcm9wZXJ0eSIsInRvZ2dsZUNvbXBsZXRlIiwiQnRuIiwidGRUaXRsZSIsInNwbGljZSIsImRlbGV0ZVRvZG8iLCJuZXh0U2libGluZyIsImRlbGV0ZVRkRGl2IiwiZWRpdFRkQnRucyIsImVkaXRUb2RvRGlhbG9nIiwiZWRpdENhbmNlbEJ0biIsImVkaXRDb25maXJtQnRuIiwic2hvd01vZGFsIiwicHJldmVudERlZmF1bHQiLCJlZGl0UHJvcGVydHkiLCJuZXdWYWx1ZSIsImVkaXRUb2RvUHJvcGVydHkiLCJyZXNldCIsImNsb3NlIiwiYWN0aXZhdGVFZGl0QnRucyIsInJlbW92ZUNoaWxkIiwiaGVhZGVyIiwiY3JlYXRlVG9kYXlMaXN0IiwiY3JlYXRlVGhpc1dlZWtMaXN0IiwiY3JlYXRlRGFpbHlMaXN0IiwiY3JlYXRlUHJvamVjdExpc3QiLCJuZXdUZE9iamVjdCIsImFkZE5ld1RvZG8iLCJuZXdEaXYiLCJkaXZMaXN0Iiwic2libGluZ1RpdGxlIiwiYWZ0ZXIiLCJzZWNvbmRUaXRsZSIsImJlZm9yZSIsImRpc3BsYXlOZXdUZERpdiJdLCJzb3VyY2VSb290IjoiIn0=