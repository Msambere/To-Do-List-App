(()=>{"use strict";function t(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof e||"[object String]"===e?new Date(t):new Date(NaN)}function e(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function n(n,a){const o=t(n);return isNaN(a)?e(n,NaN):a?(o.setDate(o.getDate()+a),o):o}function a(e){if(!(n=e,n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)||"number"==typeof e))return!1;var n;const a=t(e);return!isNaN(Number(a))}const o={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function r(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const i={date:r({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:r({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:r({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},c={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function d(t){return(e,n)=>{let a;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,o=n?.width?String(n.width):e;a=t.formattingValues[o]||t.formattingValues[e]}else{const e=t.defaultWidth,o=n?.width?String(n.width):t.defaultWidth;a=t.values[o]||t.values[e]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function s(t){return(e,n={})=>{const a=n.width,o=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],r=e.match(o);if(!r)return null;const i=r[0],c=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(c)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(c):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(c);let s;return s=t.valueCallback?t.valueCallback(d):d,s=n.valueCallback?n.valueCallback(s):s,{value:s,rest:e.slice(i.length)}}}var u;const l={code:"en-US",formatDistance:(t,e,n)=>{let a;const r=o[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:i,formatRelative:(t,e,n,a)=>c[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:d({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:d({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:d({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:d({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:d({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(u={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(u.matchPattern);if(!n)return null;const a=n[0],o=t.match(u.parsePattern);if(!o)return null;let r=u.valueCallback?u.valueCallback(o[0]):o[0];return r=e.valueCallback?e.valueCallback(r):r,{value:r,rest:t.slice(a.length)}}),era:s({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:s({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:s({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:s({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:s({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let m={};function h(){return m}Math.pow(10,8);const f=6048e5,g=864e5;function p(e){const n=t(e);return n.setHours(0,0,0,0),n}function w(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function y(n){const a=t(n);return function(t,e){const n=p(t),a=p(e),o=n.getTime()-w(n),r=a.getTime()-w(a);return Math.round((o-r)/g)}(a,function(n){const a=t(n),o=e(n,0);return o.setFullYear(a.getFullYear(),0,1),o.setHours(0,0,0,0),o}(a))+1}function b(e,n){const a=h(),o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,r=t(e),i=r.getDay(),c=(i<o?7:0)+i-o;return r.setDate(r.getDate()-c),r.setHours(0,0,0,0),r}function v(t){return b(t,{weekStartsOn:1})}function E(n){const a=t(n),o=a.getFullYear(),r=e(n,0);r.setFullYear(o+1,0,4),r.setHours(0,0,0,0);const i=v(r),c=e(n,0);c.setFullYear(o,0,4),c.setHours(0,0,0,0);const d=v(c);return a.getTime()>=i.getTime()?o+1:a.getTime()>=d.getTime()?o:o-1}function D(n){const a=t(n),o=v(a).getTime()-function(t){const n=E(t),a=e(t,0);return a.setFullYear(n,0,4),a.setHours(0,0,0,0),v(a)}(a).getTime();return Math.round(o/f)+1}function M(n,a){const o=t(n),r=o.getFullYear(),i=h(),c=a?.firstWeekContainsDate??a?.locale?.options?.firstWeekContainsDate??i.firstWeekContainsDate??i.locale?.options?.firstWeekContainsDate??1,d=e(n,0);d.setFullYear(r+1,0,c),d.setHours(0,0,0,0);const s=b(d,a),u=e(n,0);u.setFullYear(r,0,c),u.setHours(0,0,0,0);const l=b(u,a);return o.getTime()>=s.getTime()?r+1:o.getTime()>=l.getTime()?r:r-1}function k(n,a){const o=t(n),r=b(o,a).getTime()-function(t,n){const a=h(),o=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,r=M(t,n),i=e(t,0);return i.setFullYear(r,0,o),i.setHours(0,0,0,0),b(i,n)}(o,a).getTime();return Math.round(r/f)+1}function x(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const C={y(t,e){const n=t.getFullYear(),a=n>0?n:1-n;return x("yy"===e?a%100:a,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):x(n+1,2)},d:(t,e)=>x(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>x(t.getHours()%12||12,e.length),H:(t,e)=>x(t.getHours(),e.length),m:(t,e)=>x(t.getMinutes(),e.length),s:(t,e)=>x(t.getSeconds(),e.length),S(t,e){const n=e.length,a=t.getMilliseconds();return x(Math.floor(a*Math.pow(10,n-3)),e.length)}},T={G:function(t,e,n){const a=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),a=e>0?e:1-e;return n.ordinalNumber(a,{unit:"year"})}return C.y(t,e)},Y:function(t,e,n,a){const o=M(t,a),r=o>0?o:1-o;return"YY"===e?x(r%100,2):"Yo"===e?n.ordinalNumber(r,{unit:"year"}):x(r,e.length)},R:function(t,e){return x(E(t),e.length)},u:function(t,e){return x(t.getFullYear(),e.length)},Q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return x(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return x(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){const a=t.getMonth();switch(e){case"M":case"MM":return C.M(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){const a=t.getMonth();switch(e){case"L":return String(a+1);case"LL":return x(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){const o=k(t,a);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):x(o,e.length)},I:function(t,e,n){const a=D(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):x(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):C.d(t,e)},D:function(t,e,n){const a=y(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):x(a,e.length)},E:function(t,e,n){const a=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){const o=t.getDay(),r=(o-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(r);case"ee":return x(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){const o=t.getDay(),r=(o-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(r);case"cc":return x(r,e.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){const a=t.getDay(),o=0===a?7:a;switch(e){case"i":return String(o);case"ii":return x(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){const a=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){const a=t.getHours();let o;switch(o=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){const a=t.getHours();let o;switch(o=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return C.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):C.H(t,e)},K:function(t,e,n){const a=t.getHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):x(a,e.length)},k:function(t,e,n){let a=t.getHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):x(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):C.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):C.s(t,e)},S:function(t,e){return C.S(t,e)},X:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return S(o);case"XXXX":case"XX":return P(o);default:return P(o,":")}},x:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return S(o);case"xxxx":case"xx":return P(o);default:return P(o,":")}},O:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+L(o,":");default:return"GMT"+P(o,":")}},z:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+L(o,":");default:return"GMT"+P(o,":")}},t:function(t,e,n,a){const o=a._originalDate||t;return x(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,a){return x((a._originalDate||t).getTime(),e.length)}};function L(t,e=""){const n=t>0?"-":"+",a=Math.abs(t),o=Math.floor(a/60),r=a%60;return 0===r?n+String(o):n+String(o)+e+x(r,2)}function S(t,e){return t%60==0?(t>0?"-":"+")+x(Math.abs(t)/60,2):P(t,e)}function P(t,e=""){const n=t>0?"-":"+",a=Math.abs(t);return n+x(Math.floor(a/60),2)+e+x(a%60,2)}const q=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},I=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},A={p:I,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],a=n[1],o=n[2];if(!o)return q(t,e);let r;switch(a){case"P":r=e.dateTime({width:"short"});break;case"PP":r=e.dateTime({width:"medium"});break;case"PPP":r=e.dateTime({width:"long"});break;default:r=e.dateTime({width:"full"})}return r.replace("{{date}}",q(a,e)).replace("{{time}}",I(o,e))}},B=["D","DD"],W=["YY","YYYY"];function Y(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const N=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,j=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,O=/^'([^]*?)'?$/,Q=/''/g,H=/[a-zA-Z]/;function F(e,n,o){const r=h(),i=o?.locale??r.locale??l,c=o?.firstWeekContainsDate??o?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,d=o?.weekStartsOn??o?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=t(e);if(!a(s))throw new RangeError("Invalid time value");const u={firstWeekContainsDate:c,weekStartsOn:d,locale:i,_originalDate:s};return n.match(j).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,A[e])(t,i.formatLong):t})).join("").match(N).map((function(t){if("''"===t)return"'";const a=t[0];if("'"===a)return function(t){const e=t.match(O);return e?e[1].replace(Q,"'"):t}(t);const r=T[a];if(r)return o?.useAdditionalWeekYearTokens||(c=t,-1===W.indexOf(c))||Y(t,n,String(e)),!o?.useAdditionalDayOfYearTokens&&function(t){return-1!==B.indexOf(t)}(t)&&Y(t,n,String(e)),r(s,t,i.localize,u);var c;if(a.match(H))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return t})).join("")}function $(t,e,n,a,o){this.title=t,this.description=e,this.dueDate=function(t){return F(""===t?(new Date).toLocaleString():new Date(t).toLocaleString(),"M-dd-y")}(n),this.priority=a,this.projectTag=o,this.status="incomplete"}function z(t,e){this.projectTag=t;const n=e.filter((e=>e.projectTag===t));this.tdList=n}const G=[];function X(t,e,n,a,o){const r=new $(t,e,n,a,o);var i;return G.push(r),G.sort(((t,e)=>new Date(t.dueDate)-new Date(e.dueDate))),(i=G).forEach((t=>{t["data-index"]=i.findIndex((e=>e.title===t.title))})),G}function J(e){const a=[];e.forEach((e=>{(function(e){return function(e,n){return+t(e)<+t(n)}(e.dueDate,n(new Date,-1))})(e)&&a.push(e["data-index"].toString())})),document.querySelectorAll(".todo").forEach((t=>{const e=t.getAttribute("data-index");a.includes(e)&&t.classList.add("overdue")}))}function R(t){t.forEach((e=>{e["data-index"]=t.findIndex((t=>t.title===e.title))}))}function U(t){const e=[];return t.forEach((t=>{const n=t.projectTag;"Daily"===n||""===n||e.includes(n)||e.push(n)})),e}function _(t){const e=n(new Date,10);return[t.filter((t=>"High"===t.priority&&t.dueDate<=F(e,"M-dd-y"))),t.filter((t=>"High"===t.priority&&t.dueDate>F(e,"M-dd-y")||"Medium"===t.priority&&t.dueDate<=F(e,"M-dd-y"))),t.filter((t=>"Low"===t.priority&&t.dueDate<=F(e,"M-dd-y")||"Medium"===t.priority&&t.dueDate>F(e,"M-dd-y"))),t.filter((t=>"Low"===t.priority&&t.dueDate>F(e,"M-dd-y")))]}function V(t){let e="";return e=1===t?"task is":"tasks are",e}function K(t){const e=document.createElement("h2");return e.classList.add("pHeader"),e.textContent=t,e}function Z(t){const e=document.createElement("div");return e.classList.add("list-display"),e.classList.add("tdList-container"),t.forEach((t=>{const n=nt(t);e.appendChild(n)})),e}function tt(t){const e=document.createElement("div");e.classList.add("quad-display"),e.classList.add("quad-container");for(let n=1;n<5;n++){const a=et(t[n-1]);a.classList.add(`quad${n}`),e.appendChild(a)}const n=document.createElement("div");n.classList.add("quad-grid-label"),n.classList.add("urgent"),n.textContent="URGENT",e.appendChild(n);const a=document.createElement("div");a.classList.add("quad-grid-label"),a.classList.add("later"),a.textContent="NOT URGENT",e.appendChild(a);const o=document.createElement("div");o.classList.add("quad-grid-label"),o.classList.add("rotate"),o.classList.add("important"),o.textContent="IMPORTANT",e.appendChild(o);const r=document.createElement("div");return r.classList.add("quad-grid-label"),r.classList.add("rotate"),r.classList.add("unimportant"),r.textContent=" NOT IMPORTANT",e.appendChild(r),e}function et(t){const e=document.createElement("div");return e.classList.add("tdList-container"),t.forEach((t=>{const n=nt(t);e.appendChild(n)})),e}function nt(t){const e=document.createElement("div");e.classList.add("todo"),e.setAttribute("data-index",t["data-index"]);const n=document.createElement("input");n.setAttribute("type","checkbox"),n.classList.add("td-status-check");const a=document.createElement("div");a.classList.add("todo-title"),a.textContent=t.title;const o=document.createElement("div");o.classList.add("dueDate-div"),o.textContent=t.dueDate;const r=document.createElement("div");r.classList.add("priority-div"),r.textContent=t.priority,r.style.color=function(t){const{priority:e}=t;return"High"===e?"red":"Medium"===e?"blue":"Low"===e?"black":"grey"}(t);const i=document.createElement("button");i.classList.add("td-btn"),i.onclick=()=>function(t){it.textContent=t.description,rt.showModal()}(t);const c=document.createElement("img");c.src="./Images/icons8-magnifying-glass-64.png",c.setAttribute("alt","info"),c.classList.add("button-icon"),i.appendChild(c);const d=document.createElement("button");d.classList.add("td-btn"),d.onclick=()=>function(t){const e=t["data-index"];return ot.showModal(),document.getElementById("editTdIndex").value=e,t}(t);const s=document.createElement("img");s.src="./Images/pencil.png",s.setAttribute("onerror","this.onerror=null;this.src = ./Images/pencil.png"),s.setAttribute("alt","edit"),s.classList.add("button-icon"),d.appendChild(s);const u=document.createElement("button");u.classList.add("td-btn"),u.classList.add("delete"),u.onclick=()=>function(t){const e=t["data-index"];document.getElementById("deleteTDIndex").value=e}(t);const l=document.createElement("img");return l.src="./Images/delete.png",l.setAttribute("alt","delete"),l.classList.add("button-icon"),u.appendChild(l),e.appendChild(n),e.appendChild(a),e.appendChild(o),e.appendChild(r),e.appendChild(i),e.appendChild(d),e.appendChild(u),e}function at(t,e){const n=e[t.getAttribute("data-index")].status;"incomplete"===n?t.classList.remove("complete"):"complete"===n&&t.classList.add("complete")}X("Always Quad 1","check view",n(new Date,1),"High","To-do App"),X("Always Quad 2 bc of priority","check view",n(new Date,15),"High","To-do App"),X("Always Quad 2 bc of date","check view",n(new Date,4),"Medium","To-do App"),X("Always Quad 3 bc of date","check view",n(new Date,6),"Low","To-do App"),X("Always Quad 3 bc of priority","check view",n(new Date,15),"Medium","To-do App"),X("Go to the gym","Complete the daily workout","","High","Daily"),X("tester1","checking fn","04-11-1989","Low","Test 1"),X("tester2","checking fn","05-18-2020","Medium","Test 2"),X("Always today","always today",new Date,"Low","Test 1"),X("Today plus 2","checking fn",n(new Date,2),"High","Test 2"),X("Today plus 5","checking fn",n(new Date,5),"Medium","Test 3"),X("read the newspaper","populate daily list","","Medium","Daily"),X("Always Quad 4","should be there",n(new Date,20),"Low","Test 1");const ot=document.getElementById("editToDoDialog"),rt=document.getElementById("tdInfoDialog"),it=document.getElementById("expandedInfo"),ct=document.getElementById("projectTag-options");document.getElementById("content");const dt=document.getElementById("main");document.querySelector(".circle");let st=[];function ut(){const t=localStorage.getItem("tdList");st=JSON.parse(t)}function lt(t){localStorage.setItem("tdList",JSON.stringify(t)),ut()}var mt;localStorage.getItem("tdList")||localStorage.setItem("tdList",JSON.stringify(G)),ut(),document.getElementById("all").classList.toggle("active"),function(t){U(t).forEach((t=>{const e=document.createElement("option");e.textContent=t,ct.appendChild(e)}))}(mt=st),function(t){dt.appendChild(K("All Tasks")),dt.classList.contains("quad")?dt.appendChild(tt(_(t))):dt.appendChild(Z(t)),J(t)}(mt);const ht=document.getElementById("main");let ft=document.querySelectorAll(".td-status-check"),gt=document.querySelectorAll(".todo");!function(){const t=document.getElementById("editToDoDialog"),e=document.getElementById("editForm"),n=document.querySelector("#editCancelBtn");document.querySelector("#editConfirmBtn").addEventListener("click",(n=>{n.preventDefault();const a=document.getElementById("editTdIndex").value;st[a]=function(t){const e=document.getElementById("editTdIndex").value,n=document.getElementById("td-property").value,a=document.getElementById("newValue").value;return{...t[e],[n]:a}}(st),st.sort(((t,e)=>new Date(t.dueDate)-new Date(e.dueDate))),e.reset(),t.close(),lt(st),Pt()})),n.addEventListener("click",(()=>{document.getElementById("editForm").reset(),t.close()}))}(),Tt(),gt.forEach((t=>{at(t,st)})),Ct(),document.querySelector(".logo").addEventListener("click",(()=>console.table(st)));const pt=document.querySelector(".circle");pt.addEventListener("click",(()=>{ht.classList.toggle("quad"),Pt(),ht.classList.contains("quad")?pt.style.transform="translateX(35px)":pt.style.transform="translateX(0px)"})),document.querySelectorAll(".navBtn").forEach((t=>{t.addEventListener("click",(t=>{Lt(t),Pt()}))}));const wt=document.getElementById("projects"),yt=document.getElementById("PBContainer");wt.addEventListener("click",(t=>{if(yt.firstChild)document.querySelectorAll(".project-btn").forEach((t=>t.remove())),document.querySelector("#projects").classList.toggle("active"),document.querySelector(".default-display").classList.toggle("active"),Pt();else{Lt(t),function(t){const e=document.getElementById("PBContainer");U(t).forEach((t=>{const n=document.createElement("button");n.classList.add("button"),n.classList.add("project-btn"),n.textContent=t,e.appendChild(n)}))}(st),St(),ht.appendChild(K("All Projects")),ht.appendChild(function(t){const e=document.createElement("div");e.classList.add("projectOverviews-container"),e.classList.add("list-display");const n=function(t){const e=U(t),n=[];return e.forEach((e=>{const a=new z(e,t);n.push(a)})),n}(t);return n.forEach((t=>{const n=function(t){const e=document.createElement("div");e.classList.add("project-overview");const n=document.createElement("h3");n.classList.add("overview-title"),n.textContent=t.projectTag;const a=function(t){const e=t.filter((t=>"complete"===t.status)).length,n=t.length,a=_(t);return{numTds:n,numCompleted:e,numQ1:a[0].length,numQ2:a[1].length,numQ3:a[2].length,numQ4:a[3].length}}(t.tdList),o=document.createElement("p");o.textContent=`${a.numCompleted} / ${a.numTds} tasks completed`;const r=document.createElement("p"),i=V(a.numQ1);r.textContent=`${a.numQ1}  ${i} urgent and important.`;const c=document.createElement("p"),d=V(a.numQ2);c.textContent=`${a.numQ2} ${d} not urgent and important.`;const s=document.createElement("p"),u=V(a.numQ3);s.textContent=`${a.numQ3} ${u} urgent and unimportant.`;const l=document.createElement("p"),m=V(a.numQ4);return l.textContent=`${a.numQ4} ${m} not urgent and unimportant.`,e.appendChild(n),e.appendChild(o),e.appendChild(r),e.appendChild(c),e.appendChild(s),e.appendChild(l),e}(t);e.appendChild(n)})),e}(st)),Tt();const e=document.querySelectorAll(".project-btn");e.forEach((t=>t.addEventListener("click",(t=>{Lt(t),Pt(),e.forEach((t=>t.remove()))}))))}}));const bt=document.getElementById("new-todo-btn"),vt=document.getElementById("newToDoDialog"),Et=document.getElementById("myForm"),Dt=document.getElementById("cancelBtn"),Mt=document.getElementById("confirmBtn");bt.addEventListener("click",(()=>{bt.classList.toggle("clicked"),vt.showModal()})),Mt.addEventListener("click",(t=>{t.preventDefault();const e=function(t){const e=new $(document.getElementById("td-title").value,document.getElementById("td-description").value,F(n(document.getElementById("td-dueDate").value,1),"M-dd-y"),document.getElementById("td-priority").value,document.getElementById("td-projectTag").value);return t.push(e),t.sort(((t,e)=>new Date(t.dueDate)-new Date(e.dueDate))),R(t),e}(st);!function(t){const e=nt(t),n=st.findIndex((e=>e.title===t.title));if(gt=document.querySelectorAll(".todo"),0!==n){const t=st[n-1].title;gt.forEach((n=>{n.textContent.includes(t)&&n.after(e)}))}else{const t=st[1].title;gt.forEach((n=>{n.textContent.includes(t)&&n.before(e)}))}}(e),Tt(),Et.reset(),vt.close(),lt(st),J(st)})),Dt.addEventListener("click",(()=>{document.getElementById("myForm").reset(),vt.close()}));const kt=document.getElementById("infoCloseBtn"),xt=document.getElementById("tdInfoDialog");function Ct(){gt=document.querySelectorAll(".todo"),gt.forEach((t=>{t.classList.contains("complete")&&t.firstChild.setAttribute("checked",!0)}))}function Tt(){ft=document.querySelectorAll(".td-status-check"),ft.forEach((t=>t.addEventListener("click",(t=>function(t){const e=t.target.parentElement,n=e.getAttribute("data-index");st[n]=function(t,e){return"incomplete"===e[t].status?{...e[t],status:"complete"}:"complete"===e[t].status?{...e[t],status:"incomplete"}:void 0}(n,st),at(e,st),lt(st)}(t))))),document.querySelectorAll(".delete").forEach((t=>t.addEventListener("click",(t=>(function(t,e){e.splice(t,1),e.sort(((t,e)=>t.dueDate-e.dueDate)),R(e)}(document.getElementById("deleteTDIndex").value,st),lt(st),void Pt())))))}function Lt(t){"+ Add New Todo"!=t.target.textContent&&(document.querySelectorAll(".active").forEach((t=>t.classList.toggle("active"))),t.target.classList.toggle("active"))}function St(){for(;ht.firstChild;)ht.removeChild(ht.firstChild)}function Pt(){St();const t=document.querySelector(".active").textContent;let e="";switch(t){case"Today":e=function(t){return t.filter((t=>t.dueDate===F(new Date,"M-dd-y")&&"Daily"!==t.projectTag))}(st);break;case"This Week":e=function(t){return t.filter((t=>t.dueDate>=F(new Date,"M-dd-y")&&t.dueDate<=F(n(new Date,7),"M-dd-y")&&"Daily"!==t.projectTag))}(st);break;case"All Tasks":e=st;break;case"Daily Tasks":e=function(t){return t.filter((t=>"Daily"===t.projectTag))}(st);break;case"+ Add New Todo":break;default:e=function(t,e){return t.filter((t=>t.projectTag===e))}(st,t)}ht.appendChild(K(t)),ht.classList.contains("quad")?(ht.appendChild(tt(_(e))),J(st)):(ht.appendChild(Z(e)),J(st)),gt=document.querySelectorAll(".todo"),gt.forEach((t=>{at(t,st)})),Ct(),Tt()}kt.addEventListener("click",(()=>{xt.close()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,