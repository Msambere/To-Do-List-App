(()=>{"use strict";function t(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof e||"[object String]"===e?new Date(t):new Date(NaN)}function e(e){if(!(n=e,n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)||"number"==typeof e))return!1;var n;const a=t(e);return!isNaN(Number(a))}const n={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function a(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const o={date:a({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:a({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:a({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},r={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function i(t){return(e,n)=>{let a;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,o=n?.width?String(n.width):e;a=t.formattingValues[o]||t.formattingValues[e]}else{const e=t.defaultWidth,o=n?.width?String(n.width):t.defaultWidth;a=t.values[o]||t.values[e]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function d(t){return(e,n={})=>{const a=n.width,o=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],r=e.match(o);if(!r)return null;const i=r[0],d=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(d)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(d):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(d);let c;return c=t.valueCallback?t.valueCallback(s):s,c=n.valueCallback?n.valueCallback(c):c,{value:c,rest:e.slice(i.length)}}}var s;const c={code:"en-US",formatDistance:(t,e,a)=>{let o;const r=n[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),a?.addSuffix?a.comparison&&a.comparison>0?"in "+o:o+" ago":o},formatLong:o,formatRelative:(t,e,n,a)=>r[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:i({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:i({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:i({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:i({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:i({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(s={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(s.matchPattern);if(!n)return null;const a=n[0],o=t.match(s.parsePattern);if(!o)return null;let r=s.valueCallback?s.valueCallback(o[0]):o[0];return r=e.valueCallback?e.valueCallback(r):r,{value:r,rest:t.slice(a.length)}}),era:d({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:d({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:d({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:d({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:d({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let u={};function l(){return u}Math.pow(10,8);const m=6048e5,h=864e5;function f(e){const n=t(e);return n.setHours(0,0,0,0),n}function g(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function p(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function b(e){const n=t(e);return function(t,e){const n=f(t),a=f(e),o=n.getTime()-g(n),r=a.getTime()-g(a);return Math.round((o-r)/h)}(n,function(e){const n=t(e),a=p(e,0);return a.setFullYear(n.getFullYear(),0,1),a.setHours(0,0,0,0),a}(n))+1}function w(e,n){const a=l(),o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,r=t(e),i=r.getDay(),d=(i<o?7:0)+i-o;return r.setDate(r.getDate()-d),r.setHours(0,0,0,0),r}function y(t){return w(t,{weekStartsOn:1})}function C(e){const n=t(e),a=n.getFullYear(),o=p(e,0);o.setFullYear(a+1,0,4),o.setHours(0,0,0,0);const r=y(o),i=p(e,0);i.setFullYear(a,0,4),i.setHours(0,0,0,0);const d=y(i);return n.getTime()>=r.getTime()?a+1:n.getTime()>=d.getTime()?a:a-1}function v(e){const n=t(e),a=y(n).getTime()-function(t){const e=C(t),n=p(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),y(n)}(n).getTime();return Math.round(a/m)+1}function E(e,n){const a=t(e),o=a.getFullYear(),r=l(),i=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,d=p(e,0);d.setFullYear(o+1,0,i),d.setHours(0,0,0,0);const s=w(d,n),c=p(e,0);c.setFullYear(o,0,i),c.setHours(0,0,0,0);const u=w(c,n);return a.getTime()>=s.getTime()?o+1:a.getTime()>=u.getTime()?o:o-1}function x(e,n){const a=t(e),o=w(a,n).getTime()-function(t,e){const n=l(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,o=E(t,e),r=p(t,0);return r.setFullYear(o,0,a),r.setHours(0,0,0,0),w(r,e)}(a,n).getTime();return Math.round(o/m)+1}function L(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const D={y(t,e){const n=t.getFullYear(),a=n>0?n:1-n;return L("yy"===e?a%100:a,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):L(n+1,2)},d:(t,e)=>L(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>L(t.getHours()%12||12,e.length),H:(t,e)=>L(t.getHours(),e.length),m:(t,e)=>L(t.getMinutes(),e.length),s:(t,e)=>L(t.getSeconds(),e.length),S(t,e){const n=e.length,a=t.getMilliseconds();return L(Math.floor(a*Math.pow(10,n-3)),e.length)}},k={G:function(t,e,n){const a=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),a=e>0?e:1-e;return n.ordinalNumber(a,{unit:"year"})}return D.y(t,e)},Y:function(t,e,n,a){const o=E(t,a),r=o>0?o:1-o;return"YY"===e?L(r%100,2):"Yo"===e?n.ordinalNumber(r,{unit:"year"}):L(r,e.length)},R:function(t,e){return L(C(t),e.length)},u:function(t,e){return L(t.getFullYear(),e.length)},Q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return L(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return L(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){const a=t.getMonth();switch(e){case"M":case"MM":return D.M(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){const a=t.getMonth();switch(e){case"L":return String(a+1);case"LL":return L(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){const o=x(t,a);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):L(o,e.length)},I:function(t,e,n){const a=v(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):L(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):D.d(t,e)},D:function(t,e,n){const a=b(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):L(a,e.length)},E:function(t,e,n){const a=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){const o=t.getDay(),r=(o-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(r);case"ee":return L(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){const o=t.getDay(),r=(o-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(r);case"cc":return L(r,e.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){const a=t.getDay(),o=0===a?7:a;switch(e){case"i":return String(o);case"ii":return L(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){const a=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){const a=t.getHours();let o;switch(o=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){const a=t.getHours();let o;switch(o=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return D.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):D.H(t,e)},K:function(t,e,n){const a=t.getHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):L(a,e.length)},k:function(t,e,n){let a=t.getHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):L(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):D.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):D.s(t,e)},S:function(t,e){return D.S(t,e)},X:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return T(o);case"XXXX":case"XX":return S(o);default:return S(o,":")}},x:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return T(o);case"xxxx":case"xx":return S(o);default:return S(o,":")}},O:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+M(o,":");default:return"GMT"+S(o,":")}},z:function(t,e,n,a){const o=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+M(o,":");default:return"GMT"+S(o,":")}},t:function(t,e,n,a){const o=a._originalDate||t;return L(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,a){return L((a._originalDate||t).getTime(),e.length)}};function M(t,e=""){const n=t>0?"-":"+",a=Math.abs(t),o=Math.floor(a/60),r=a%60;return 0===r?n+String(o):n+String(o)+e+L(r,2)}function T(t,e){return t%60==0?(t>0?"-":"+")+L(Math.abs(t)/60,2):S(t,e)}function S(t,e=""){const n=t>0?"-":"+",a=Math.abs(t);return n+L(Math.floor(a/60),2)+e+L(a%60,2)}const A=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},P=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},q={p:P,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],a=n[1],o=n[2];if(!o)return A(t,e);let r;switch(a){case"P":r=e.dateTime({width:"short"});break;case"PP":r=e.dateTime({width:"medium"});break;case"PPP":r=e.dateTime({width:"long"});break;default:r=e.dateTime({width:"full"})}return r.replace("{{date}}",A(a,e)).replace("{{time}}",P(o,e))}},B=["D","DD"],W=["YY","YYYY"];function Y(t,e,n){if("YYYY"===t)throw new RangeError(`Use \`yyyy\` instead of \`YYYY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("YY"===t)throw new RangeError(`Use \`yy\` instead of \`YY\` (in \`${e}\`) for formatting years to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("D"===t)throw new RangeError(`Use \`d\` instead of \`D\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`);if("DD"===t)throw new RangeError(`Use \`dd\` instead of \`DD\` (in \`${e}\`) for formatting days of the month to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`)}const j=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,N=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,I=/^'([^]*?)'?$/,O=/''/g,H=/[a-zA-Z]/;function F(n,a,o){const r=l(),i=o?.locale??r.locale??c,d=o?.firstWeekContainsDate??o?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,s=o?.weekStartsOn??o?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,u=t(n);if(!e(u))throw new RangeError("Invalid time value");const m={firstWeekContainsDate:d,weekStartsOn:s,locale:i,_originalDate:u};return a.match(N).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,q[e])(t,i.formatLong):t})).join("").match(j).map((function(t){if("''"===t)return"'";const e=t[0];if("'"===e)return function(t){const e=t.match(I);return e?e[1].replace(O,"'"):t}(t);const r=k[e];if(r)return o?.useAdditionalWeekYearTokens||(d=t,-1===W.indexOf(d))||Y(t,a,String(n)),!o?.useAdditionalDayOfYearTokens&&function(t){return-1!==B.indexOf(t)}(t)&&Y(t,a,String(n)),r(u,t,i.localize,m);var d;if(e.match(H))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return t})).join("")}function Q(e,n){const a=t(e);return isNaN(n)?p(e,NaN):n?(a.setDate(a.getDate()+n),a):a}function $(t,e,n,a,o,r){this.title=t,this.description=e,this.dueDate=function(t){return F(""===t?(new Date).toLocaleString():new Date(t).toLocaleString(),"M-dd-y")}(n),this.priority=a,this.todos=[],this.notes=o,this.projectTag=r,this.status=""}function z(t,e){this.projectTag=t;let n=e.filter((e=>e.projectTag===t));this.tdList=n}const G=[];function X(t,e,n,a,o,r,i){const d=new $(t,e,n,a,o,r,i);return G.push(d),G.sort(((t,e)=>new Date(t.dueDate)-new Date(e.dueDate))),J(G),G}function R(e){const n=[];e.forEach((e=>{(function(e){return function(e,n){return+t(e)<+t(n)}(e.dueDate,Q(new Date,-1))})(e)&&n.push(e["data-index"].toString())})),document.querySelectorAll(".todo").forEach((t=>{const e=t.getAttribute("data-index");n.includes(e)&&t.classList.add("overdue")}))}function J(t){t.forEach((e=>{e["data-index"]=t.findIndex((t=>t.title===e.title))}))}function U(t){const e=[];return t.forEach((t=>{const n=t.projectTag;"Daily"===n||""===n||e.includes(n)||e.push(n)})),e}function _(t){const e=Q(new Date,10);return[t.filter((t=>"High"===t.priority&&t.dueDate<=F(e,"M-dd-y"))),t.filter((t=>"High"===t.priority&&t.dueDate>F(e,"M-dd-y")||"Medium"===t.priority&&t.dueDate>F(e,"M-dd-y"))),t.filter((t=>"Low"===t.priority&&t.dueDate<=F(e,"M-dd-y")||"Medium"===t.priority&&t.dueDate<=F(e,"M-dd-y"))),t.filter((t=>"Low"===t.priority&&t.dueDate>F(e,"M-dd-y")))]}function V(t,e,n){const a=document.createElement("div");a.classList.add("form-row");const o=document.createElement("label");o.setAttribute("for",t),o.textContent=e;const r=document.createElement("input");return r.setAttribute("type",n),r.setAttribute("name",t),r.setAttribute("id",t),a.appendChild(o),a.appendChild(r),a}function K(t,e,n){const a=document.createElement("div");a.classList.add("form-row");const o=document.createElement("label");o.setAttribute("for",t),o.textContent=e;const r=document.createElement("select");return r.setAttribute("id",t),r.setAttribute("name",t),n.forEach((t=>{const e=document.createElement("option");e.textContent=t,r.appendChild(e)})),a.appendChild(o),a.appendChild(r),a}X("Create user constructor","Create a function that will store user information like id and avatar","01-25-2024","High","test notes","To-do App"),X("Look up data-fns library","See what functions are available","12-29-2023","High","","To-do App"),X("Go to the gym","Complete the daily workout","","High","","Daily"),X("tester1","checking fn","04-11-1989","Low","","Test 1"),X("tester2","checking fn","05-18-2020","Medium","","Test 2"),X("Always today","always today",new Date,"Low","","Test 1"),X("Today plus 2","checking fn",Q(new Date,2),"High","","Test 2"),X("Today plus 5","checking fn",Q(new Date,5),"Medium","","Test 3"),X("read the newspaper","Complete the daily workout","","Medium","","Daily"),X("Buy a yacht","Complete the daily workout","","Low","","Daily");const Z=document.getElementById("content");function tt(t){let e="";return e=1===t?"task is":"tasks are",e}function et(t){const e=document.createElement("h2");return e.classList.add("pHeader"),e.textContent=t,e}function nt(t){const e=document.createElement("div");return e.classList.add("list-display"),e.classList.add("tdList-container"),t.forEach((t=>{const n=rt(t);e.appendChild(n)})),e}function at(t){const e=document.createElement("div");e.classList.add("quad-display"),e.classList.add("quad-container");for(let n=1;n<5;n++){const a=ot(t[n-1]);a.classList.add(`quad${n}`),e.appendChild(a)}const n=document.createElement("div");n.classList.add("quad-grid-label"),n.classList.add("urgent"),n.textContent="URGENT",e.appendChild(n);const a=document.createElement("div");a.classList.add("quad-grid-label"),a.classList.add("later"),a.textContent="NOT URGENT",e.appendChild(a);const o=document.createElement("div");o.classList.add("quad-grid-label"),o.classList.add("rotate"),o.classList.add("important"),o.textContent="IMPORTANT",e.appendChild(o);const r=document.createElement("div");return r.classList.add("quad-grid-label"),r.classList.add("rotate"),r.classList.add("unimportant"),r.textContent=" NOT IMPORTANT",e.appendChild(r),e}function ot(t){const e=document.createElement("div");return e.classList.add("tdList-container"),t.forEach((t=>{const n=rt(t);e.appendChild(n)})),e}function rt(t){const e=document.createElement("div");e.classList.add("todo"),e.setAttribute("data-index",t["data-index"]);const n=document.createElement("img");n.classList.add("checkbox"),n.src="../src/Images/unchecked-box.png";const a=document.createElement("div");a.classList.add("todo-title"),a.textContent=t.title;const o=document.createElement("div");o.classList.add("dueDate-div"),o.textContent=t.dueDate;const r=document.createElement("div");r.classList.add("priority-div"),r.textContent=t.priority,r.style.color=function(t){const{priority:e}=t;return"High"===e?"red":"Medium"===e?"blue":"Low"===e?"black":"grey"}(t);const i=document.createElement("img");i.classList.add("edit"),i.src="../src/Images/pencil.png";const d=document.createElement("img");return d.classList.add("delete"),d.src="../src/Images/delete.png",e.appendChild(n),e.appendChild(a),e.appendChild(o),e.appendChild(r),e.appendChild(i),e.appendChild(d),e}function it(t,e){const n=e[t.getAttribute("data-index")].status;console.log(`setting image: ${n}`),"complete"!==n?(t.classList.remove("complete"),t.firstChild.src="../src/Images/unchecked-box.png"):"complete"===n&&(t.classList.add("complete"),t.firstChild.src="../src/Images/checked-checkbox.png")}let dt=[];var st;localStorage.getItem("tdList")?lt():mt(G),st=dt,Z.appendChild(function(){const t=document.createElement("div");t.classList.add("header");const e=document.createElement("div");e.classList.add("ltbox");const n=document.createElement("img");n.classList.add("logo"),n.src="../src/Images/logo.png";const a=document.createElement("h1");a.classList.add("title"),a.textContent="Check-It";const o=document.createElement("div");o.classList.add("header-right");const r=document.createElement("div");r.classList.add("userDisplay"),r.textContent="User name and avatar go here";const i=document.createElement("label");i.classList.add("toggle-box");const d=document.createElement("input");d.setAttribute("type","checkbox"),d.setAttribute("id","toggle-checkbox");const s=document.createElement("div");return s.classList.add("circle"),i.appendChild(d),i.appendChild(s),o.appendChild(r),o.appendChild(i),e.appendChild(n),e.appendChild(a),t.appendChild(e),t.appendChild(o),t}()),Z.appendChild(function(){const t=document.createElement("div");t.classList.add("navBar");const e=document.createElement("button");e.classList.add("button"),e.classList.add("navBtn"),e.setAttribute("id","todayBtn"),e.textContent="Today";const n=document.createElement("button");n.classList.add("button"),n.classList.add("navBtn"),n.setAttribute("id","weekly"),n.textContent="This Week";const a=document.createElement("button");a.classList.add("button"),a.classList.add("navBtn"),a.setAttribute("id","all"),a.textContent="All Tasks";const o=document.createElement("button");o.classList.add("button"),o.classList.add("navBtn"),o.setAttribute("id","daily"),o.textContent="Daily Tasks";const r=document.createElement("button");r.classList.add("button"),r.classList.add("navBtn"),r.setAttribute("id","projects"),r.textContent="Projects";const i=document.createElement("button");return i.classList.add("button"),i.classList.add("navBtn"),i.setAttribute("id","new-todo-btn"),i.textContent="+ Add New Todo",t.appendChild(e),t.appendChild(n),t.appendChild(a),t.appendChild(o),t.appendChild(r),t.appendChild(i),t}()),Z.appendChild(function(){const t=document.createElement("div");return t.classList.add("main"),t.setAttribute("id","main"),t}()),Z.appendChild(function(){const t=document.createElement("div");return t.classList.add("footer"),t.textContent="made by Msambere",t}()),Z.appendChild(function(t){const e=document.createElement("dialog");e.classList.add("modal"),e.setAttribute("id","newTodoDialog");const n=document.createElement("form");n.setAttribute("method","dialog"),n.setAttribute("id","myForm");const a=V("td-title","Title of Todo","text"),o=V("td-description","Description of Todo","text"),r=V("td-dueDate","Due Date:","date"),i=K("td-priority","Priority",["High","Medium","Low"]),d=K("td-projectTag","Project",U(t)),s=document.createElement("div");s.classList.add("form-buttons");const c=document.createElement("button");c.setAttribute("id","cancelBtn"),c.setAttribute("value","cancel"),c.setAttribute("formmethod","dialog"),c.textContent="Cancel";const u=document.createElement("button");return u.setAttribute("id","confirmBtn"),u.setAttribute("value","default"),u.textContent="Confirm",s.appendChild(c),s.appendChild(u),n.appendChild(a),n.appendChild(o),n.appendChild(r),n.appendChild(i),n.appendChild(d),n.appendChild(s),e.appendChild(n),e}(st)),Z.appendChild(function(){const t=document.createElement("dialog");t.classList.add("modal"),t.setAttribute("id","editTodoDialog");const e=document.createElement("form");e.setAttribute("method","dialog"),e.setAttribute("id","editForm");const n=function(t,e,n){const a=document.createElement("div");a.classList.add("form-row");const o=document.createElement("label");o.setAttribute("for",t),o.textContent="Choose a property";const r=document.createElement("select");return r.setAttribute("id",t),r.setAttribute("name",t),["title","description","dueDate","priority","notes","project tag"].forEach((t=>{const e=document.createElement("option");e.textContent=t,r.appendChild(e)})),a.appendChild(o),a.appendChild(r),a}("td-property"),a=function(t,e,n){const a=document.createElement("div");a.classList.add("form-row");const o=document.createElement("label");o.setAttribute("for",t),o.textContent="";const r=document.createElement("input");return r.setAttribute("type","text"),r.setAttribute("name",t),r.setAttribute("id",t),a.appendChild(o),a.appendChild(r),a}("newValue"),o=document.createElement("div");o.classList.add("form-buttons");const r=document.createElement("button");r.setAttribute("id","editCancelBtn"),r.setAttribute("value","cancel"),r.setAttribute("formmethod","dialog"),r.textContent="Cancel";const i=document.createElement("button");return i.setAttribute("id","editConfirmBtn"),i.setAttribute("value","default"),i.textContent="Confirm",o.appendChild(r),o.appendChild(i),e.appendChild(n),e.appendChild(a),e.appendChild(o),t.appendChild(e),t}());const ct=document.getElementById("main"),ut=document.getElementById("all");function lt(){const t=JSON.parse(localStorage.getItem("tdList"));return dt=t,t}function mt(t){localStorage.setItem("tdList",JSON.stringify(t)),lt()}ut.classList.toggle("active"),ct.appendChild(et("All tasks")),ct.classList.contains("quad")?ct.appendChild(at(_(dt))):ct.appendChild(nt(dt)),R(dt),vt(),document.querySelectorAll(".todo").forEach((t=>{it(t,dt)})),console.table(dt);const ht=document.querySelector(".toggle-box"),ft=document.querySelector(".circle"),gt=document.getElementById("toggle-checkbox");ft.addEventListener("click",(()=>(ct.classList.toggle("quad"),xt(),void Lt()))),ht.addEventListener("click",(()=>{gt.checked?ft.style.transform="translateX(42px)":ft.style.transform="translateX(0px)"})),document.getElementById("todayBtn").addEventListener("click",(t=>{Et(t),xt(),Lt()})),document.getElementById("weekly").addEventListener("click",(t=>{xt(),Et(t),Lt()})),ut.addEventListener("click",(t=>{xt(),Et(t),Lt()})),document.getElementById("daily").addEventListener("click",(t=>{xt(),Et(t),Lt()}));const pt=document.getElementById("projects");pt.addEventListener("click",(t=>{Et(t),pt.after(function(t){const e=document.createElement("div");return e.classList.add("projectBtns-container"),U(t).forEach((t=>{const n=document.createElement("button");n.classList.add("button"),n.classList.add("project-btn"),n.textContent=t,e.appendChild(n)})),e}(dt)),xt(),ct.appendChild(et("All Projects")),ct.appendChild(function(t){const e=document.createElement("div");e.classList.add("projectOverviews-container"),e.classList.add("list-display");const n=function(t){const e=U(t),n=[];return e.forEach((e=>{const a=new z(e,t);n.push(a)})),n}(t);return n.forEach((t=>{const n=function(t){const e=document.createElement("div");e.classList.add("project-overview");const n=document.createElement("h3");n.classList.add("overview-title"),n.textContent=t.projectTag;const a=function(t){const e=t.filter((t=>"complete"===t.status)).length,n=t.length,a=_(t);return{numTds:n,numCompleted:e,numQ1:a[0].length,numQ2:a[1].length,numQ3:a[2].length,numQ4:a[3].length}}(t.tdList),o=document.createElement("p");o.textContent=`${a.numCompleted} / ${a.numTds} tasks completed`;const r=document.createElement("p"),i=tt(a.numQ1);r.textContent=`${a.numQ1}  ${i} urgent and important.`;const d=document.createElement("p"),s=tt(a.numQ2);d.textContent=`${a.numQ2} ${s} not urgent and important.`;const c=document.createElement("p"),u=tt(a.numQ3);c.textContent=`${a.numQ3} ${u} urgent and unimportant.`;const l=document.createElement("p"),m=tt(a.numQ4);return l.textContent=`${a.numQ4} ${m} not urgent and unimportant.`,e.appendChild(n),e.appendChild(o),e.appendChild(r),e.appendChild(d),e.appendChild(c),e.appendChild(l),e}(t);e.appendChild(n)})),e}(dt)),vt();const e=document.querySelectorAll(".project-btn");e.forEach((t=>t.addEventListener("click",(t=>{xt(),Et(t),Lt(),e.forEach((t=>t.remove()))}))))}));const bt=document.getElementById("new-todo-btn"),wt=document.getElementById("newTodoDialog"),yt=wt.querySelector("#cancelBtn"),Ct=wt.querySelector("#confirmBtn");function vt(){document.querySelectorAll(".checkbox").forEach((t=>t.addEventListener("click",(t=>function(t){const e=t.target.parentElement;console.log(e),function(t,e){const n=e[t].status;console.log(`Original Status: ${n}`),""===e[t].status?e[t].status="complete":e[t].status="",console.log(`New status: ${e[t].status}`),e[t].status}(e.getAttribute("data-index"),dt),it(e,dt),mt(dt),console.table(dt)}(t))))),document.querySelectorAll(".delete").forEach((t=>t.addEventListener("click",(t=>function(t){!function(t,e){const n=e.findIndex((e=>e.title===t));e.splice(n,1),e.sort(((t,e)=>t.dueDate-e.dueDate))}(t.target.parentElement.firstChild.nextSibling.textContent,dt);t.target.parentElement.remove(),mt(dt)}(t))))),function(){const t=document.querySelectorAll(".edit"),e=document.getElementById("editTodoDialog"),n=e.querySelector("#editCancelBtn"),a=e.querySelector("#editConfirmBtn");t.forEach((t=>t.addEventListener("click",(t=>{const o=t.target.parentElement.firstChild.nextSibling.textContent,r=dt.findIndex((t=>t.title===o));e.showModal(),a.addEventListener("click",(t=>{t.preventDefault(),function(t,e){const n=document.getElementById("td-property").value,a=document.getElementById("newValue").value;e[t][n]=a,e[t]}(r,dt),dt.sort(((t,e)=>new Date(t.dueDate)-new Date(e.dueDate))),document.getElementById("editForm").reset(),e.close(),mt(dt),xt(),Lt()})),n.addEventListener("click",(()=>{document.getElementById("editForm").reset(),e.close()}))}))))}()}function Et(t){document.querySelectorAll(".active").forEach((t=>t.classList.toggle("active"))),t.target.classList.toggle("active")}function xt(){for(;ct.firstChild;)ct.removeChild(ct.firstChild)}function Lt(){const t=document.querySelector(".active").textContent;let e="";switch(t){case"Today":e=function(t){return t.filter((t=>t.dueDate===F(new Date,"M-dd-y")&&"Daily"!==t.projectTag))}(dt);break;case"This Week":e=function(t){return t.filter((t=>t.dueDate>=F(new Date,"M-dd-y")&&t.dueDate<=F(Q(new Date,7),"M-dd-y")&&"Daily"!==t.projectTag))}(dt);break;case"All Tasks":e=dt;break;case"Daily Tasks":e=function(t){return t.filter((t=>"Daily"===t.projectTag))}(dt);break;default:e=function(t,e){return t.filter((t=>t.projectTag===e))}(dt,t)}ct.appendChild(et(t)),ct.classList.contains("quad")?(ct.appendChild(at(_(e))),R(dt)):(ct.appendChild(nt(e)),R(dt)),vt(),document.querySelectorAll(".todo").forEach((t=>{it(t,dt)}))}bt.addEventListener("click",(()=>{bt.classList.toggle("clicked"),wt.showModal()})),Ct.addEventListener("click",(t=>{t.preventDefault();const e=function(t){const e=new $(document.getElementById("td-title").value,document.getElementById("td-description").value,F(Q(document.getElementById("td-dueDate").value,1),"M-dd-y"),document.getElementById("td-priority").value,[],"",document.getElementById("td-projectTag").value);return t.push(e),t.sort(((t,e)=>new Date(t.dueDate)-new Date(e.dueDate))),J(t),e}(dt);!function(t){const e=rt(t),n=dt.findIndex((e=>e.title===t.title)),a=document.querySelectorAll(".todo");if(0!==n){const t=dt[n-1].title;a.forEach((n=>{n.textContent.includes(t)&&n.after(e)}))}else{const t=dt[1].title;a.forEach((n=>{n.textContent.includes(t)&&n.before(e)}))}}(e),vt(),document.getElementById("myForm").reset(),wt.close(),mt(dt)})),yt.addEventListener("click",(()=>{document.getElementById("myForm").reset(),wt.close()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE9BSEErUixFQUFPTyxLQUFLRCxHQUNaTixFQUFPUSxNQUFLLENBQUNySCxFQUFHcUMsSUFBTSxJQUFJNU4sS0FBS3VMLEVBQUVtRyxTQUFXLElBQUkxUixLQUFLNE4sRUFBRThELFdBQ3ZEbUIsRUFBVVQsR0FDSE0sQ0FDVCxDR3NDd0J1TSxDQUFXM0gsS0E2Qm5DLFNBQXlCckUsR0FDckIsTUFBTWlNLEVBQVN6SixHQUFjeEMsR0FDdkJNLEVBQVUrRCxHQUFnQjlTLFdBQVVnUixHQUFXQSxFQUFRaEUsUUFBVXlCLEVBQVN6QixRQUMxRTJOLEVBQVUvTCxTQUFTQyxpQkFBaUIsU0FDMUMsR0FBZ0IsSUFBWkUsRUFBZSxDQUNmLE1BQU02TCxFQUFlOUgsR0FBZ0IvRCxFQUFVLEdBQUcvQixNQUNsRDJOLEVBQVFuTSxTQUFTTSxJQUNUQSxFQUFJa0IsWUFBWWYsU0FBUzJMLElBQ3pCOUwsRUFBSTZILE1BQU0rRCxFQUNiLEdBRVQsS0FBTyxDQUNILE1BQU1HLEVBQWMvSCxHQUFnQixHQUFHOUYsTUFDdkMyTixFQUFRbk0sU0FBU00sSUFDVEEsRUFBSWtCLFlBQVlmLFNBQVM0TCxJQUN6Qi9MLEVBQUlnTSxPQUFPSixFQUNkLEdBRVQsQ0FDSixDQS9DSUssQ0FBZ0JQLEdBQ2hCMUUsS0FDQWxILFNBQVM0QixlQUFlLFVBQVV3SixRQUNsQ3JCLEdBQWNzQixRQUNkL0csR0FBWUosR0FBZ0IsSUFHaENrQyxHQUFVbUIsaUJBQWlCLFNBQVMsS0FDaEN2SCxTQUFTNEIsZUFBZSxVQUFVd0osUUFDbENyQixHQUFjc0IsT0FBTyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvdG9EYXRlLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc1ZhbGlkLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc0RhdGUubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9kZWZhdWx0T3B0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvY29uc3RhbnRzLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mRGF5Lm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2NvbnN0cnVjdEZyb20ubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldERheU9mWWVhci5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mWWVhci5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZldlZWsubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZJU09XZWVrLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRJU09XZWVrWWVhci5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0SVNPV2Vlay5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZklTT1dlZWtZZWFyLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRXZWVrWWVhci5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0V2Vlay5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZldlZWtZZWFyLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2FkZExlYWRpbmdaZXJvcy5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9wcm90ZWN0ZWRUb2tlbnMubWpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2Zvcm1hdC5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvYWRkRGF5cy5tanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvY29uc3RydWN0b3JzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vc3JjL2FwcGxvZ2ljLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzQmVmb3JlLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdWJEYXlzLm1qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9uZXdURC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9zaXRlQ29uc3RhbnRzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vc3JjL3NpdGVkeW5hbWljLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vc3JjL2VkaXRURC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gYXJndW1lbnQgLSBUaGUgdmFsdWUgdG8gY29udmVydFxuICpcbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIGNvbnN0IGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7XG5cbiAgLy8gQ2xvbmUgdGhlIGRhdGVcbiAgaWYgKFxuICAgIGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICh0eXBlb2YgYXJndW1lbnQgPT09IFwib2JqZWN0XCIgJiYgYXJnU3RyID09PSBcIltvYmplY3QgRGF0ZV1cIilcbiAgKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBhcmd1bWVudC5jb25zdHJ1Y3RvcigrYXJndW1lbnQpO1xuICB9IGVsc2UgaWYgKFxuICAgIHR5cGVvZiBhcmd1bWVudCA9PT0gXCJudW1iZXJcIiB8fFxuICAgIGFyZ1N0ciA9PT0gXCJbb2JqZWN0IE51bWJlcl1cIiB8fFxuICAgIHR5cGVvZiBhcmdTdHIgPT09IFwic3RyaW5nXCIgfHxcbiAgICBhcmdTdHIgPT09IFwiW29iamVjdCBTdHJpbmddXCJcbiAgKSB7XG4gICAgLy8gVE9ETzogQ2FuIHdlIGdldCByaWQgb2YgYXM/XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUT0RPOiBDYW4gd2UgZ2V0IHJpZCBvZiBhcz9cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHRvRGF0ZTtcbiIsImltcG9ydCB7IGlzRGF0ZSB9IGZyb20gXCIuL2lzRGF0ZS5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXShodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZSlcbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGRhdGUgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyBUaGUgZGF0ZSBpcyB2YWxpZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZChkYXRlKSB7XG4gIGlmICghaXNEYXRlKGRhdGUpICYmIHR5cGVvZiBkYXRlICE9PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihfZGF0ZSkpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGlzVmFsaWQ7XG4iLCIvKipcbiAqIEBuYW1lIGlzRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gdmFsdWUgYSBkYXRlP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLiBUaGUgZnVuY3Rpb24gd29ya3MgZm9yIGRhdGVzIHRyYW5zZmVycmVkIGFjcm9zcyBpZnJhbWVzLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fFxuICAgICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBEYXRlXVwiKVxuICApO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGlzRGF0ZTtcbiIsImNvbnN0IGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiBcImxlc3MgdGhhbiBhIHNlY29uZFwiLFxuICAgIG90aGVyOiBcImxlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kc1wiLFxuICB9LFxuXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiBcIjEgc2Vjb25kXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHNlY29uZHNcIixcbiAgfSxcblxuICBoYWxmQU1pbnV0ZTogXCJoYWxmIGEgbWludXRlXCIsXG5cbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogXCJsZXNzIHRoYW4gYSBtaW51dGVcIixcbiAgICBvdGhlcjogXCJsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXNcIixcbiAgfSxcblxuICB4TWludXRlczoge1xuICAgIG9uZTogXCIxIG1pbnV0ZVwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBtaW51dGVzXCIsXG4gIH0sXG5cbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6IFwiYWJvdXQgMSBob3VyXCIsXG4gICAgb3RoZXI6IFwiYWJvdXQge3tjb3VudH19IGhvdXJzXCIsXG4gIH0sXG5cbiAgeEhvdXJzOiB7XG4gICAgb25lOiBcIjEgaG91clwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBob3Vyc1wiLFxuICB9LFxuXG4gIHhEYXlzOiB7XG4gICAgb25lOiBcIjEgZGF5XCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IGRheXNcIixcbiAgfSxcblxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogXCJhYm91dCAxIHdlZWtcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0gd2Vla3NcIixcbiAgfSxcblxuICB4V2Vla3M6IHtcbiAgICBvbmU6IFwiMSB3ZWVrXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHdlZWtzXCIsXG4gIH0sXG5cbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiBcImFib3V0IDEgbW9udGhcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0gbW9udGhzXCIsXG4gIH0sXG5cbiAgeE1vbnRoczoge1xuICAgIG9uZTogXCIxIG1vbnRoXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IG1vbnRoc1wiLFxuICB9LFxuXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiBcImFib3V0IDEgeWVhclwiLFxuICAgIG90aGVyOiBcImFib3V0IHt7Y291bnR9fSB5ZWFyc1wiLFxuICB9LFxuXG4gIHhZZWFyczoge1xuICAgIG9uZTogXCIxIHllYXJcIixcbiAgICBvdGhlcjogXCJ7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiBcIm92ZXIgMSB5ZWFyXCIsXG4gICAgb3RoZXI6IFwib3ZlciB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6IFwiYWxtb3N0IDEgeWVhclwiLFxuICAgIG90aGVyOiBcImFsbW9zdCB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXREaXN0YW5jZSA9ICh0b2tlbiwgY291bnQsIG9wdGlvbnMpID0+IHtcbiAgbGV0IHJlc3VsdDtcblxuICBjb25zdCB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKFwie3tjb3VudH19XCIsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnM/LmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuIFwiaW4gXCIgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyBcIiBhZ29cIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiAob3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgY29uc3QgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBidWlsZEZvcm1hdExvbmdGbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuLm1qc1wiO1xuXG5jb25zdCBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJFRUVFLCBNTU1NIGRvLCB5XCIsXG4gIGxvbmc6IFwiTU1NTSBkbywgeVwiLFxuICBtZWRpdW06IFwiTU1NIGQsIHlcIixcbiAgc2hvcnQ6IFwiTU0vZGQveXl5eVwiLFxufTtcblxuY29uc3QgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwiaDptbTpzcyBhIHp6enpcIixcbiAgbG9uZzogXCJoOm1tOnNzIGEgelwiLFxuICBtZWRpdW06IFwiaDptbTpzcyBhXCIsXG4gIHNob3J0OiBcImg6bW0gYVwiLFxufTtcblxuY29uc3QgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogXCJ7e2RhdGV9fSwge3t0aW1lfX1cIixcbiAgc2hvcnQ6IFwie3tkYXRlfX0sIHt7dGltZX19XCIsXG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJmdWxsXCIsXG4gIH0pLFxuXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6IFwiZnVsbFwiLFxuICB9KSxcblxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6IFwiZnVsbFwiLFxuICB9KSxcbn07XG4iLCJjb25zdCBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6IFwiUFwiLFxufTtcblxuZXhwb3J0IGNvbnN0IGZvcm1hdFJlbGF0aXZlID0gKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykgPT5cbiAgZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBUaGUgbG9jYWxpemUgZnVuY3Rpb24gYXJndW1lbnQgY2FsbGJhY2sgd2hpY2ggYWxsb3dzIHRvIGNvbnZlcnQgcmF3IHZhbHVlIHRvXG4gKiB0aGUgYWN0dWFsIHR5cGUuXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqXG4gKiBAcmV0dXJucyBUaGUgY29udmVydGVkIHZhbHVlXG4gKi9cblxuLyoqXG4gKiBUaGUgbWFwIG9mIGxvY2FsaXplZCB2YWx1ZXMgZm9yIGVhY2ggd2lkdGguXG4gKi9cblxuLyoqXG4gKiBUaGUgaW5kZXggdHlwZSBvZiB0aGUgbG9jYWxlIHVuaXQgdmFsdWUuIEl0IHR5cGVzIGNvbnZlcnNpb24gb2YgdW5pdHMgb2ZcbiAqIHZhbHVlcyB0aGF0IGRvbid0IHN0YXJ0IGF0IDAgKGkuZS4gcXVhcnRlcnMpLlxuICovXG5cbi8qKlxuICogQ29udmVydHMgdGhlIHVuaXQgdmFsdWUgdG8gdGhlIHR1cGxlIG9mIHZhbHVlcy5cbiAqL1xuXG4vKipcbiAqIFRoZSB0dXBsZSBvZiBsb2NhbGl6ZWQgZXJhIHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBCQyxcbiAqIHRoZSBzZWNvbmQgZWxlbWVudCByZXByZXNlbnRzIEFELlxuICovXG5cbi8qKlxuICogVGhlIHR1cGxlIG9mIGxvY2FsaXplZCBxdWFydGVyIHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBRMS5cbiAqL1xuXG4vKipcbiAqIFRoZSB0dXBsZSBvZiBsb2NhbGl6ZWQgZGF5IHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBTdW5kYXkuXG4gKi9cblxuLyoqXG4gKiBUaGUgdHVwbGUgb2YgbG9jYWxpemVkIG1vbnRoIHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBKYW51YXJ5LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gKHZhbHVlLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IG9wdGlvbnM/LmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6IFwic3RhbmRhbG9uZVwiO1xuXG4gICAgbGV0IHZhbHVlc0FycmF5O1xuICAgIGlmIChjb250ZXh0ID09PSBcImZvcm1hdHRpbmdcIiAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucz8ud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID1cbiAgICAgICAgYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICBjb25zdCB3aWR0aCA9IG9wdGlvbnM/LndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbd2lkdGhdIHx8IGFyZ3MudmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gKHN0cmluZywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuXG4gICAgY29uc3QgbWF0Y2hQYXR0ZXJuID1cbiAgICAgICh3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdKSB8fFxuICAgICAgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuXG4gICAgY29uc3QgcGFyc2VQYXR0ZXJucyA9XG4gICAgICAod2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSkgfHxcbiAgICAgIGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcblxuICAgIGNvbnN0IGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucylcbiAgICAgID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIChwYXR0ZXJuKSA9PiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZykpXG4gICAgICA6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55IC0tIEkgY2hhbGxhbmdlIHlvdSB0byBmaXggdGhlIHR5cGVcbiAgICAgICAgZmluZEtleShwYXJzZVBhdHRlcm5zLCAocGF0dGVybikgPT4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpKTtcblxuICAgIGxldCB2YWx1ZTtcblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2tcbiAgICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgLS0gSSBjaGFsbGFuZ2UgeW91IHRvIGZpeCB0aGUgdHlwZVxuICAgICAgICBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpXG4gICAgICA6IHZhbHVlO1xuXG4gICAgY29uc3QgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG5cbiAgICByZXR1cm4geyB2YWx1ZSwgcmVzdCB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChcbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiZcbiAgICAgIHByZWRpY2F0ZShvYmplY3Rba2V5XSlcbiAgICApIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAobGV0IGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gKHN0cmluZywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3QgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcblxuICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICBsZXQgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2tcbiAgICAgID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKVxuICAgICAgOiBwYXJzZVJlc3VsdFswXTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55IC0tIEkgY2hhbGxhbmdlIHlvdSB0byBmaXggdGhlIHR5cGVcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIGNvbnN0IHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHsgdmFsdWUsIHJlc3QgfTtcbiAgfTtcbn1cbiIsImltcG9ydCB7IGZvcm1hdERpc3RhbmNlIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS5tanNcIjtcbmltcG9ydCB7IGZvcm1hdExvbmcgfSBmcm9tIFwiLi9lbi1VUy9fbGliL2Zvcm1hdExvbmcubWpzXCI7XG5pbXBvcnQgeyBmb3JtYXRSZWxhdGl2ZSB9IGZyb20gXCIuL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUubWpzXCI7XG5pbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gXCIuL2VuLVVTL19saWIvbG9jYWxpemUubWpzXCI7XG5pbXBvcnQgeyBtYXRjaCB9IGZyb20gXCIuL2VuLVVTL19saWIvbWF0Y2gubWpzXCI7XG5cbi8qKlxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF0oaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnApXG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3MpXG4gKi9cbmV4cG9ydCBjb25zdCBlblVTID0ge1xuICBjb2RlOiBcImVuLVVTXCIsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMCAvKiBTdW5kYXkgKi8sXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxLFxuICB9LFxufTtcblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBlblVTO1xuIiwiaW1wb3J0IHsgYnVpbGRMb2NhbGl6ZUZuIH0gZnJvbSBcIi4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuLm1qc1wiO1xuXG5jb25zdCBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogW1wiQlwiLCBcIkFcIl0sXG4gIGFiYnJldmlhdGVkOiBbXCJCQ1wiLCBcIkFEXCJdLFxuICB3aWRlOiBbXCJCZWZvcmUgQ2hyaXN0XCIsIFwiQW5ubyBEb21pbmlcIl0sXG59O1xuXG5jb25zdCBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFtcIjFcIiwgXCIyXCIsIFwiM1wiLCBcIjRcIl0sXG4gIGFiYnJldmlhdGVkOiBbXCJRMVwiLCBcIlEyXCIsIFwiUTNcIiwgXCJRNFwiXSxcbiAgd2lkZTogW1wiMXN0IHF1YXJ0ZXJcIiwgXCIybmQgcXVhcnRlclwiLCBcIjNyZCBxdWFydGVyXCIsIFwiNHRoIHF1YXJ0ZXJcIl0sXG59O1xuXG4vLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG5jb25zdCBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbXCJKXCIsIFwiRlwiLCBcIk1cIiwgXCJBXCIsIFwiTVwiLCBcIkpcIiwgXCJKXCIsIFwiQVwiLCBcIlNcIiwgXCJPXCIsIFwiTlwiLCBcIkRcIl0sXG4gIGFiYnJldmlhdGVkOiBbXG4gICAgXCJKYW5cIixcbiAgICBcIkZlYlwiLFxuICAgIFwiTWFyXCIsXG4gICAgXCJBcHJcIixcbiAgICBcIk1heVwiLFxuICAgIFwiSnVuXCIsXG4gICAgXCJKdWxcIixcbiAgICBcIkF1Z1wiLFxuICAgIFwiU2VwXCIsXG4gICAgXCJPY3RcIixcbiAgICBcIk5vdlwiLFxuICAgIFwiRGVjXCIsXG4gIF0sXG5cbiAgd2lkZTogW1xuICAgIFwiSmFudWFyeVwiLFxuICAgIFwiRmVicnVhcnlcIixcbiAgICBcIk1hcmNoXCIsXG4gICAgXCJBcHJpbFwiLFxuICAgIFwiTWF5XCIsXG4gICAgXCJKdW5lXCIsXG4gICAgXCJKdWx5XCIsXG4gICAgXCJBdWd1c3RcIixcbiAgICBcIlNlcHRlbWJlclwiLFxuICAgIFwiT2N0b2JlclwiLFxuICAgIFwiTm92ZW1iZXJcIixcbiAgICBcIkRlY2VtYmVyXCIsXG4gIF0sXG59O1xuXG5jb25zdCBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogW1wiU1wiLCBcIk1cIiwgXCJUXCIsIFwiV1wiLCBcIlRcIiwgXCJGXCIsIFwiU1wiXSxcbiAgc2hvcnQ6IFtcIlN1XCIsIFwiTW9cIiwgXCJUdVwiLCBcIldlXCIsIFwiVGhcIiwgXCJGclwiLCBcIlNhXCJdLFxuICBhYmJyZXZpYXRlZDogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICB3aWRlOiBbXG4gICAgXCJTdW5kYXlcIixcbiAgICBcIk1vbmRheVwiLFxuICAgIFwiVHVlc2RheVwiLFxuICAgIFwiV2VkbmVzZGF5XCIsXG4gICAgXCJUaHVyc2RheVwiLFxuICAgIFwiRnJpZGF5XCIsXG4gICAgXCJTYXR1cmRheVwiLFxuICBdLFxufTtcblxuY29uc3QgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogXCJhXCIsXG4gICAgcG06IFwicFwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pXCIsXG4gICAgbm9vbjogXCJuXCIsXG4gICAgbW9ybmluZzogXCJtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcIm5pZ2h0XCIsXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06IFwiQU1cIixcbiAgICBwbTogXCJQTVwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcIm5pZ2h0XCIsXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogXCJhLm0uXCIsXG4gICAgcG06IFwicC5tLlwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcIm5pZ2h0XCIsXG4gIH0sXG59O1xuXG5jb25zdCBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogXCJhXCIsXG4gICAgcG06IFwicFwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pXCIsXG4gICAgbm9vbjogXCJuXCIsXG4gICAgbW9ybmluZzogXCJpbiB0aGUgbW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJpbiB0aGUgYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJpbiB0aGUgZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcImF0IG5pZ2h0XCIsXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06IFwiQU1cIixcbiAgICBwbTogXCJQTVwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJpbiB0aGUgbW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJpbiB0aGUgYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJpbiB0aGUgZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcImF0IG5pZ2h0XCIsXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogXCJhLm0uXCIsXG4gICAgcG06IFwicC5tLlwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJpbiB0aGUgbW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJpbiB0aGUgYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJpbiB0aGUgZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcImF0IG5pZ2h0XCIsXG4gIH0sXG59O1xuXG5jb25zdCBvcmRpbmFsTnVtYmVyID0gKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykgPT4ge1xuICBjb25zdCBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YC5cbiAgLy9cbiAgLy8gYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcuXG5cbiAgY29uc3QgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBcInN0XCI7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBcIm5kXCI7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBcInJkXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBudW1iZXIgKyBcInRoXCI7XG59O1xuXG5leHBvcnQgY29uc3QgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXIsXG5cbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxuXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gICAgYXJndW1lbnRDYWxsYmFjazogKHF1YXJ0ZXIpID0+IHF1YXJ0ZXIgLSAxLFxuICB9KSxcblxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxuXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6IFwid2lkZVwiLFxuICB9KSxcblxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6IFwid2lkZVwiLFxuICB9KSxcbn07XG4iLCJpbXBvcnQgeyBidWlsZE1hdGNoRm4gfSBmcm9tIFwiLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4ubWpzXCI7XG5pbXBvcnQgeyBidWlsZE1hdGNoUGF0dGVybkZuIH0gZnJvbSBcIi4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi5tanNcIjtcblxuY29uc3QgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbmNvbnN0IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xuXG5jb25zdCBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2ksXG59O1xuY29uc3QgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV0sXG59O1xuXG5jb25zdCBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pLFxufTtcbmNvbnN0IHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXSxcbn07XG5cbmNvbnN0IG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxufTtcbmNvbnN0IHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbXG4gICAgL15qL2ksXG4gICAgL15mL2ksXG4gICAgL15tL2ksXG4gICAgL15hL2ksXG4gICAgL15tL2ksXG4gICAgL15qL2ksXG4gICAgL15qL2ksXG4gICAgL15hL2ksXG4gICAgL15zL2ksXG4gICAgL15vL2ksXG4gICAgL15uL2ksXG4gICAgL15kL2ksXG4gIF0sXG5cbiAgYW55OiBbXG4gICAgL15qYS9pLFxuICAgIC9eZi9pLFxuICAgIC9ebWFyL2ksXG4gICAgL15hcC9pLFxuICAgIC9ebWF5L2ksXG4gICAgL15qdW4vaSxcbiAgICAvXmp1bC9pLFxuICAgIC9eYXUvaSxcbiAgICAvXnMvaSxcbiAgICAvXm8vaSxcbiAgICAvXm4vaSxcbiAgICAvXmQvaSxcbiAgXSxcbn07XG5cbmNvbnN0IG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2ksXG59O1xuY29uc3QgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldLFxufTtcblxuY29uc3QgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG59O1xuY29uc3QgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6ICh2YWx1ZSkgPT4gcGFyc2VJbnQodmFsdWUsIDEwKSxcbiAgfSksXG5cbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICAgIHZhbHVlQ2FsbGJhY2s6IChpbmRleCkgPT4gaW5kZXggKyAxLFxuICB9KSxcblxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogXCJhbnlcIixcbiAgfSksXG5cbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcImFueVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxufTtcbiIsImxldCBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG4gIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRPcHRpb25zKG5ld09wdGlvbnMpIHtcbiAgZGVmYXVsdE9wdGlvbnMgPSBuZXdPcHRpb25zO1xufVxuIiwiLyoqXG4gKiBAbW9kdWxlIGNvbnN0YW50c1xuICogQHN1bW1hcnkgVXNlZnVsIGNvbnN0YW50c1xuICogQGRlc2NyaXB0aW9uXG4gKiBDb2xsZWN0aW9uIG9mIHVzZWZ1bCBkYXRlIGNvbnN0YW50cy5cbiAqXG4gKiBUaGUgY29uc3RhbnRzIGNvdWxkIGJlIGltcG9ydGVkIGZyb20gYGRhdGUtZm5zL2NvbnN0YW50c2A6XG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IG1heFRpbWUsIG1pblRpbWUgfSBmcm9tIFwiLi9jb25zdGFudHMvZGF0ZS1mbnMvY29uc3RhbnRzXCI7XG4gKlxuICogZnVuY3Rpb24gaXNBbGxvd2VkVGltZSh0aW1lKSB7XG4gKiAgIHJldHVybiB0aW1lIDw9IG1heFRpbWUgJiYgdGltZSA+PSBtaW5UaW1lO1xuICogfVxuICogYGBgXG4gKi9cblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIGRheXNJbldlZWtcbiAqIEBzdW1tYXJ5IERheXMgaW4gMSB3ZWVrLlxuICovXG5leHBvcnQgY29uc3QgZGF5c0luV2VlayA9IDc7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBkYXlzSW5ZZWFyXG4gKiBAc3VtbWFyeSBEYXlzIGluIDEgeWVhci5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhvdyBtYW55IGRheXMgaW4gYSB5ZWFyLlxuICpcbiAqIE9uZSB5ZWFycyBlcXVhbHMgMzY1LjI0MjUgZGF5cyBhY2NvcmRpbmcgdG8gdGhlIGZvcm11bGE6XG4gKlxuICogPiBMZWFwIHllYXIgb2NjdXJlcyBldmVyeSA0IHllYXJzLCBleGNlcHQgZm9yIHllYXJzIHRoYXQgYXJlIGRpdmlzYWJsZSBieSAxMDAgYW5kIG5vdCBkaXZpc2FibGUgYnkgNDAwLlxuICogPiAxIG1lYW4geWVhciA9ICgzNjUrMS80LTEvMTAwKzEvNDAwKSBkYXlzID0gMzY1LjI0MjUgZGF5c1xuICovXG5leHBvcnQgY29uc3QgZGF5c0luWWVhciA9IDM2NS4yNDI1O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWF4VGltZVxuICogQHN1bW1hcnkgTWF4aW11bSBhbGxvd2VkIHRpbWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IG1heFRpbWUgfSBmcm9tIFwiLi9jb25zdGFudHMvZGF0ZS1mbnMvY29uc3RhbnRzXCI7XG4gKlxuICogY29uc3QgaXNWYWxpZCA9IDg2NDAwMDAwMDAwMDAwMDEgPD0gbWF4VGltZTtcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBuZXcgRGF0ZSg4NjQwMDAwMDAwMDAwMDAxKTtcbiAqIC8vPT4gSW52YWxpZCBEYXRlXG4gKi9cbmV4cG9ydCBjb25zdCBtYXhUaW1lID0gTWF0aC5wb3coMTAsIDgpICogMjQgKiA2MCAqIDYwICogMTAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pblRpbWVcbiAqIEBzdW1tYXJ5IE1pbmltdW0gYWxsb3dlZCB0aW1lLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBtaW5UaW1lIH0gZnJvbSBcIi4vY29uc3RhbnRzL2RhdGUtZm5zL2NvbnN0YW50c1wiO1xuICpcbiAqIGNvbnN0IGlzVmFsaWQgPSAtODY0MDAwMDAwMDAwMDAwMSA+PSBtaW5UaW1lO1xuICogLy89PiBmYWxzZVxuICpcbiAqIG5ldyBEYXRlKC04NjQwMDAwMDAwMDAwMDAxKVxuICogLy89PiBJbnZhbGlkIERhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IG1pblRpbWUgPSAtbWF4VGltZTtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luV2Vla1xuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgd2Vlay5cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luV2VlayA9IDYwNDgwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luRGF5XG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBkYXkuXG4gKi9cbmV4cG9ydCBjb25zdCBtaWxsaXNlY29uZHNJbkRheSA9IDg2NDAwMDAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5NaW51dGVcbiAqIEBzdW1tYXJ5IE1pbGxpc2Vjb25kcyBpbiAxIG1pbnV0ZVxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5NaW51dGUgPSA2MDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luSG91clxuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgaG91clxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5Ib3VyID0gMzYwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luU2Vjb25kXG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBzZWNvbmRcbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luU2Vjb25kID0gMTAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJblllYXJcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luWWVhciA9IDUyNTYwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbk1vbnRoXG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgbW9udGguXG4gKi9cbmV4cG9ydCBjb25zdCBtaW51dGVzSW5Nb250aCA9IDQzMjAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWludXRlc0luRGF5XG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luRGF5ID0gMTQ0MDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbkhvdXJcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSBob3VyLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luSG91ciA9IDYwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbW9udGhzSW5RdWFydGVyXG4gKiBAc3VtbWFyeSBNb250aHMgaW4gMSBxdWFydGVyLlxuICovXG5leHBvcnQgY29uc3QgbW9udGhzSW5RdWFydGVyID0gMztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1vbnRoc0luWWVhclxuICogQHN1bW1hcnkgTW9udGhzIGluIDEgeWVhci5cbiAqL1xuZXhwb3J0IGNvbnN0IG1vbnRoc0luWWVhciA9IDEyO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgcXVhcnRlcnNJblllYXJcbiAqIEBzdW1tYXJ5IFF1YXJ0ZXJzIGluIDEgeWVhclxuICovXG5leHBvcnQgY29uc3QgcXVhcnRlcnNJblllYXIgPSA0O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luSG91clxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIGhvdXIuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5Ib3VyID0gMzYwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJbk1pbnV0ZVxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIG1pbnV0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJbk1pbnV0ZSA9IDYwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luRGF5XG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luRGF5ID0gc2Vjb25kc0luSG91ciAqIDI0O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luV2Vla1xuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIHdlZWsuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5XZWVrID0gc2Vjb25kc0luRGF5ICogNztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJblllYXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luWWVhciA9IHNlY29uZHNJbkRheSAqIGRheXNJblllYXI7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5Nb250aFxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIG1vbnRoXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5Nb250aCA9IHNlY29uZHNJblllYXIgLyAxMjtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJblF1YXJ0ZXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSBxdWFydGVyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luUXVhcnRlciA9IHNlY29uZHNJbk1vbnRoICogMztcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSBkYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGF0ZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgX2RhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mRGF5O1xuIiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIGNvbnN0IHV0Y0RhdGUgPSBuZXcgRGF0ZShcbiAgICBEYXRlLlVUQyhcbiAgICAgIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0TW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgZGF0ZS5nZXRIb3VycygpLFxuICAgICAgZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCksXG4gICAgKSxcbiAgKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn1cbiIsIi8qKlxuICogQG5hbWUgY29uc3RydWN0RnJvbVxuICogQGNhdGVnb3J5IEdlbmVyaWMgSGVscGVyc1xuICogQHN1bW1hcnkgQ29uc3RydWN0cyBhIGRhdGUgdXNpbmcgdGhlIHJlZmVyZW5jZSBkYXRlIGFuZCB0aGUgdmFsdWVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBmdW5jdGlvbiBjb25zdHJ1Y3RzIGEgbmV3IGRhdGUgdXNpbmcgdGhlIGNvbnN0cnVjdG9yIGZyb20gdGhlIHJlZmVyZW5jZVxuICogZGF0ZSBhbmQgdGhlIGdpdmVuIHZhbHVlLiBJdCBoZWxwcyB0byBidWlsZCBnZW5lcmljIGZ1bmN0aW9ucyB0aGF0IGFjY2VwdFxuICogZGF0ZSBleHRlbnNpb25zLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIHJlZmVyZW5jZSBkYXRlIHRvIHRha2UgY29uc3RydWN0b3IgZnJvbVxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNyZWF0ZSB0aGUgZGF0ZVxuICpcbiAqIEByZXR1cm5zIERhdGUgaW5pdGlhbGl6ZWQgdXNpbmcgdGhlIGdpdmVuIGRhdGUgYW5kIHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tICdkYXRlLWZucydcbiAqXG4gKiAvLyBBIGZ1bmN0aW9uIHRoYXQgY2xvbmVzIGEgZGF0ZSBwcmVzZXJ2aW5nIHRoZSBvcmlnaW5hbCB0eXBlXG4gKiBmdW5jdGlvbiBjbG9uZURhdGU8RGF0ZVR5cGUgZXh0ZW5kcyBEYXRlKGRhdGU6IERhdGVUeXBlKTogRGF0ZVR5cGUge1xuICogICByZXR1cm4gY29uc3RydWN0RnJvbShcbiAqICAgICBkYXRlLCAvLyBVc2UgY29udHJ1c3RvciBmcm9tIHRoZSBnaXZlbiBkYXRlXG4gKiAgICAgZGF0ZS5nZXRUaW1lKCkgLy8gVXNlIHRoZSBkYXRlIHZhbHVlIHRvIGNyZWF0ZSBhIG5ldyBkYXRlXG4gKiAgIClcbiAqIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cnVjdEZyb20oZGF0ZSwgdmFsdWUpIHtcbiAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkYXRlLmNvbnN0cnVjdG9yKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IERhdGUodmFsdWUpO1xuICB9XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgY29uc3RydWN0RnJvbTtcbiIsImltcG9ydCB7IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyB9IGZyb20gXCIuL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cy5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZZZWFyIH0gZnJvbSBcIi4vc3RhcnRPZlllYXIubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZ2V0RGF5T2ZZZWFyXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGF5IG9mIHRoZSB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBkYXkgb2YgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBkYXkgb2YgdGhlIHllYXIgaXMgMiBKdWx5IDIwMTQ/XG4gKiBjb25zdCByZXN1bHQgPSBnZXREYXlPZlllYXIobmV3IERhdGUoMjAxNCwgNiwgMikpXG4gKiAvLz0+IDE4M1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF5T2ZZZWFyKGRhdGUpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRpZmYgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoX2RhdGUsIHN0YXJ0T2ZZZWFyKF9kYXRlKSk7XG4gIGNvbnN0IGRheU9mWWVhciA9IGRpZmYgKyAxO1xuICByZXR1cm4gZGF5T2ZZZWFyO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldERheU9mWWVhcjtcbiIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luRGF5IH0gZnJvbSBcIi4vY29uc3RhbnRzLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZkRheSB9IGZyb20gXCIuL3N0YXJ0T2ZEYXkubWpzXCI7XG5pbXBvcnQgeyBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIH0gZnJvbSBcIi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy4gVGhpcyBtZWFucyB0aGF0IHRoZSB0aW1lcyBhcmUgcmVtb3ZlZFxuICogZnJvbSB0aGUgZGF0ZXMgYW5kIHRoZW4gdGhlIGRpZmZlcmVuY2UgaW4gZGF5cyBpcyBjYWxjdWxhdGVkLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlTGVmdCAtIFRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0gZGF0ZVJpZ2h0IC0gVGhlIGVhcmxpZXIgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5c1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBkYXlzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxMSAyMzowMDowMCBhbmQgMiBKdWx5IDIwMTIgMDA6MDA6MDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTIsIDYsIDIsIDAsIDApLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgMClcbiAqIClcbiAqIC8vPT4gMzY2XG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBkYXlzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxMSAyMzo1OTowMCBhbmQgMyBKdWx5IDIwMTEgMDA6MDE6MDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDMsIDAsIDEpLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgNTkpXG4gKiApXG4gKiAvLz0+IDFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSB7XG4gIGNvbnN0IHN0YXJ0T2ZEYXlMZWZ0ID0gc3RhcnRPZkRheShkYXRlTGVmdCk7XG4gIGNvbnN0IHN0YXJ0T2ZEYXlSaWdodCA9IHN0YXJ0T2ZEYXkoZGF0ZVJpZ2h0KTtcblxuICBjb25zdCB0aW1lc3RhbXBMZWZ0ID1cbiAgICBzdGFydE9mRGF5TGVmdC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZEYXlMZWZ0KTtcbiAgY29uc3QgdGltZXN0YW1wUmlnaHQgPVxuICAgIHN0YXJ0T2ZEYXlSaWdodC5nZXRUaW1lKCkgLVxuICAgIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheVJpZ2h0KTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgZGF5IGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgZGF5IG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoKHRpbWVzdGFtcExlZnQgLSB0aW1lc3RhbXBSaWdodCkgLyBtaWxsaXNlY29uZHNJbkRheSk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzO1xuIiwiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20ubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZlllYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgeWVhciBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZZZWFyKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMDApKVxuICogLy89PiBXZWQgSmFuIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZZZWFyKGRhdGUpIHtcbiAgY29uc3QgY2xlYW5EYXRlID0gdG9EYXRlKGRhdGUpO1xuICBjb25zdCBfZGF0ZSA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIF9kYXRlLnNldEZ1bGxZZWFyKGNsZWFuRGF0ZS5nZXRGdWxsWWVhcigpLCAwLCAxKTtcbiAgX2RhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mWWVhcjtcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIHN0YXJ0T2ZXZWVrfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZldlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGEgd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gU3VuIEF1ZyAzMSAyMDE0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRoZSB3ZWVrIHN0YXJ0cyBvbiBNb25kYXksIHRoZSBzdGFydCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZldlZWsoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IHdlZWtTdGFydHNPbiA9XG4gICAgb3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIDA7XG5cbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRheSA9IF9kYXRlLmdldERheSgpO1xuICBjb25zdCBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcblxuICBfZGF0ZS5zZXREYXRlKF9kYXRlLmdldERhdGUoKSAtIGRpZmYpO1xuICBfZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZXZWVrO1xuIiwiaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mSVNPV2Vla1xuICogQGNhdGVnb3J5IElTTyBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBJU08gd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZJU09XZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZklTT1dlZWsoZGF0ZSkge1xuICByZXR1cm4gc3RhcnRPZldlZWsoZGF0ZSwgeyB3ZWVrU3RhcnRzT246IDEgfSk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgc3RhcnRPZklTT1dlZWs7XG4iLCJpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZJU09XZWVrIH0gZnJvbSBcIi4vc3RhcnRPZklTT1dlZWsubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZ2V0SVNPV2Vla1llYXJcbiAqIEBjYXRlZ29yeSBJU08gV2Vlay1OdW1iZXJpbmcgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZSxcbiAqIHdoaWNoIGFsd2F5cyBzdGFydHMgMyBkYXlzIGJlZm9yZSB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5LlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBnaXZlbiBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIElTTy13ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDIgSmFudWFyeSAyMDA1P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0SVNPV2Vla1llYXIobmV3IERhdGUoMjAwNSwgMCwgMikpXG4gKiAvLz0+IDIwMDRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldElTT1dlZWtZZWFyKGRhdGUpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IHllYXIgPSBfZGF0ZS5nZXRGdWxsWWVhcigpO1xuXG4gIGNvbnN0IGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldEZ1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgY29uc3Qgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZklTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG5cbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0RnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIGNvbnN0IHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChfZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChfZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldElTT1dlZWtZZWFyO1xuIiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5XZWVrIH0gZnJvbSBcIi4vY29uc3RhbnRzLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZklTT1dlZWsgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vlay5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZJU09XZWVrWWVhciB9IGZyb20gXCIuL3N0YXJ0T2ZJU09XZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBnZXRJU09XZWVrXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBJU08gd2VlayBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgSVNPIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGdpdmVuIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgSVNPIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgSVNPLXdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDU/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRJU09XZWVrKG5ldyBEYXRlKDIwMDUsIDAsIDIpKVxuICogLy89PiA1M1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SVNPV2VlayhkYXRlKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICBjb25zdCBkaWZmID1cbiAgICBzdGFydE9mSVNPV2VlayhfZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZklTT1dlZWtZZWFyKF9kYXRlKS5nZXRUaW1lKCk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIG1pbGxpc2Vjb25kc0luV2VlaykgKyAxO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldElTT1dlZWs7XG4iLCJpbXBvcnQgeyBnZXRJU09XZWVrWWVhciB9IGZyb20gXCIuL2dldElTT1dlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZklTT1dlZWsgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vlay5tanNcIjtcbmltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZJU09XZWVrWWVhclxuICogQGNhdGVnb3J5IElTTyBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcixcbiAqIHdoaWNoIGFsd2F5cyBzdGFydHMgMyBkYXlzIGJlZm9yZSB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5LlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1OlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZklTT1dlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDYsIDIpKVxuICogLy89PiBNb24gSmFuIDAzIDIwMDUgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZJU09XZWVrWWVhcihkYXRlKSB7XG4gIGNvbnN0IHllYXIgPSBnZXRJU09XZWVrWWVhcihkYXRlKTtcbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5ID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldEZ1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZJU09XZWVrWWVhcjtcbiIsImltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIGdldFdlZWtZZWFyfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZ2V0V2Vla1llYXJcbiAqIEBjYXRlZ29yeSBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSBleGFjdCBjYWxjdWxhdGlvbiBkZXBlbmRzIG9uIHRoZSB2YWx1ZXMgb2ZcbiAqIGBvcHRpb25zLndlZWtTdGFydHNPbmAgKHdoaWNoIGlzIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrKVxuICogYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKHdoaWNoIGlzIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXMgYWx3YXlzIGluXG4gKiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhcilcbiAqXG4gKiBXZWVrIG51bWJlcmluZzogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2VlayNXZWVrX251bWJlcmluZ1xuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGdpdmVuIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDI2IERlY2VtYmVyIDIwMDQgd2l0aCB0aGUgZGVmYXVsdCBzZXR0aW5ncz9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldFdlZWtZZWFyKG5ldyBEYXRlKDIwMDQsIDExLCAyNikpXG4gKiAvLz0+IDIwMDVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBudW1iZXJpbmcgeWVhciBpcyAyNiBEZWNlbWJlciAyMDA0IGlmIHdlZWsgc3RhcnRzIG9uIFNhdHVyZGF5P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0V2Vla1llYXIobmV3IERhdGUoMjAwNCwgMTEsIDI2KSwgeyB3ZWVrU3RhcnRzT246IDYgfSlcbiAqIC8vPT4gMjAwNFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDI2IERlY2VtYmVyIDIwMDQgaWYgdGhlIGZpcnN0IHdlZWsgY29udGFpbnMgNCBKYW51YXJ5P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0V2Vla1llYXIobmV3IERhdGUoMjAwNCwgMTEsIDI2KSwgeyBmaXJzdFdlZWtDb250YWluc0RhdGU6IDQgfSlcbiAqIC8vPT4gMjAwNFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2Vla1llYXIoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgeWVhciA9IF9kYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICBjb25zdCBmaXJzdFdlZWtDb250YWluc0RhdGUgPVxuICAgIG9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIG9wdGlvbnM/LmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICAxO1xuXG4gIGNvbnN0IGZpcnN0V2Vla09mTmV4dFllYXIgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldEZ1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcblxuICBjb25zdCBmaXJzdFdlZWtPZlRoaXNZZWFyID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBvcHRpb25zKTtcblxuICBpZiAoX2RhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoX2RhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRXZWVrWWVhcjtcbiIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luV2VlayB9IGZyb20gXCIuL2NvbnN0YW50cy5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZXZWVrIH0gZnJvbSBcIi4vc3RhcnRPZldlZWsubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mV2Vla1llYXIgfSBmcm9tIFwiLi9zdGFydE9mV2Vla1llYXIubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBnZXRXZWVrfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZ2V0V2Vla1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBsb2NhbCB3ZWVrIGluZGV4IG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBsb2NhbCB3ZWVrIGluZGV4IG9mIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIGV4YWN0IGNhbGN1bGF0aW9uIGRlcGVuZHMgb24gdGhlIHZhbHVlcyBvZlxuICogYG9wdGlvbnMud2Vla1N0YXJ0c09uYCAod2hpY2ggaXMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWspXG4gKiBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAod2hpY2ggaXMgdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpcyBhbHdheXMgaW5cbiAqIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyKVxuICpcbiAqIFdlZWsgbnVtYmVyaW5nOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZWVrI1dlZWtfbnVtYmVyaW5nXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgbG9jYWwgd2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNSB3aXRoIGRlZmF1bHQgb3B0aW9ucz9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldFdlZWsobmV3IERhdGUoMjAwNSwgMCwgMikpXG4gKiAvLz0+IDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgbG9jYWwgd2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNSxcbiAqIC8vIGlmIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLFxuICogLy8gYW5kIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyIGFsd2F5cyBjb250YWlucyA0IEphbnVhcnk/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRXZWVrKG5ldyBEYXRlKDIwMDUsIDAsIDIpLCB7XG4gKiAgIHdlZWtTdGFydHNPbjogMSxcbiAqICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gKiB9KVxuICogLy89PiA1M1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrKGRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRpZmYgPVxuICAgIHN0YXJ0T2ZXZWVrKF9kYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLVxuICAgIHN0YXJ0T2ZXZWVrWWVhcihfZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpO1xuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBtaWxsaXNlY29uZHNJbldlZWspICsgMTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRXZWVrO1xuIiwiaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20ubWpzXCI7XG5pbXBvcnQgeyBnZXRXZWVrWWVhciB9IGZyb20gXCIuL2dldFdlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5tanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIHN0YXJ0T2ZXZWVrWWVhcn0gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZXZWVrWWVhclxuICogQGNhdGVnb3J5IFdlZWstTnVtYmVyaW5nIFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiBUaGUgZXhhY3QgY2FsY3VsYXRpb24gZGVwZW5kcyBvbiB0aGUgdmFsdWVzIG9mXG4gKiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gICh3aGljaCBpcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaylcbiAqIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgICh3aGljaCBpcyB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzIGFsd2F5cyBpblxuICogdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIpXG4gKlxuICogV2VlayBudW1iZXJpbmc6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dlZWsjV2Vla19udW1iZXJpbmdcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBhIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1IHdpdGggZGVmYXVsdCBzZXR0aW5nczpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrWWVhcihuZXcgRGF0ZSgyMDA1LCA2LCAyKSlcbiAqIC8vPT4gU3VuIERlYyAyNiAyMDA0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1XG4gKiAvLyBpZiBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB3ZWVrXG4gKiAvLyBhbmQgNCBKYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhcjpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrWWVhcihuZXcgRGF0ZSgyMDA1LCA2LCAyKSwge1xuICogICB3ZWVrU3RhcnRzT246IDEsXG4gKiAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICogfSlcbiAqIC8vPT4gTW9uIEphbiAwMyAyMDA1IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9XG4gICAgb3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIDE7XG5cbiAgY29uc3QgeWVhciA9IGdldFdlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICBjb25zdCBmaXJzdFdlZWsgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmaXJzdFdlZWsuc2V0RnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBfZGF0ZSA9IHN0YXJ0T2ZXZWVrKGZpcnN0V2Vlaywgb3B0aW9ucyk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mV2Vla1llYXI7XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIGNvbnN0IHNpZ24gPSBudW1iZXIgPCAwID8gXCItXCIgOiBcIlwiO1xuICBjb25zdCBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCkucGFkU3RhcnQodGFyZ2V0TGVuZ3RoLCBcIjBcIik7XG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufVxuIiwiaW1wb3J0IHsgYWRkTGVhZGluZ1plcm9zIH0gZnJvbSBcIi4uL2FkZExlYWRpbmdaZXJvcy5tanNcIjtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGxpZ2h0Rm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5KGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG5cbiAgICBjb25zdCBzaWduZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgY29uc3QgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09IFwieXlcIiA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIE1vbnRoXG4gIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09IFwiTVwiID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0RGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIEFNIG9yIFBNXG4gIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldEhvdXJzKCkgLyAxMiA+PSAxID8gXCJwbVwiIDogXCJhbVwiO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBcImFcIjpcbiAgICAgIGNhc2UgXCJhYVwiOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICBjYXNlIFwiYWFhXCI6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgICBjYXNlIFwiYWFhYWFcIjpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcbiAgICAgIGNhc2UgXCJhYWFhXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSBcImFtXCIgPyBcImEubS5cIiA6IFwicC5tLlwiO1xuICAgIH1cbiAgfSxcblxuICAvLyBIb3VyIFsxLTEyXVxuICBoKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBIb3VyIFswLTIzXVxuICBIKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEhvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gTWludXRlXG4gIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0TWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIFNlY29uZFxuICBzKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFNlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUyhkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIGNvbnN0IG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgY29uc3QgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLmZsb29yKFxuICAgICAgbWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMyksXG4gICAgKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IGdldERheU9mWWVhciB9IGZyb20gXCIuLi8uLi9nZXREYXlPZlllYXIubWpzXCI7XG5pbXBvcnQgeyBnZXRJU09XZWVrIH0gZnJvbSBcIi4uLy4uL2dldElTT1dlZWsubWpzXCI7XG5pbXBvcnQgeyBnZXRJU09XZWVrWWVhciB9IGZyb20gXCIuLi8uLi9nZXRJU09XZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IGdldFdlZWsgfSBmcm9tIFwiLi4vLi4vZ2V0V2Vlay5tanNcIjtcbmltcG9ydCB7IGdldFdlZWtZZWFyIH0gZnJvbSBcIi4uLy4uL2dldFdlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1plcm9zIH0gZnJvbSBcIi4uL2FkZExlYWRpbmdaZXJvcy5tanNcIjtcbmltcG9ydCB7IGxpZ2h0Rm9ybWF0dGVycyB9IGZyb20gXCIuL2xpZ2h0Rm9ybWF0dGVycy5tanNcIjtcblxuY29uc3QgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06IFwiYW1cIixcbiAgcG06IFwicG1cIixcbiAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgbm9vbjogXCJub29uXCIsXG4gIG1vcm5pbmc6IFwibW9ybmluZ1wiLFxuICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICBuaWdodDogXCJuaWdodFwiLFxufTtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbmV4cG9ydCBjb25zdCBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGVyYSA9IGRhdGUuZ2V0RnVsbFllYXIoKSA+IDAgPyAxIDogMDtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgXCJHXCI6XG4gICAgICBjYXNlIFwiR0dcIjpcbiAgICAgIGNhc2UgXCJHR0dcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHsgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIiB9KTtcbiAgICAgIC8vIEEsIEJcbiAgICAgIGNhc2UgXCJHR0dHR1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwgeyB3aWR0aDogXCJuYXJyb3dcIiB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG4gICAgICBjYXNlIFwiR0dHR1wiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHsgd2lkdGg6IFwid2lkZVwiIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gXCJ5b1wiKSB7XG4gICAgICBjb25zdCBzaWduZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICAgIGNvbnN0IHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHsgdW5pdDogXCJ5ZWFyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzaWduZWRXZWVrWWVhciA9IGdldFdlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgY29uc3Qgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjtcblxuICAgIC8vIFR3byBkaWdpdCB5ZWFyXG4gICAgaWYgKHRva2VuID09PSBcIllZXCIpIHtcbiAgICAgIGNvbnN0IHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH1cblxuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSBcIllvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7IHVuaXQ6IFwieWVhclwiIH0pO1xuICAgIH1cblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IGlzb1dlZWtZZWFyID0gZ2V0SVNPV2Vla1llYXIoZGF0ZSk7XG5cbiAgICAvLyBQYWRkaW5nXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldE1vbnRoKCkgKyAxKSAvIDMpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgXCJRXCI6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSBcIlFRXCI6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgXCJRb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7IHVuaXQ6IFwicXVhcnRlclwiIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcbiAgICAgIGNhc2UgXCJRUVFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlIFwiUVFRUVFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcIm5hcnJvd1wiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlIFwiUVFRUVwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcIndpZGVcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0TW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSBcInFcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlIFwicXFcIjpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuICAgICAgY2FzZSBcInFvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHsgdW5pdDogXCJxdWFydGVyXCIgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSBcInFxcVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcbiAgICAgIGNhc2UgXCJxcXFxcVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgXCJxcXFxXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJNXCI6XG4gICAgICBjYXNlIFwiTU1cIjpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgXCJNb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHsgdW5pdDogXCJtb250aFwiIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlIFwiTU1NXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlIFwiTU1NTU1cIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHsgd2lkdGg6IFwid2lkZVwiLCBjb250ZXh0OiBcImZvcm1hdHRpbmdcIiB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgXCJMb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHsgdW5pdDogXCJtb250aFwiIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlIFwiTExMXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlIFwiTExMTExcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgXCJMTExMXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHsgd2lkdGg6IFwid2lkZVwiLCBjb250ZXh0OiBcInN0YW5kYWxvbmVcIiB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB3ZWVrID0gZ2V0V2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gXCJ3b1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7IHVuaXQ6IFwid2Vla1wiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBpc29XZWVrID0gZ2V0SVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gXCJJb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7IHVuaXQ6IFwid2Vla1wiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09IFwiZG9cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXREYXRlKCksIHsgdW5pdDogXCJkYXRlXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgZGF5T2ZZZWFyID0gZ2V0RGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSBcIkRvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwgeyB1bml0OiBcImRheU9mWWVhclwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSBcIkVcIjpcbiAgICAgIGNhc2UgXCJFRVwiOlxuICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSBcIkVFRUVFXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgXCJFRUVFRUVcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJzaG9ydFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcIndpZGVcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIGNvbnN0IGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlIFwiZVwiOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgXCJlZVwiOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSBcImVvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7IHVuaXQ6IFwiZGF5XCIgfSk7XG4gICAgICBjYXNlIFwiZWVlXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiZWVlZWVcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImVlZWVlZVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImVlZWVcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRheU9mV2VlayA9IGRhdGUuZ2V0RGF5KCk7XG4gICAgY29uc3QgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlIFwiY2NcIjpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSBcImNvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7IHVuaXQ6IFwiZGF5XCIgfSk7XG4gICAgICBjYXNlIFwiY2NjXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiY2NjY2NcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImNjY2NjY1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIGNvbnN0IGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSBcImlcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcbiAgICAgIGNhc2UgXCJpaVwiOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuICAgICAgY2FzZSBcImlvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2VlaywgeyB1bml0OiBcImRheVwiIH0pO1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlIFwiaWlpXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiaWlpaWlcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImlpaWlpaVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImlpaWlcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuICAgIGNvbnN0IGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/IFwicG1cIiA6IFwiYW1cIjtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJhXCI6XG4gICAgICBjYXNlIFwiYWFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJhYWFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplXG4gICAgICAgICAgLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSBcImFhYWFhXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBcImFhYWFcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgbGV0IGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gXCJwbVwiIDogXCJhbVwiO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJiXCI6XG4gICAgICBjYXNlIFwiYmJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJiYmJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplXG4gICAgICAgICAgLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSBcImJiYmJiXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBcImJiYmJcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgbGV0IGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlIFwiQlwiOlxuICAgICAgY2FzZSBcIkJCXCI6XG4gICAgICBjYXNlIFwiQkJCXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICBjYXNlIFwiQkJCQkJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICBjYXNlIFwiQkJCQlwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJ3aWRlXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSBcImhvXCIpIHtcbiAgICAgIGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHsgdW5pdDogXCJob3VyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSBcIkhvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0SG91cnMoKSwgeyB1bml0OiBcImhvdXJcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSBcIktvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7IHVuaXQ6IFwiaG91clwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09IFwia29cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHsgdW5pdDogXCJob3VyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gXCJtb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldE1pbnV0ZXMoKSwgeyB1bml0OiBcIm1pbnV0ZVwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG5cbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09IFwic29cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRTZWNvbmRzKCksIHsgdW5pdDogXCJzZWNvbmRcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgY29uc3QgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFwiWlwiO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlIFwiWFwiOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG4gICAgICBjYXNlIFwiWFhYWFwiOlxuICAgICAgY2FzZSBcIlhYXCI6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG4gICAgICBjYXNlIFwiWFhYWFhcIjpcbiAgICAgIGNhc2UgXCJYWFhcIjogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICBjb25zdCB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgXCJ4XCI6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcbiAgICAgIGNhc2UgXCJ4eHh4XCI6XG4gICAgICBjYXNlIFwieHhcIjogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcbiAgICAgIGNhc2UgXCJ4eHh4eFwiOlxuICAgICAgY2FzZSBcInh4eFwiOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgXCI6XCIpO1xuICAgIH1cbiAgfSxcblxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIGNvbnN0IHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSBcIk9cIjpcbiAgICAgIGNhc2UgXCJPT1wiOlxuICAgICAgY2FzZSBcIk9PT1wiOlxuICAgICAgICByZXR1cm4gXCJHTVRcIiArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgXCJPT09PXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gXCJHTVRcIiArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCBcIjpcIik7XG4gICAgfVxuICB9LFxuXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgY29uc3QgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlIFwielwiOlxuICAgICAgY2FzZSBcInp6XCI6XG4gICAgICBjYXNlIFwienp6XCI6XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgXCI6XCIpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSBcInp6enpcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgY29uc3QgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkZWxpbWl0ZXIgPSBcIlwiKSB7XG4gIGNvbnN0IHNpZ24gPSBvZmZzZXQgPiAwID8gXCItXCIgOiBcIitcIjtcbiAgY29uc3QgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgY29uc3QgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICBjb25zdCBzaWduID0gb2Zmc2V0ID4gMCA/IFwiLVwiIDogXCIrXCI7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkZWxpbWl0ZXIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRlbGltaXRlciA9IFwiXCIpIHtcbiAgY29uc3Qgc2lnbiA9IG9mZnNldCA+IDAgPyBcIi1cIiA6IFwiK1wiO1xuICBjb25zdCBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICBjb25zdCBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIGNvbnN0IG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cbiIsImNvbnN0IGRhdGVMb25nRm9ybWF0dGVyID0gKHBhdHRlcm4sIGZvcm1hdExvbmcpID0+IHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSBcIlBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoeyB3aWR0aDogXCJzaG9ydFwiIH0pO1xuICAgIGNhc2UgXCJQUFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiBcIm1lZGl1bVwiIH0pO1xuICAgIGNhc2UgXCJQUFBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoeyB3aWR0aDogXCJsb25nXCIgfSk7XG4gICAgY2FzZSBcIlBQUFBcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiBcImZ1bGxcIiB9KTtcbiAgfVxufTtcblxuY29uc3QgdGltZUxvbmdGb3JtYXR0ZXIgPSAocGF0dGVybiwgZm9ybWF0TG9uZykgPT4ge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlIFwicFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7IHdpZHRoOiBcInNob3J0XCIgfSk7XG4gICAgY2FzZSBcInBwXCI6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHsgd2lkdGg6IFwibWVkaXVtXCIgfSk7XG4gICAgY2FzZSBcInBwcFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7IHdpZHRoOiBcImxvbmdcIiB9KTtcbiAgICBjYXNlIFwicHBwcFwiOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHsgd2lkdGg6IFwiZnVsbFwiIH0pO1xuICB9XG59O1xuXG5jb25zdCBkYXRlVGltZUxvbmdGb3JtYXR0ZXIgPSAocGF0dGVybiwgZm9ybWF0TG9uZykgPT4ge1xuICBjb25zdCBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICBjb25zdCBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICBjb25zdCB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICBsZXQgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgXCJQXCI6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoeyB3aWR0aDogXCJzaG9ydFwiIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlBQXCI6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoeyB3aWR0aDogXCJtZWRpdW1cIiB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUFBcIjpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7IHdpZHRoOiBcImxvbmdcIiB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUFBQXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7IHdpZHRoOiBcImZ1bGxcIiB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0XG4gICAgLnJlcGxhY2UoXCJ7e2RhdGV9fVwiLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpXG4gICAgLnJlcGxhY2UoXCJ7e3RpbWV9fVwiLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyLFxufTtcbiIsImNvbnN0IHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFtcIkRcIiwgXCJERFwiXTtcbmNvbnN0IHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gW1wiWVlcIiwgXCJZWVlZXCJdO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09IFwiWVlZWVwiKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICBgVXNlIFxcYHl5eXlcXGAgaW5zdGVhZCBvZiBcXGBZWVlZXFxgIChpbiBcXGAke2Zvcm1hdH1cXGApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBcXGAke2lucHV0fVxcYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kYCxcbiAgICApO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSBcIllZXCIpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgIGBVc2UgXFxgeXlcXGAgaW5zdGVhZCBvZiBcXGBZWVxcYCAoaW4gXFxgJHtmb3JtYXR9XFxgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgXFxgJHtpbnB1dH1cXGA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZGAsXG4gICAgKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gXCJEXCIpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgIGBVc2UgXFxgZFxcYCBpbnN0ZWFkIG9mIFxcYERcXGAgKGluIFxcYCR7Zm9ybWF0fVxcYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IFxcYCR7aW5wdXR9XFxgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRgLFxuICAgICk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09IFwiRERcIikge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgYFVzZSBcXGBkZFxcYCBpbnN0ZWFkIG9mIFxcYEREXFxgIChpbiBcXGAke2Zvcm1hdH1cXGApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBcXGAke2lucHV0fVxcYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kYCxcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBpc1ZhbGlkIH0gZnJvbSBcIi4vaXNWYWxpZC5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGRlZmF1bHRMb2NhbGUgfSBmcm9tIFwiLi9fbGliL2RlZmF1bHRMb2NhbGUubWpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL19saWIvZGVmYXVsdE9wdGlvbnMubWpzXCI7XG5pbXBvcnQgeyBmb3JtYXR0ZXJzIH0gZnJvbSBcIi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy5tanNcIjtcbmltcG9ydCB7IGxvbmdGb3JtYXR0ZXJzIH0gZnJvbSBcIi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMubWpzXCI7XG5pbXBvcnQge1xuICBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLFxuICBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sXG4gIHRocm93UHJvdGVjdGVkRXJyb3IsXG59IGZyb20gXCIuL19saWIvcHJvdGVjdGVkVG9rZW5zLm1qc1wiO1xuXG4vLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcbmNvbnN0IGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPVxuICAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG5cbi8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcbmNvbnN0IGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG5cbmNvbnN0IGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbmNvbnN0IGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG5jb25zdCB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG5cbi8qKlxuICogVGhlIHtAbGluayBmb3JtYXR9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl0oaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcilcbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJdKGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXIpKS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIGZvcm1hdCAtIFRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKlxuICogQHRocm93cyBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3MgYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3MgdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3MgZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0KGRhdGUsIGZvcm1hdFN0ciwgb3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IGxvY2FsZSA9IG9wdGlvbnM/LmxvY2FsZSA/PyBkZWZhdWx0T3B0aW9ucy5sb2NhbGUgPz8gZGVmYXVsdExvY2FsZTtcblxuICBjb25zdCBmaXJzdFdlZWtDb250YWluc0RhdGUgPVxuICAgIG9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIG9wdGlvbnM/LmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICAxO1xuXG4gIGNvbnN0IHdlZWtTdGFydHNPbiA9XG4gICAgb3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24gPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIDA7XG5cbiAgY29uc3Qgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRhdGUpO1xuXG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHRpbWUgdmFsdWVcIik7XG4gIH1cblxuICBjb25zdCBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZSxcbiAgfTtcblxuICBjb25zdCByZXN1bHQgPSBmb3JtYXRTdHJcbiAgICAubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApXG4gICAgLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgICBjb25zdCBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCJwXCIgfHwgZmlyc3RDaGFyYWN0ZXIgPT09IFwiUFwiKSB7XG4gICAgICAgIGNvbnN0IGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN1YnN0cmluZztcbiAgICB9KVxuICAgIC5qb2luKFwiXCIpXG4gICAgLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApXG4gICAgLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFvcHRpb25zPy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiZcbiAgICAgICAgICBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZm9ybWF0U3RyLCBTdHJpbmcoZGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhb3B0aW9ucz8udXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJlxuICAgICAgICAgIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZm9ybWF0U3RyLCBTdHJpbmcoZGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZXIoXG4gICAgICAgICAgb3JpZ2luYWxEYXRlLFxuICAgICAgICAgIHN1YnN0cmluZyxcbiAgICAgICAgICBsb2NhbGUubG9jYWxpemUsXG4gICAgICAgICAgZm9ybWF0dGVyT3B0aW9ucyxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgICBcIkZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgXCIgK1xuICAgICAgICAgICAgZmlyc3RDaGFyYWN0ZXIgK1xuICAgICAgICAgICAgXCJgXCIsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdWJzdHJpbmc7XG4gICAgfSlcbiAgICAuam9pbihcIlwiKTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgY29uc3QgbWF0Y2hlZCA9IGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApO1xuXG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVkWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBmb3JtYXQ7XG4iLCJpbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5pbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBhZGREYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0gYW1vdW50IC0gVGhlIGFtb3VudCBvZiBkYXlzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKlxuICogQHJldHVybnMgVGhlIG5ldyBkYXRlIHdpdGggdGhlIGRheXMgYWRkZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDEwIGRheXMgdG8gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZERheXMobmV3IERhdGUoMjAxNCwgOCwgMSksIDEwKVxuICogLy89PiBUaHUgU2VwIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZERheXMoZGF0ZSwgYW1vdW50KSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICBpZiAoaXNOYU4oYW1vdW50KSkgcmV0dXJuIGNvbnN0cnVjdEZyb20oZGF0ZSwgTmFOKTtcbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIGRheXMsIG5vLW9wIHRvIGF2b2lkIGNoYW5naW5nIHRpbWVzIGluIHRoZSBob3VyIGJlZm9yZSBlbmQgb2YgRFNUXG4gICAgcmV0dXJuIF9kYXRlO1xuICB9XG4gIF9kYXRlLnNldERhdGUoX2RhdGUuZ2V0RGF0ZSgpICsgYW1vdW50KTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGFkZERheXM7XG4iLCIvL0ltcG9ydHNcbmltcG9ydCBfLCB7IGZvcm1hdCB9IGZyb20gXCJkYXRlLWZuc1wiO1xuXG4vL0NvbnN0dWN0b3IgZnVuY3Rpb25zXG5cbmZ1bmN0aW9uIFRvZG8odGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgbm90ZXMsIHByb2plY3RUYWcpIHtcbiAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGVGb3JtYXQoZHVlRGF0ZSk7XG4gIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgdGhpcy50b2RvcyA9IFtdO1xuICB0aGlzLm5vdGVzID0gbm90ZXM7XG4gIHRoaXMucHJvamVjdFRhZyA9IHByb2plY3RUYWc7XG4gIHRoaXMuc3RhdHVzID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gUHJvamVjdChwcm9qZWN0VGFnLCB0ZExpc3QpIHtcbiAgdGhpcy5wcm9qZWN0VGFnID0gcHJvamVjdFRhZztcbiAgbGV0IGxpc3QgPSB0ZExpc3QuZmlsdGVyKCh0ZCkgPT4gdGQucHJvamVjdFRhZyA9PT0gcHJvamVjdFRhZyk7XG4gIHRoaXMudGRMaXN0ID0gbGlzdDtcbn1cblxuZnVuY3Rpb24gVXNlcihuYW1lLCBhdmF0YXIpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5hdmF0YXIgPSBhdmF0YXI7XG59XG5cbi8vSGVscGVyIGZ1bmN0aW9uc1xuZnVuY3Rpb24gZHVlRGF0ZUZvcm1hdChkdWVEYXRlKSB7XG4gIGlmIChkdWVEYXRlID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIGZvcm1hdChuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCksIFwiTS1kZC15XCIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmb3JtYXQobmV3IERhdGUoZHVlRGF0ZSkudG9Mb2NhbGVTdHJpbmcoKSwgXCJNLWRkLXlcIik7XG4gIH1cbn1cblxuZXhwb3J0IHsgVG9kbywgVXNlciwgUHJvamVjdCB9O1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF8sIHsgZm9ybWF0LCBpc0JlZm9yZSwgYWRkRGF5cywgc3ViRGF5cyB9IGZyb20gXCJkYXRlLWZuc1wiO1xuaW1wb3J0IHsgVG9kbywgVXNlciwgUHJvamVjdCB9IGZyb20gXCIuL2NvbnN0cnVjdG9yc1wiO1xuXG4vLyBUZXN0aW5nIEhhcmRjb2RlXG5jb25zdCBtYWluVG9kb0xpc3QgPSBbXTtcblxuaGFyZENvZGVURHMoXG4gIFwiQ3JlYXRlIHVzZXIgY29uc3RydWN0b3JcIixcbiAgXCJDcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHdpbGwgc3RvcmUgdXNlciBpbmZvcm1hdGlvbiBsaWtlIGlkIGFuZCBhdmF0YXJcIixcbiAgXCIwMS0yNS0yMDI0XCIsXG4gIFwiSGlnaFwiLFxuICBcInRlc3Qgbm90ZXNcIixcbiAgXCJUby1kbyBBcHBcIixcbik7XG5oYXJkQ29kZVREcyhcbiAgXCJMb29rIHVwIGRhdGEtZm5zIGxpYnJhcnlcIixcbiAgXCJTZWUgd2hhdCBmdW5jdGlvbnMgYXJlIGF2YWlsYWJsZVwiLFxuICBcIjEyLTI5LTIwMjNcIixcbiAgXCJIaWdoXCIsXG4gIFwiXCIsXG4gIFwiVG8tZG8gQXBwXCIsXG4pO1xuaGFyZENvZGVURHMoXG4gIFwiR28gdG8gdGhlIGd5bVwiLFxuICBcIkNvbXBsZXRlIHRoZSBkYWlseSB3b3Jrb3V0XCIsXG4gIFwiXCIsXG4gIFwiSGlnaFwiLFxuICBcIlwiLFxuICBcIkRhaWx5XCIsXG4pO1xuaGFyZENvZGVURHMoXCJ0ZXN0ZXIxXCIsIFwiY2hlY2tpbmcgZm5cIiwgXCIwNC0xMS0xOTg5XCIsIFwiTG93XCIsIFwiXCIsIFwiVGVzdCAxXCIpO1xuaGFyZENvZGVURHMoXCJ0ZXN0ZXIyXCIsIFwiY2hlY2tpbmcgZm5cIiwgXCIwNS0xOC0yMDIwXCIsIFwiTWVkaXVtXCIsIFwiXCIsIFwiVGVzdCAyXCIpO1xuaGFyZENvZGVURHMoXCJBbHdheXMgdG9kYXlcIiwgXCJhbHdheXMgdG9kYXlcIiwgbmV3IERhdGUoKSwgXCJMb3dcIiwgXCJcIiwgXCJUZXN0IDFcIik7XG5oYXJkQ29kZVREcyhcbiAgXCJUb2RheSBwbHVzIDJcIixcbiAgXCJjaGVja2luZyBmblwiLFxuICBhZGREYXlzKG5ldyBEYXRlKCksIDIpLFxuICBcIkhpZ2hcIixcbiAgXCJcIixcbiAgXCJUZXN0IDJcIixcbik7XG5oYXJkQ29kZVREcyhcbiAgXCJUb2RheSBwbHVzIDVcIixcbiAgXCJjaGVja2luZyBmblwiLFxuICBhZGREYXlzKG5ldyBEYXRlKCksIDUpLFxuICBcIk1lZGl1bVwiLFxuICBcIlwiLFxuICBcIlRlc3QgM1wiLFxuKTtcbmhhcmRDb2RlVERzKFxuICBcInJlYWQgdGhlIG5ld3NwYXBlclwiLFxuICBcIkNvbXBsZXRlIHRoZSBkYWlseSB3b3Jrb3V0XCIsXG4gIFwiXCIsXG4gIFwiTWVkaXVtXCIsXG4gIFwiXCIsXG4gIFwiRGFpbHlcIixcbik7XG5oYXJkQ29kZVREcyhcbiAgXCJCdXkgYSB5YWNodFwiLFxuICBcIkNvbXBsZXRlIHRoZSBkYWlseSB3b3Jrb3V0XCIsXG4gIFwiXCIsXG4gIFwiTG93XCIsXG4gIFwiXCIsXG4gIFwiRGFpbHlcIixcbik7XG5cbi8vIEZ1bmN0aW9uc1xuZnVuY3Rpb24gaGFyZENvZGVURHMoIHRpdGxlLCBkZXNjcmlwdCwgZHVlRGF0ZSwgcHJpb3JpdHksIHRvZG9zLCBub3RlcywgcHJvamVjdFRhZywpIHtcbiAgY29uc3QgbmV3VG9kbyA9IG5ldyBUb2RvKHRpdGxlLCBkZXNjcmlwdCwgZHVlRGF0ZSwgcHJpb3JpdHksIHRvZG9zLCBub3RlcywgcHJvamVjdFRhZywpO1xuICBtYWluVG9kb0xpc3QucHVzaChuZXdUb2RvKTtcbiAgbWFpblRvZG9MaXN0LnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGEuZHVlRGF0ZSkgLSBuZXcgRGF0ZShiLmR1ZURhdGUpKTtcbiAgaW5kZXhMaXN0KG1haW5Ub2RvTGlzdCk7XG4gIHJldHVybiBtYWluVG9kb0xpc3Q7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZVRvZG8odGRUaXRsZSwgdGRMaXN0KSB7XG4gIC8vIFJlbW92ZSBmcm9tIG1haW4gbGlzdFxuICBjb25zdCB0ZEluZGV4ID0gdGRMaXN0LmZpbmRJbmRleCgodGRPYmplY3QpID0+IHRkT2JqZWN0LnRpdGxlID09PSB0ZFRpdGxlKTtcbiAgdGRMaXN0LnNwbGljZSh0ZEluZGV4LCAxKTtcbiAgdGRMaXN0LnNvcnQoKGEsIGIpID0+IGEuZHVlRGF0ZSAtIGIuZHVlRGF0ZSk7XG4gIC8vIFJlbW92ZSBmcm9tIG1haW4gZGlzcGxheVxufVxuXG5mdW5jdGlvbiBjcmVhdGVPdmVyRHVlTGlzdCh0ZExpc3QpIHtcbiAgY29uc3Qgb3ZlcmR1ZUxpc3QgPSB0ZExpc3QuZmlsdGVyKCh0ZCkgPT5cbiAgICBpc0JlZm9yZSh0ZC5kdWVEYXRlLCBzdWJEYXlzKG5ldyBEYXRlKCksIDEpKSxcbiAgKTtcbiAgcmV0dXJuIG92ZXJkdWVMaXN0O1xufVxuXG5mdW5jdGlvbiBjaGVja0lmT3ZlcmR1ZSh0ZE9iamVjdCkge1xuICByZXR1cm4gaXNCZWZvcmUodGRPYmplY3QuZHVlRGF0ZSwgc3ViRGF5cyhuZXcgRGF0ZSgpLCAxKSk7XG59XG5cbmZ1bmN0aW9uIGFkZE92ZXJkdWVDbGFzcyh0ZExpc3QpIHtcbiAgY29uc3Qgb3ZlcmR1ZUxpc3QgPSBbXTtcbiAgdGRMaXN0LmZvckVhY2goKHRkT2JqZWN0KSA9PiB7XG4gICAgaWYgKGNoZWNrSWZPdmVyZHVlKHRkT2JqZWN0KSkge1xuICAgICAgb3ZlcmR1ZUxpc3QucHVzaCh0ZE9iamVjdFtcImRhdGEtaW5kZXhcIl0udG9TdHJpbmcoKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZGl2TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG9kb1wiKTtcbiAgZGl2TGlzdC5mb3JFYWNoKChkaXYpID0+IHtcbiAgICBjb25zdCB0ZEluZGV4ID0gZGl2LmdldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIik7XG4gICAgaWYgKG92ZXJkdWVMaXN0LmluY2x1ZGVzKHRkSW5kZXgpKSB7XG4gICAgICBkaXYuY2xhc3NMaXN0LmFkZChcIm92ZXJkdWVcIik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5kZXhMaXN0KHRkTGlzdCkge1xuICB0ZExpc3QuZm9yRWFjaCgodGRPYmplY3QpID0+IHtcbiAgICB0ZE9iamVjdFtcImRhdGEtaW5kZXhcIl0gPSB0ZExpc3QuZmluZEluZGV4KCh0ZCkgPT4gdGQudGl0bGUgPT09IHRkT2JqZWN0LnRpdGxlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRvZGF5TGlzdCh0ZExpc3QpIHtcbiAgY29uc3QgdG9kYXlMaXN0ID0gdGRMaXN0LmZpbHRlcihcbiAgICAodGQpID0+XG4gICAgICB0ZC5kdWVEYXRlID09PSBmb3JtYXQobmV3IERhdGUoKSwgXCJNLWRkLXlcIikgJiYgdGQucHJvamVjdFRhZyAhPT0gXCJEYWlseVwiLFxuICApO1xuICByZXR1cm4gdG9kYXlMaXN0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUaGlzV2Vla0xpc3QodGRMaXN0KSB7XG4gIGNvbnN0IHRoaXNXZWVrTGlzdCA9IHRkTGlzdC5maWx0ZXIoXG4gICAgKHRkKSA9PlxuICAgICAgdGQuZHVlRGF0ZSA+PSBmb3JtYXQobmV3IERhdGUoKSwgXCJNLWRkLXlcIikgJiZcbiAgICAgIHRkLmR1ZURhdGUgPD0gZm9ybWF0KGFkZERheXMobmV3IERhdGUoKSwgNyksIFwiTS1kZC15XCIpICYmXG4gICAgICB0ZC5wcm9qZWN0VGFnICE9PSBcIkRhaWx5XCIsXG4gICk7XG4gIHJldHVybiB0aGlzV2Vla0xpc3Q7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhaWx5TGlzdCh0ZExpc3QpIHtcbiAgY29uc3QgZGFpbHlMaXN0ID0gdGRMaXN0LmZpbHRlcigodGQpID0+IHRkLnByb2plY3RUYWcgPT09IFwiRGFpbHlcIik7XG4gIHJldHVybiBkYWlseUxpc3Q7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3RUYWdMaXN0KHRkTGlzdCkge1xuICBjb25zdCBwcm9qZWN0VGFnTGlzdCA9IFtdO1xuICB0ZExpc3QuZm9yRWFjaCgodGRPYmplY3QpID0+IHtcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gdGRPYmplY3QucHJvamVjdFRhZztcbiAgICBpZiAoXG4gICAgICBuZXdQcm9qZWN0ICE9PSBcIkRhaWx5XCIgJiZcbiAgICAgIG5ld1Byb2plY3QgIT09IFwiXCIgJiZcbiAgICAgICFwcm9qZWN0VGFnTGlzdC5pbmNsdWRlcyhuZXdQcm9qZWN0KVxuICAgICkge1xuICAgICAgcHJvamVjdFRhZ0xpc3QucHVzaChuZXdQcm9qZWN0KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJvamVjdFRhZ0xpc3Q7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3RMaXN0KHRkTGlzdCwgcHJvamVjdFRhZykge1xuICBjb25zdCBwcm9qZWN0TGlzdCA9IHRkTGlzdC5maWx0ZXIoKHRkKSA9PiB0ZC5wcm9qZWN0VGFnID09PSBwcm9qZWN0VGFnKTtcbiAgcmV0dXJuIHByb2plY3RMaXN0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0VERMaXN0cyh0ZExpc3QpIHtcbiAgY29uc3QgcHJvamVjdFRhZ0xpc3QgPSBjcmVhdGVQcm9qZWN0VGFnTGlzdCh0ZExpc3QpO1xuICBjb25zdCBwcm9qZWN0VGRMaXN0cyA9IFtdO1xuICBwcm9qZWN0VGFnTGlzdC5mb3JFYWNoKChwcm9qZWN0VGFnKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFByb2plY3QgPSBuZXcgUHJvamVjdChwcm9qZWN0VGFnLCB0ZExpc3QpO1xuICAgIHByb2plY3RUZExpc3RzLnB1c2goY3VycmVudFByb2plY3QpO1xuICB9KTtcbiAgcmV0dXJuIHByb2plY3RUZExpc3RzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVRdWFkTGlzdHModGRMaXN0KSB7XG4gIGNvbnN0IHVyZ2VuY3lEYXRlID0gYWRkRGF5cyhuZXcgRGF0ZSgpLCAxMCk7XG4gIGNvbnN0IHF1YWQxID0gdGRMaXN0LmZpbHRlcihcbiAgICAodGQpID0+XG4gICAgICB0ZC5wcmlvcml0eSA9PT0gXCJIaWdoXCIgJiYgdGQuZHVlRGF0ZSA8PSBmb3JtYXQodXJnZW5jeURhdGUsIFwiTS1kZC15XCIpLFxuICApO1xuICBjb25zdCBxdWFkMiA9IHRkTGlzdC5maWx0ZXIoXG4gICAgKHRkKSA9PlxuICAgICAgKHRkLnByaW9yaXR5ID09PSBcIkhpZ2hcIiAmJiB0ZC5kdWVEYXRlID4gZm9ybWF0KHVyZ2VuY3lEYXRlLCBcIk0tZGQteVwiKSkgfHxcbiAgICAgICh0ZC5wcmlvcml0eSA9PT0gXCJNZWRpdW1cIiAmJiB0ZC5kdWVEYXRlID4gZm9ybWF0KHVyZ2VuY3lEYXRlLCBcIk0tZGQteVwiKSksXG4gICk7XG4gIGNvbnN0IHF1YWQzID0gdGRMaXN0LmZpbHRlcihcbiAgICAodGQpID0+XG4gICAgICAodGQucHJpb3JpdHkgPT09IFwiTG93XCIgJiYgdGQuZHVlRGF0ZSA8PSBmb3JtYXQodXJnZW5jeURhdGUsIFwiTS1kZC15XCIpKSB8fFxuICAgICAgKHRkLnByaW9yaXR5ID09PSBcIk1lZGl1bVwiICYmIHRkLmR1ZURhdGUgPD0gZm9ybWF0KHVyZ2VuY3lEYXRlLCBcIk0tZGQteVwiKSksXG4gICk7XG4gIGNvbnN0IHF1YWQ0ID0gdGRMaXN0LmZpbHRlcihcbiAgICAodGQpID0+IHRkLnByaW9yaXR5ID09PSBcIkxvd1wiICYmIHRkLmR1ZURhdGUgPiBmb3JtYXQodXJnZW5jeURhdGUsIFwiTS1kZC15XCIpLFxuICApO1xuICBjb25zdCBxdWFkTGlzdHMgPSBbcXVhZDEsIHF1YWQyLCBxdWFkMywgcXVhZDRdO1xuICByZXR1cm4gcXVhZExpc3RzO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9qZWN0U3RhdHMocHJvamVjdExpc3QpIHtcbiAgY29uc3QgY29tcGxldGVkVGRzID0gcHJvamVjdExpc3QuZmlsdGVyKCh0ZCkgPT4gdGQuc3RhdHVzID09PSBcImNvbXBsZXRlXCIpO1xuICBjb25zdCBudW1Db21wbGV0ZWQgPSBjb21wbGV0ZWRUZHMubGVuZ3RoO1xuICBjb25zdCBudW1UZHMgPSBwcm9qZWN0TGlzdC5sZW5ndGg7XG4gIGNvbnN0IHF1YWRMaXN0cyA9IGNyZWF0ZVF1YWRMaXN0cyhwcm9qZWN0TGlzdCk7XG4gIGNvbnN0IG51bVExID0gcXVhZExpc3RzWzBdLmxlbmd0aDtcbiAgY29uc3QgbnVtUTIgPSBxdWFkTGlzdHNbMV0ubGVuZ3RoO1xuICBjb25zdCBudW1RMyA9IHF1YWRMaXN0c1syXS5sZW5ndGg7XG4gIGNvbnN0IG51bVE0ID0gcXVhZExpc3RzWzNdLmxlbmd0aDtcbiAgcmV0dXJuIHsgbnVtVGRzLCBudW1Db21wbGV0ZWQsIG51bVExLCBudW1RMiwgbnVtUTMsIG51bVE0IH07XG59XG4vLyBleHBvcnRzXG5cbmV4cG9ydCB7XG4gIG1haW5Ub2RvTGlzdCxcbiAgY3JlYXRlVG9kYXlMaXN0LFxuICBjcmVhdGVUaGlzV2Vla0xpc3QsXG4gIGNyZWF0ZURhaWx5TGlzdCxcbiAgZGVsZXRlVG9kbyxcbiAgaW5kZXhMaXN0LFxuICBhZGRPdmVyZHVlQ2xhc3MsXG4gIGNyZWF0ZVF1YWRMaXN0cyxcbiAgY3JlYXRlUHJvamVjdFRhZ0xpc3QsXG4gIGNyZWF0ZVByb2plY3RMaXN0LFxuICBnZXRQcm9qZWN0U3RhdHMsXG4gIGNyZWF0ZVByb2plY3RURExpc3RzLFxufTtcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBpc0JlZm9yZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0aGF0IHNob3VsZCBiZSBiZWZvcmUgdGhlIG90aGVyIG9uZSB0byByZXR1cm4gdHJ1ZVxuICogQHBhcmFtIGRhdGVUb0NvbXBhcmUgLSBUaGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqXG4gKiBAcmV0dXJucyBUaGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBkYXRlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElzIDEwIEp1bHkgMTk4OSBiZWZvcmUgMTEgRmVicnVhcnkgMTk4Nz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzQmVmb3JlKG5ldyBEYXRlKDE5ODksIDYsIDEwKSwgbmV3IERhdGUoMTk4NywgMSwgMTEpKVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCZWZvcmUoZGF0ZSwgZGF0ZVRvQ29tcGFyZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgX2RhdGVUb0NvbXBhcmUgPSB0b0RhdGUoZGF0ZVRvQ29tcGFyZSk7XG4gIHJldHVybiArX2RhdGUgPCArX2RhdGVUb0NvbXBhcmU7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgaXNCZWZvcmU7XG4iLCJpbXBvcnQgeyBhZGREYXlzIH0gZnJvbSBcIi4vYWRkRGF5cy5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdWJEYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSBhbW91bnQgLSBUaGUgYW1vdW50IG9mIGRheXMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICpcbiAqIEByZXR1cm5zIFRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBkYXlzIHN1YnRyYWN0ZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgMTAgZGF5cyBmcm9tIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJEYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gRnJpIEF1ZyAyMiAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJEYXlzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkRGF5cyhkYXRlLCAtYW1vdW50KTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdWJEYXlzO1xuIiwiaW1wb3J0IHsgZm9ybWF0LCBhZGREYXlzIH0gZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgeyBtYWluVG9kb0xpc3QsIGluZGV4TGlzdCwgY3JlYXRlUHJvamVjdFRhZ0xpc3QgfSBmcm9tIFwiLi9hcHBsb2dpY1wiO1xuaW1wb3J0IHsgVG9kbyB9IGZyb20gXCIuL2NvbnN0cnVjdG9yc1wiO1xuXG5cblxuLy8gTmV3IFRvZG9cbmZ1bmN0aW9uIGNyZWF0ZU5ld1RvZG9Gb3JtKHRkTGlzdCkge1xuICBjb25zdCBkaWFsb2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGlhbG9nXCIpO1xuICBkaWFsb2cuY2xhc3NMaXN0LmFkZChcIm1vZGFsXCIpO1xuICBkaWFsb2cuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJuZXdUb2RvRGlhbG9nXCIpO1xuXG4gIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgZm9ybS5zZXRBdHRyaWJ1dGUoXCJtZXRob2RcIiwgXCJkaWFsb2dcIik7XG4gIGZvcm0uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJteUZvcm1cIik7XG5cbiAgY29uc3QgdGl0bGVSb3cgPSBjcmVhdGVGb3JtUm93KFwidGQtdGl0bGVcIiwgXCJUaXRsZSBvZiBUb2RvXCIsIFwidGV4dFwiKTtcbiAgY29uc3QgZGVzY3JpcHRSb3cgPSBjcmVhdGVGb3JtUm93KFxuICAgIFwidGQtZGVzY3JpcHRpb25cIixcbiAgICBcIkRlc2NyaXB0aW9uIG9mIFRvZG9cIixcbiAgICBcInRleHRcIixcbiAgKTtcbiAgY29uc3QgZGF0ZVJvdyA9IGNyZWF0ZUZvcm1Sb3coXCJ0ZC1kdWVEYXRlXCIsIFwiRHVlIERhdGU6XCIsIFwiZGF0ZVwiKTtcbiAgY29uc3QgcHJpb3JpdHlSb3cgPSBjcmVhdGVTZWxlY3RGb3JtUm93KFwidGQtcHJpb3JpdHlcIiwgXCJQcmlvcml0eVwiLCBbXG4gICAgXCJIaWdoXCIsXG4gICAgXCJNZWRpdW1cIixcbiAgICBcIkxvd1wiLFxuICBdKTtcbiAgY29uc3QgcHJvamVjdFJvdyA9IGNyZWF0ZVNlbGVjdEZvcm1Sb3coXG4gICAgXCJ0ZC1wcm9qZWN0VGFnXCIsXG4gICAgXCJQcm9qZWN0XCIsXG4gICAgY3JlYXRlUHJvamVjdFRhZ0xpc3QodGRMaXN0KSxcbiAgKTtcblxuICBjb25zdCBidG5Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBidG5Db250YWluZXIuY2xhc3NMaXN0LmFkZChcImZvcm0tYnV0dG9uc1wiKTtcblxuICBjb25zdCBjYW5jZWxCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjYW5jZWxCdG4uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjYW5jZWxCdG5cIik7XG4gIGNhbmNlbEJ0bi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcImNhbmNlbFwiKTtcbiAgY2FuY2VsQnRuLnNldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIiwgXCJkaWFsb2dcIik7XG4gIGNhbmNlbEJ0bi50ZXh0Q29udGVudCA9IFwiQ2FuY2VsXCI7XG5cbiAgY29uc3QgY29uZmlybUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIGNvbmZpcm1CdG4uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjb25maXJtQnRuXCIpO1xuICBjb25maXJtQnRuLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiZGVmYXVsdFwiKTtcbiAgY29uZmlybUJ0bi50ZXh0Q29udGVudCA9IFwiQ29uZmlybVwiO1xuXG4gIGJ0bkNvbnRhaW5lci5hcHBlbmRDaGlsZChjYW5jZWxCdG4pO1xuICBidG5Db250YWluZXIuYXBwZW5kQ2hpbGQoY29uZmlybUJ0bik7XG4gIGZvcm0uYXBwZW5kQ2hpbGQodGl0bGVSb3cpO1xuICBmb3JtLmFwcGVuZENoaWxkKGRlc2NyaXB0Um93KTtcbiAgZm9ybS5hcHBlbmRDaGlsZChkYXRlUm93KTtcbiAgZm9ybS5hcHBlbmRDaGlsZChwcmlvcml0eVJvdyk7XG4gIGZvcm0uYXBwZW5kQ2hpbGQocHJvamVjdFJvdyk7XG4gIGZvcm0uYXBwZW5kQ2hpbGQoYnRuQ29udGFpbmVyKTtcbiAgZGlhbG9nLmFwcGVuZENoaWxkKGZvcm0pO1xuICByZXR1cm4gZGlhbG9nO1xufVxuXG5mdW5jdGlvbiBhZGROZXdUb2RvKHRkTGlzdCkge1xuICBjb25zdCB0ZFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZC10aXRsZVwiKS52YWx1ZTtcbiAgY29uc3QgdGRkZXNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGQtZGVzY3JpcHRpb25cIikudmFsdWU7XG4gIGNvbnN0IHRkZHVlRGF0ZSA9IGZvcm1hdChcbiAgICBhZGREYXlzKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGQtZHVlRGF0ZVwiKS52YWx1ZSwgMSksXG4gICAgXCJNLWRkLXlcIixcbiAgKTtcbiAgY29uc3QgdGRwcmlvcml0eSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGQtcHJpb3JpdHlcIikudmFsdWU7XG4gIGNvbnN0IHRkcHJvamVjdFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGQtcHJvamVjdFRhZ1wiKS52YWx1ZTtcbiAgY29uc3QgbmV3VG9kbyA9IG5ldyBUb2RvKHRkVGl0bGUsdGRkZXNjcmlwdCwgdGRkdWVEYXRlLHRkcHJpb3JpdHksW10sXCJcIix0ZHByb2plY3RUYWcsKTtcbiAgdGRMaXN0LnB1c2gobmV3VG9kbyk7XG4gIHRkTGlzdC5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShhLmR1ZURhdGUpIC0gbmV3IERhdGUoYi5kdWVEYXRlKSk7XG4gIGluZGV4TGlzdCh0ZExpc3QpO1xuICByZXR1cm4gbmV3VG9kbztcbn1cblxuZnVuY3Rpb24gYWRkTmVzdGVkVG9kbyhcbiAgaW5kZXgsXG4gIHRpdGxlLFxuICBkZXNjcmlwdGlvbixcbiAgZHVlRGF0ZSxcbiAgcHJpb3JpdHksXG4gIHRvZG9zLFxuICBub3RlcyxcbiAgcHJvamVjdFRhZyxcbikge1xuICBjb25zdCBuZXN0ZWRUb2RvID0gbmV3IFRvZG8oXG4gICAgdGl0bGUsXG4gICAgZGVzY3JpcHRpb24sXG4gICAgZHVlRGF0ZSxcbiAgICBwcmlvcml0eSxcbiAgICB0b2RvcyxcbiAgICBub3RlcyxcbiAgICBwcm9qZWN0VGFnLFxuICApO1xuICBjb25zdCBuZXN0ZWRUZExpc3QgPSBtYWluVG9kb0xpc3RbaW5kZXhdLnRvZG9zO1xuICBuZXN0ZWRUZExpc3QucHVzaChuZXN0ZWRUb2RvKTtcbiAgLy8gdGRPYmplY3QudG9kb3Muc29ydCgoYSxiKT0+YS5kdWVEYXRlLWIuZHVlRGF0ZSk7XG59XG5cbi8vIGhlbHBlciBmdW5jdGlvbnNcbmZ1bmN0aW9uIGNyZWF0ZUZvcm1Sb3coaWQsIHRpdGxlLCBpVHlwZSkge1xuICBjb25zdCBmb3JtUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZm9ybVJvdy5jbGFzc0xpc3QuYWRkKFwiZm9ybS1yb3dcIik7XG5cbiAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gIGxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBpZCk7XG4gIGxhYmVsLnRleHRDb250ZW50ID0gdGl0bGU7XG5cbiAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgaVR5cGUpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIGlkKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xuXG4gIGZvcm1Sb3cuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICBmb3JtUm93LmFwcGVuZENoaWxkKGlucHV0KTtcbiAgcmV0dXJuIGZvcm1Sb3c7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdEZvcm1Sb3coaWQsIHRpdGxlLCBvcHRpb25zTGlzdCkge1xuICBjb25zdCBmb3JtUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZm9ybVJvdy5jbGFzc0xpc3QuYWRkKFwiZm9ybS1yb3dcIik7XG5cbiAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gIGxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBpZCk7XG4gIGxhYmVsLnRleHRDb250ZW50ID0gdGl0bGU7XG5cbiAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgc2VsZWN0LnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcbiAgc2VsZWN0LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgaWQpO1xuXG4gIG9wdGlvbnNMaXN0LmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgIGN1cnJlbnRPcHRpb24udGV4dENvbnRlbnQgPSBvcHRpb247XG4gICAgc2VsZWN0LmFwcGVuZENoaWxkKGN1cnJlbnRPcHRpb24pO1xuICB9KTtcblxuICBmb3JtUm93LmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgZm9ybVJvdy5hcHBlbmRDaGlsZChzZWxlY3QpO1xuICByZXR1cm4gZm9ybVJvdztcbn1cblxuZXhwb3J0IHsgY3JlYXRlTmV3VG9kb0Zvcm0sIGFkZE5ld1RvZG8gfTtcbiIsImltcG9ydCB7IGNyZWF0ZU5ld1RvZG9Gb3JtIH0gZnJvbSBcIi4vbmV3VERcIjtcbmltcG9ydCB7IGVkaXRUb2RvRm9ybSB9IGZyb20gXCIuL2VkaXRURFwiO1xuXG5jb25zdCBjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250ZW50XCIpO1xuXG4vLyBIZWFkZXJcblxuZnVuY3Rpb24gY3JlYXRlSGVhZGVyKCkge1xuICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBoZWFkZXIuY2xhc3NMaXN0LmFkZChcImhlYWRlclwiKTtcblxuICBjb25zdCBsb2dvVGl0bGVCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBsb2dvVGl0bGVCb3guY2xhc3NMaXN0LmFkZChcImx0Ym94XCIpO1xuXG4gIGNvbnN0IGxvZ28gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICBsb2dvLmNsYXNzTGlzdC5hZGQoXCJsb2dvXCIpO1xuICBsb2dvLnNyYyA9IFwiLi4vc3JjL0ltYWdlcy9sb2dvLnBuZ1wiO1xuXG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwidGl0bGVcIik7XG4gIHRpdGxlLnRleHRDb250ZW50ID0gXCJDaGVjay1JdFwiO1xuXG4gIGNvbnN0IGhlYWRlclJpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgaGVhZGVyUmlnaHQuY2xhc3NMaXN0LmFkZChcImhlYWRlci1yaWdodFwiKTtcblxuICBjb25zdCB1c2VyRGlzcGxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHVzZXJEaXNwbGF5LmNsYXNzTGlzdC5hZGQoXCJ1c2VyRGlzcGxheVwiKTtcbiAgdXNlckRpc3BsYXkudGV4dENvbnRlbnQgPSBcIlVzZXIgbmFtZSBhbmQgYXZhdGFyIGdvIGhlcmVcIjtcblxuICBjb25zdCBkaXNwbGF5VG9nZ2xlQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBkaXNwbGF5VG9nZ2xlQm94LmNsYXNzTGlzdC5hZGQoXCJ0b2dnbGUtYm94XCIpO1xuICBjb25zdCB0b2dnbGVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIHRvZ2dsZUJ0bi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiY2hlY2tib3hcIik7XG4gIHRvZ2dsZUJ0bi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInRvZ2dsZS1jaGVja2JveFwiKTtcbiAgY29uc3QgdG9nZ2xlQ2lyY2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdG9nZ2xlQ2lyY2xlLmNsYXNzTGlzdC5hZGQoXCJjaXJjbGVcIik7XG5cbiAgZGlzcGxheVRvZ2dsZUJveC5hcHBlbmRDaGlsZCh0b2dnbGVCdG4pO1xuICBkaXNwbGF5VG9nZ2xlQm94LmFwcGVuZENoaWxkKHRvZ2dsZUNpcmNsZSk7XG4gIGhlYWRlclJpZ2h0LmFwcGVuZENoaWxkKHVzZXJEaXNwbGF5KTtcbiAgaGVhZGVyUmlnaHQuYXBwZW5kQ2hpbGQoZGlzcGxheVRvZ2dsZUJveCk7XG5cbiAgbG9nb1RpdGxlQm94LmFwcGVuZENoaWxkKGxvZ28pO1xuICBsb2dvVGl0bGVCb3guYXBwZW5kQ2hpbGQodGl0bGUpO1xuICBoZWFkZXIuYXBwZW5kQ2hpbGQobG9nb1RpdGxlQm94KTtcbiAgaGVhZGVyLmFwcGVuZENoaWxkKGhlYWRlclJpZ2h0KTtcbiAgcmV0dXJuIGhlYWRlcjtcbn1cblxuLy8gTmF2IEJhclxuXG5mdW5jdGlvbiBjcmVhdGVOYXZCYXIoKSB7XG4gIGNvbnN0IG5hdkJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIG5hdkJhci5jbGFzc0xpc3QuYWRkKFwibmF2QmFyXCIpO1xuXG4gIGNvbnN0IHRvZGF5QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgdG9kYXlCdG4uY2xhc3NMaXN0LmFkZChcImJ1dHRvblwiKTtcbiAgdG9kYXlCdG4uY2xhc3NMaXN0LmFkZChcIm5hdkJ0blwiKTtcbiAgdG9kYXlCdG4uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ0b2RheUJ0blwiKTtcbiAgdG9kYXlCdG4udGV4dENvbnRlbnQgPSBcIlRvZGF5XCI7XG5cbiAgY29uc3Qgd2Vla0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIHdlZWtCdG4uY2xhc3NMaXN0LmFkZChcImJ1dHRvblwiKTtcbiAgd2Vla0J0bi5jbGFzc0xpc3QuYWRkKFwibmF2QnRuXCIpO1xuICB3ZWVrQnRuLnNldEF0dHJpYnV0ZShcImlkXCIsIFwid2Vla2x5XCIpO1xuICB3ZWVrQnRuLnRleHRDb250ZW50ID0gXCJUaGlzIFdlZWtcIjtcblxuICBjb25zdCBhbGxCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBhbGxCdG4uY2xhc3NMaXN0LmFkZChcImJ1dHRvblwiKTtcbiAgYWxsQnRuLmNsYXNzTGlzdC5hZGQoXCJuYXZCdG5cIik7XG4gIGFsbEJ0bi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImFsbFwiKTtcbiAgYWxsQnRuLnRleHRDb250ZW50ID0gXCJBbGwgVGFza3NcIjtcblxuICBjb25zdCBkYWlseUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIGRhaWx5QnRuLmNsYXNzTGlzdC5hZGQoXCJidXR0b25cIik7XG4gIGRhaWx5QnRuLmNsYXNzTGlzdC5hZGQoXCJuYXZCdG5cIik7XG4gIGRhaWx5QnRuLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZGFpbHlcIik7XG4gIGRhaWx5QnRuLnRleHRDb250ZW50ID0gXCJEYWlseSBUYXNrc1wiO1xuXG4gIGNvbnN0IHByb2plY3RCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBwcm9qZWN0QnRuLmNsYXNzTGlzdC5hZGQoXCJidXR0b25cIik7XG4gIHByb2plY3RCdG4uY2xhc3NMaXN0LmFkZChcIm5hdkJ0blwiKTtcbiAgcHJvamVjdEJ0bi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInByb2plY3RzXCIpO1xuICBwcm9qZWN0QnRuLnRleHRDb250ZW50ID0gXCJQcm9qZWN0c1wiO1xuXG4gIGNvbnN0IG5ld1REID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgbmV3VEQuY2xhc3NMaXN0LmFkZChcImJ1dHRvblwiKTtcbiAgbmV3VEQuY2xhc3NMaXN0LmFkZChcIm5hdkJ0blwiKTtcbiAgbmV3VEQuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJuZXctdG9kby1idG5cIik7XG4gIG5ld1RELnRleHRDb250ZW50ID0gXCIrIEFkZCBOZXcgVG9kb1wiO1xuXG4gIG5hdkJhci5hcHBlbmRDaGlsZCh0b2RheUJ0bik7XG4gIG5hdkJhci5hcHBlbmRDaGlsZCh3ZWVrQnRuKTtcbiAgbmF2QmFyLmFwcGVuZENoaWxkKGFsbEJ0bik7XG4gIG5hdkJhci5hcHBlbmRDaGlsZChkYWlseUJ0bik7XG4gIG5hdkJhci5hcHBlbmRDaGlsZChwcm9qZWN0QnRuKTtcbiAgbmF2QmFyLmFwcGVuZENoaWxkKG5ld1REKTtcbiAgcmV0dXJuIG5hdkJhcjtcbn1cblxuLy8gTWFpbiBEaXZcbmZ1bmN0aW9uIGNyZWF0ZU1haW5EaXYoKSB7XG4gIGNvbnN0IG1haW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBtYWluLmNsYXNzTGlzdC5hZGQoXCJtYWluXCIpO1xuICBtYWluLnNldEF0dHJpYnV0ZShcImlkXCIsIFwibWFpblwiKTtcbiAgcmV0dXJuIG1haW47XG59XG5cbi8vIEZvb3RlclxuZnVuY3Rpb24gY3JlYXRlRm9vdGVyKCkge1xuICBjb25zdCBmb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBmb290ZXIuY2xhc3NMaXN0LmFkZChcImZvb3RlclwiKTtcbiAgZm9vdGVyLnRleHRDb250ZW50ID0gXCJtYWRlIGJ5IE1zYW1iZXJlXCI7XG4gIHJldHVybiBmb290ZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpdGUodGRMaXN0KSB7XG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQoY3JlYXRlSGVhZGVyKCkpO1xuICBjb250ZW50LmFwcGVuZENoaWxkKGNyZWF0ZU5hdkJhcigpKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChjcmVhdGVNYWluRGl2KCkpO1xuICBjb250ZW50LmFwcGVuZENoaWxkKGNyZWF0ZUZvb3RlcigpKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChjcmVhdGVOZXdUb2RvRm9ybSh0ZExpc3QpKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChlZGl0VG9kb0Zvcm0oKSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVNpdGUgfTtcbiIsImltcG9ydCB7XG4gIGNyZWF0ZVByb2plY3RUYWdMaXN0LFxuICBjcmVhdGVQcm9qZWN0VERMaXN0cyxcbiAgZ2V0UHJvamVjdFN0YXRzLFxufSBmcm9tIFwiLi9hcHBsb2dpY1wiO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVF1YWREYXRlU2VsZWN0b3IoKSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZGF0ZS1zZWxlY3Rvci1kaXZcIik7XG5cbiAgY29uc3QgZGF0ZVNlbGVjdG9yTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gIGRhdGVTZWxlY3RvckxhYmVsLmNsYXNzTGlzdC5hZGQoXCJkYXRlLXNlbGVjdG9yXCIpO1xuICBkYXRlU2VsZWN0b3JMYWJlbC50ZXh0Q29udGVudCA9IFwiQ2hvb3NlIHRoZSBkYXRlIGN1dCBvZmYgZm9yIHVyZ2VuY3k6ICAgXCI7XG4gIGNvbnN0IGRhdGVTZWxlY3RvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgZGF0ZVNlbGVjdG9yLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJkYXRlXCIpO1xuICBkYXRlU2VsZWN0b3Iuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJkYXRlLXNlbGVjdG9yXCIpO1xuXG4gIGRhdGVTZWxlY3RvckxhYmVsLmFwcGVuZENoaWxkKGRhdGVTZWxlY3Rvcik7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkYXRlU2VsZWN0b3JMYWJlbCk7XG4gIHJldHVybiBjb250YWluZXI7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUHJvamVjdE92ZXJ2aWV3c0Rpc3BsYXkodGRMaXN0KSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwicHJvamVjdE92ZXJ2aWV3cy1jb250YWluZXJcIik7XG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibGlzdC1kaXNwbGF5XCIpO1xuICBjb25zdCBwcm9qZWN0T2JqZWN0TGlzdCA9IGNyZWF0ZVByb2plY3RURExpc3RzKHRkTGlzdCk7XG4gIHByb2plY3RPYmplY3RMaXN0LmZvckVhY2goKG9iamVjdCkgPT4ge1xuICAgIGNvbnN0IGRpdiA9IGdlbmVyYXRlU3RhdHNEaXYob2JqZWN0KTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgfSk7XG4gIHJldHVybiBjb250YWluZXI7XG59XG5cbmZ1bmN0aW9uIHRhc2tHcmFtbWFyKG51bSkge1xuICBsZXQgdGFzayA9IFwiXCI7XG4gIGlmIChudW0gPT09IDEpIHtcbiAgICB0YXNrID0gXCJ0YXNrIGlzXCI7XG4gIH0gZWxzZSB7XG4gICAgdGFzayA9IFwidGFza3MgYXJlXCI7XG4gIH1cbiAgcmV0dXJuIHRhc2s7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3RhdHNEaXYocHJvamVjdE9iamVjdCkge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcInByb2plY3Qtb3ZlcnZpZXdcIik7XG4gIGNvbnN0IHRpdGxlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICB0aXRsZURpdi5jbGFzc0xpc3QuYWRkKFwib3ZlcnZpZXctdGl0bGVcIik7XG4gIHRpdGxlRGl2LnRleHRDb250ZW50ID0gcHJvamVjdE9iamVjdC5wcm9qZWN0VGFnO1xuICBjb25zdCBwcm9qZWN0U3RhdHMgPSBnZXRQcm9qZWN0U3RhdHMocHJvamVjdE9iamVjdC50ZExpc3QpO1xuXG4gIGNvbnN0IGNvbXBsZXRlbmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb21wbGV0ZW5lc3MudGV4dENvbnRlbnQgPSBgJHtwcm9qZWN0U3RhdHMubnVtQ29tcGxldGVkfSAvICR7cHJvamVjdFN0YXRzLm51bVRkc30gdGFza3MgY29tcGxldGVkYDtcblxuICBjb25zdCBxMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb25zdCB0YXNrMSA9IHRhc2tHcmFtbWFyKHByb2plY3RTdGF0cy5udW1RMSk7XG4gIHExLnRleHRDb250ZW50ID0gYCR7cHJvamVjdFN0YXRzLm51bVExfSAgJHt0YXNrMX0gdXJnZW50IGFuZCBpbXBvcnRhbnQuYDtcblxuICBjb25zdCBxMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb25zdCB0YXNrMiA9IHRhc2tHcmFtbWFyKHByb2plY3RTdGF0cy5udW1RMik7XG4gIHEyLnRleHRDb250ZW50ID0gYCR7cHJvamVjdFN0YXRzLm51bVEyfSAke3Rhc2syfSBub3QgdXJnZW50IGFuZCBpbXBvcnRhbnQuYDtcblxuICBjb25zdCBxMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBjb25zdCB0YXNrMyA9IHRhc2tHcmFtbWFyKHByb2plY3RTdGF0cy5udW1RMyk7XG4gIHEzLnRleHRDb250ZW50ID0gYCR7cHJvamVjdFN0YXRzLm51bVEzfSAke3Rhc2szfSB1cmdlbnQgYW5kIHVuaW1wb3J0YW50LmA7XG5cbiAgY29uc3QgcTQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgY29uc3QgdGFzazQgPSB0YXNrR3JhbW1hcihwcm9qZWN0U3RhdHMubnVtUTQpO1xuICBxNC50ZXh0Q29udGVudCA9IGAke3Byb2plY3RTdGF0cy5udW1RNH0gJHt0YXNrNH0gbm90IHVyZ2VudCBhbmQgdW5pbXBvcnRhbnQuYDtcblxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGl0bGVEaXYpO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY29tcGxldGVuZXNzKTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHExKTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHEyKTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHEzKTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHE0KTtcblxuICByZXR1cm4gY29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVByb2plY3RCdXR0b25zKHRkTGlzdCkge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcInByb2plY3RCdG5zLWNvbnRhaW5lclwiKTtcbiAgY29uc3QgcHJvamVjdFRhZ0xpc3QgPSBjcmVhdGVQcm9qZWN0VGFnTGlzdCh0ZExpc3QpO1xuICBwcm9qZWN0VGFnTGlzdC5mb3JFYWNoKCh0YWcpID0+IHtcbiAgICBjb25zdCBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJ0bi5jbGFzc0xpc3QuYWRkKFwiYnV0dG9uXCIpO1xuICAgIGJ0bi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdC1idG5cIik7XG4gICAgYnRuLnRleHRDb250ZW50ID0gdGFnO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChidG4pO1xuICB9KTtcbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVQcm9qZWN0SGVhZGVyKHRpdGxlKSB7XG4gIGNvbnN0IHBIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XG4gIHBIZWFkZXIuY2xhc3NMaXN0LmFkZChcInBIZWFkZXJcIik7XG4gIHBIZWFkZXIudGV4dENvbnRlbnQgPSB0aXRsZTtcbiAgcmV0dXJuIHBIZWFkZXI7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGRMaXN0RGlzcGxheSh0ZExpc3QpIHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJsaXN0LWRpc3BsYXlcIik7XG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidGRMaXN0LWNvbnRhaW5lclwiKTtcbiAgdGRMaXN0LmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICBjb25zdCB0ZCA9IGNyZWF0ZVRvZG9EaXYoZWxlbWVudCk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRkKTtcbiAgfSk7XG4gIHJldHVybiBjb250YWluZXI7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGRRdWFkRGlzcGxheShxdWFkTGlzdHMpIHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJxdWFkLWRpc3BsYXlcIik7XG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwicXVhZC1jb250YWluZXJcIik7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgNTsgaSsrKSB7XG4gICAgY29uc3QgbmV3UXVhZCA9IGNyZWF0ZVF1YWRDb250YWluZXIocXVhZExpc3RzW2kgLSAxXSk7XG4gICAgbmV3UXVhZC5jbGFzc0xpc3QuYWRkKGBxdWFkJHsgIGl9YCk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG5ld1F1YWQpO1xuICB9XG5cbiAgY29uc3QgdXJnZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdXJnZW50LmNsYXNzTGlzdC5hZGQoXCJxdWFkLWdyaWQtbGFiZWxcIik7XG4gIHVyZ2VudC5jbGFzc0xpc3QuYWRkKFwidXJnZW50XCIpO1xuICB1cmdlbnQudGV4dENvbnRlbnQgPSBcIlVSR0VOVFwiO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQodXJnZW50KTtcblxuICBjb25zdCBsYXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGxhdGVyLmNsYXNzTGlzdC5hZGQoXCJxdWFkLWdyaWQtbGFiZWxcIik7XG4gIGxhdGVyLmNsYXNzTGlzdC5hZGQoXCJsYXRlclwiKTtcbiAgbGF0ZXIudGV4dENvbnRlbnQgPSBcIk5PVCBVUkdFTlRcIjtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxhdGVyKTtcblxuICBjb25zdCBpbXBvcnRhbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBpbXBvcnRhbnQuY2xhc3NMaXN0LmFkZChcInF1YWQtZ3JpZC1sYWJlbFwiKTtcbiAgaW1wb3J0YW50LmNsYXNzTGlzdC5hZGQoXCJyb3RhdGVcIik7XG4gIGltcG9ydGFudC5jbGFzc0xpc3QuYWRkKFwiaW1wb3J0YW50XCIpO1xuICBpbXBvcnRhbnQudGV4dENvbnRlbnQgPSBcIklNUE9SVEFOVFwiO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaW1wb3J0YW50KTtcblxuICBjb25zdCB1bmltcG9ydGFudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHVuaW1wb3J0YW50LmNsYXNzTGlzdC5hZGQoXCJxdWFkLWdyaWQtbGFiZWxcIik7XG4gIHVuaW1wb3J0YW50LmNsYXNzTGlzdC5hZGQoXCJyb3RhdGVcIik7XG4gIHVuaW1wb3J0YW50LmNsYXNzTGlzdC5hZGQoXCJ1bmltcG9ydGFudFwiKTtcbiAgdW5pbXBvcnRhbnQudGV4dENvbnRlbnQgPSBcIiBOT1QgSU1QT1JUQU5UXCI7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh1bmltcG9ydGFudCk7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUXVhZENvbnRhaW5lcihsaXN0KSB7XG4gIGNvbnN0IHF1YWRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBxdWFkQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ0ZExpc3QtY29udGFpbmVyXCIpO1xuICBsaXN0LmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICBjb25zdCB0ZCA9IGNyZWF0ZVRvZG9EaXYoZWxlbWVudCk7XG4gICAgcXVhZENvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZCk7XG4gIH0pO1xuICByZXR1cm4gcXVhZENvbnRhaW5lcjtcbn1cbi8vIEhlbHBlciBGdW5jdGlvbnNcblxuZnVuY3Rpb24gY3JlYXRlVG9kb0Rpdih0ZE9iamVjdCkge1xuICAvLyBDcmVhdGUgY29udGFpbmVyIERpdlxuICBjb25zdCB0b2RvRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdG9kb0Rpdi5jbGFzc0xpc3QuYWRkKFwidG9kb1wiKTtcbiAgdG9kb0Rpdi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWluZGV4XCIsIHRkT2JqZWN0W1wiZGF0YS1pbmRleFwiXSk7XG4gIC8vIGNyZWF0ZSBjaGVja2JveCBpbWcvZGl2IHdpdGggc3JjIGNvbnRyb2xsZWQgYnkgY3NzXG4gIGNvbnN0IHN0YXR1c0JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gIHN0YXR1c0JveC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tib3hcIik7XG4gIHN0YXR1c0JveC5zcmMgPSBcIi4uL3NyYy9JbWFnZXMvdW5jaGVja2VkLWJveC5wbmdcIjtcbiAgLy8gY3JlYXRlIHRpdGxlIGRpdi9idXR0b24gdG8gZXhwYW5kXG4gIGNvbnN0IHRvZG9UaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHRvZG9UaXRsZS5jbGFzc0xpc3QuYWRkKFwidG9kby10aXRsZVwiKTtcbiAgdG9kb1RpdGxlLnRleHRDb250ZW50ID0gdGRPYmplY3QudGl0bGU7XG4gIC8vIGNyZWF0ZSBkdWVEYXRlIGRpdlxuICBjb25zdCBkdWVEYXRlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZHVlRGF0ZURpdi5jbGFzc0xpc3QuYWRkKFwiZHVlRGF0ZS1kaXZcIik7XG4gIGR1ZURhdGVEaXYudGV4dENvbnRlbnQgPSB0ZE9iamVjdC5kdWVEYXRlO1xuICAvLyBjcmVhdGUgUHJpb3JpdHkgZGl2XG4gIGNvbnN0IHByaW9yaXR5RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgcHJpb3JpdHlEaXYuY2xhc3NMaXN0LmFkZChcInByaW9yaXR5LWRpdlwiKTtcbiAgcHJpb3JpdHlEaXYudGV4dENvbnRlbnQgPSB0ZE9iamVjdC5wcmlvcml0eTtcbiAgcHJpb3JpdHlEaXYuc3R5bGUuY29sb3IgPSBnZXRQcmlvcml0eUNvbG9yKHRkT2JqZWN0KTtcbiAgLy8gY3JlYXRlIGVkaXQgYnV0dG9uXG4gIGNvbnN0IGVkaXRCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICBlZGl0QnRuLmNsYXNzTGlzdC5hZGQoXCJlZGl0XCIpO1xuICBlZGl0QnRuLnNyYyA9IFwiLi4vc3JjL0ltYWdlcy9wZW5jaWwucG5nXCI7XG4gIC8vIGNyZWF0ZSBkZWxldGUgYnV0dG9uXG4gIGNvbnN0IGRlbGV0ZUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gIGRlbGV0ZUJ0bi5jbGFzc0xpc3QuYWRkKFwiZGVsZXRlXCIpO1xuICBkZWxldGVCdG4uc3JjID0gXCIuLi9zcmMvSW1hZ2VzL2RlbGV0ZS5wbmdcIjtcbiAgLy8gYXBwZW5kIGVsZW1lbnRzIHRvIGNvbnRhaW5lclxuICB0b2RvRGl2LmFwcGVuZENoaWxkKHN0YXR1c0JveCk7XG4gIHRvZG9EaXYuYXBwZW5kQ2hpbGQodG9kb1RpdGxlKTtcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZChkdWVEYXRlRGl2KTtcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZChwcmlvcml0eURpdik7XG4gIHRvZG9EaXYuYXBwZW5kQ2hpbGQoZWRpdEJ0bik7XG4gIHRvZG9EaXYuYXBwZW5kQ2hpbGQoZGVsZXRlQnRuKTtcblxuICByZXR1cm4gdG9kb0Rpdjtcbn1cblxuZnVuY3Rpb24gc2V0VG9kb1N0YXR1c0ltYWdlKHRkRGl2LCB0ZExpc3QpIHtcbiAgY29uc3QgdGRJbmRleCA9IHRkRGl2LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xuICBjb25zdCBjdXJyZW50U3RhdHVzID0gdGRMaXN0W3RkSW5kZXhdLnN0YXR1c1xuICBjb25zb2xlLmxvZyhgc2V0dGluZyBpbWFnZTogJHtjdXJyZW50U3RhdHVzfWApXG4gIGlmIChjdXJyZW50U3RhdHVzICE9PSBcImNvbXBsZXRlXCIpIHtcbiAgICB0ZERpdi5jbGFzc0xpc3QucmVtb3ZlKFwiY29tcGxldGVcIik7XG4gICAgdGREaXYuZmlyc3RDaGlsZC5zcmMgPSBcIi4uL3NyYy9JbWFnZXMvdW5jaGVja2VkLWJveC5wbmdcIjtcbiAgfSBlbHNlIGlmIChjdXJyZW50U3RhdHVzID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICB0ZERpdi5jbGFzc0xpc3QuYWRkKFwiY29tcGxldGVcIik7XG4gICAgdGREaXYuZmlyc3RDaGlsZC5zcmMgPSBcIi4uL3NyYy9JbWFnZXMvY2hlY2tlZC1jaGVja2JveC5wbmdcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQcmlvcml0eUNvbG9yKHRvZG9PYmplY3QpIHtcbiAgY29uc3Qge3ByaW9yaXR5fSA9IHRvZG9PYmplY3Q7XG4gIGlmIChwcmlvcml0eSA9PT0gXCJIaWdoXCIpIHtcbiAgICByZXR1cm4gXCJyZWRcIjtcbiAgfSBpZiAocHJpb3JpdHkgPT09IFwiTWVkaXVtXCIpIHtcbiAgICByZXR1cm4gXCJibHVlXCI7XG4gIH0gaWYgKHByaW9yaXR5ID09PSBcIkxvd1wiKSB7XG4gICAgcmV0dXJuIFwiYmxhY2tcIjtcbiAgfSBcbiAgICByZXR1cm4gXCJncmV5XCI7XG4gIFxufVxuXG4vLyBFeHBvcnRzXG5cbmV4cG9ydCB7XG4gIGdlbmVyYXRlVGRMaXN0RGlzcGxheSxcbiAgZ2VuZXJhdGVQcm9qZWN0SGVhZGVyLFxuICBjcmVhdGVUb2RvRGl2LFxuICBzZXRUb2RvU3RhdHVzSW1hZ2UsXG4gIGdlbmVyYXRlVGRRdWFkRGlzcGxheSxcbiAgZ2VuZXJhdGVQcm9qZWN0QnV0dG9ucyxcbiAgZ2VuZXJhdGVQcm9qZWN0T3ZlcnZpZXdzRGlzcGxheSxcbn07XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgeyBjcmVhdGVTaXRlIH0gZnJvbSAnLi9zaXRlQ29uc3RhbnRzJztcbmltcG9ydCB7IGNyZWF0ZURhaWx5TGlzdCwgY3JlYXRlVGhpc1dlZWtMaXN0LCBjcmVhdGVUb2RheUxpc3QsIGRlbGV0ZVRvZG8sIGFkZE92ZXJkdWVDbGFzcywgY3JlYXRlUXVhZExpc3RzLCBjcmVhdGVQcm9qZWN0TGlzdCwgbWFpblRvZG9MaXN0IH0gZnJvbSAnLi9hcHBsb2dpYyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVRkTGlzdERpc3BsYXksIGdlbmVyYXRlUHJvamVjdEhlYWRlciwgY3JlYXRlVG9kb0Rpdiwgc2V0VG9kb1N0YXR1c0ltYWdlLCBnZW5lcmF0ZVRkUXVhZERpc3BsYXksIGdlbmVyYXRlUHJvamVjdEJ1dHRvbnMsIGdlbmVyYXRlUHJvamVjdE92ZXJ2aWV3c0Rpc3BsYXkgfSBmcm9tICcuL3NpdGVkeW5hbWljJztcbmltcG9ydCB7IGFkZE5ld1RvZG8gfSBmcm9tICcuL25ld1REJztcbmltcG9ydCB7IGVkaXRUb2RvUHJvcGVydHksIGNoYW5nZUNvbXBsZXRlUHJvcGVydHkgfSBmcm9tICcuL2VkaXRURCc7XG5cbi8vIFNpdGUgaW5pdGlhbGl6YXRpb25cbmxldCBjdXJyZW50VG9kb0xpc3QgPSBbXVxuaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0ZExpc3RcIikpe1xuICAgIHJldHJpZXZlVGRMaXN0KCk7XG59ZWxzZXtcbiAgICBzdG9yZVRkTGlzdChtYWluVG9kb0xpc3QpO1xufSBcbmNyZWF0ZVNpdGUoY3VycmVudFRvZG9MaXN0KTtcbmNvbnN0IG1haW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbicpO1xuY29uc3QgYWxsVGFza3NCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWxsJyk7XG5hbGxUYXNrc0J0bi5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcbmluaXRpYWxpemVEaXNwbGF5KCk7XG5jb25zb2xlLnRhYmxlKGN1cnJlbnRUb2RvTGlzdClcblxuLy8gU2V0dGluZyBMb2NhbCBTdG9yYWdlXG5mdW5jdGlvbiByZXRyaWV2ZVRkTGlzdCgpe1xuICAgIGNvbnN0IGN1cnJlbnRTdG9yZWRUb2RvTGlzdD0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRkTGlzdFwiKSk7XG4gICAgY3VycmVudFRvZG9MaXN0ID0gY3VycmVudFN0b3JlZFRvZG9MaXN0O1xuICAgIHJldHVybiBjdXJyZW50U3RvcmVkVG9kb0xpc3Q7XG5cbn07IFxuZnVuY3Rpb24gc3RvcmVUZExpc3QodGRMaXN0KXtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInRkTGlzdFwiLEpTT04uc3RyaW5naWZ5KHRkTGlzdCkpO1xuICAgIHJldHJpZXZlVGRMaXN0KCk7XG59OyBcblxuXG5cblxuY29uc3QgdG9nZ2xlQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50b2dnbGUtYm94XCIpO1xuY29uc3QgY2lyY2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jaXJjbGVcIik7XG5jb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9nZ2xlLWNoZWNrYm94XCIpO1xuXG5jaXJjbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+c3dpdGNoRGlzcGxheU1vZGUoKSk7XG5cbnRvZ2dsZUJveC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgaWYoY2hlY2tib3guY2hlY2tlZCl7XG4gICAgICAgIGNpcmNsZS5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVgoNDJweClcIjtcbiAgICB9ZWxzZXtcbiAgICAgICAgY2lyY2xlLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWCgwcHgpXCI7XG4gICAgfVxufSk7XG5cblxuXG4vLyBCdXR0b24gbG9naWNcbmNvbnN0IHRvZGF5QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZGF5QnRuJyk7XG50b2RheUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgIHRvZ2dsZU5hdkJ0bnMoZXZlbnQpO1xuICAgIGNsZWFyRG9tRGlzcGxheSgpO1xuICAgIHJlZnJlc2hEaXNwbGF5KCk7XG59KTtcblxuY29uc3QgdGhpc1dlZWtCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2Vla2x5Jyk7XG50aGlzV2Vla0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgIGNsZWFyRG9tRGlzcGxheSgpO1xuICAgIHRvZ2dsZU5hdkJ0bnMoZXZlbnQpO1xuICAgIHJlZnJlc2hEaXNwbGF5KCk7XG59KTtcblxuYWxsVGFza3NCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICBjbGVhckRvbURpc3BsYXkoKTtcbiAgICB0b2dnbGVOYXZCdG5zKGV2ZW50KTtcbiAgICByZWZyZXNoRGlzcGxheSgpO1xufSk7XG5cbmNvbnN0IGRhaWx5QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhaWx5Jyk7XG5kYWlseUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgIGNsZWFyRG9tRGlzcGxheSgpO1xuICAgIHRvZ2dsZU5hdkJ0bnMoZXZlbnQpO1xuICAgIHJlZnJlc2hEaXNwbGF5KCk7XG59KTtcblxuY29uc3QgcHJvamVjdE5hdkJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0cycpO1xucHJvamVjdE5hdkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgIHRvZ2dsZU5hdkJ0bnMoZXZlbnQpO1xuICAgIHByb2plY3ROYXZCdG4uYWZ0ZXIoZ2VuZXJhdGVQcm9qZWN0QnV0dG9ucyhjdXJyZW50VG9kb0xpc3QpKTtcbiAgICBjbGVhckRvbURpc3BsYXkoKTtcbiAgICBtYWluLmFwcGVuZENoaWxkKGdlbmVyYXRlUHJvamVjdEhlYWRlcignQWxsIFByb2plY3RzJykpO1xuICAgIG1haW4uYXBwZW5kQ2hpbGQoZ2VuZXJhdGVQcm9qZWN0T3ZlcnZpZXdzRGlzcGxheShjdXJyZW50VG9kb0xpc3QpKTtcbiAgICBhY3RpdmF0ZUFsbEJ0bnMoKTtcbiAgICAvLyBhZGQgY29kZSBmb3IgY2xlYXJpbmcgRE9NIGFuZCBzaG93aW5nIHByb2plY3QgT3ZlcnZpZXdzXG4gICAgY29uc3QgcHJvamVjdEJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdC1idG4nKTtcbiAgICBwcm9qZWN0QnRucy5mb3JFYWNoKChidG4pID0+IGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCk9PntcbiAgICAgICAgY2xlYXJEb21EaXNwbGF5KCk7XG4gICAgICAgIHRvZ2dsZU5hdkJ0bnMoZXZlbnQpO1xuICAgICAgICByZWZyZXNoRGlzcGxheSgpO1xuICAgICAgICBwcm9qZWN0QnRucy5mb3JFYWNoKChidG4pPT5idG4ucmVtb3ZlKCkpXG4gICAgfSkpO1xufSk7XG5cblxuXG5jb25zdCBuZXdUREJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXctdG9kby1idG4nKTtcbmNvbnN0IG5ld1RvZG9EaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3VG9kb0RpYWxvZycpO1xuY29uc3QgY2FuY2VsQnRuID0gbmV3VG9kb0RpYWxvZy5xdWVyeVNlbGVjdG9yKCcjY2FuY2VsQnRuJyk7XG5jb25zdCBjb25maXJtQnRuID0gbmV3VG9kb0RpYWxvZy5xdWVyeVNlbGVjdG9yKFwiI2NvbmZpcm1CdG5cIik7XG5cbm5ld1REQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgbmV3VERCdG4uY2xhc3NMaXN0LnRvZ2dsZSgnY2xpY2tlZCcpO1xuICAgIG5ld1RvZG9EaWFsb2cuc2hvd01vZGFsKCk7XG59KVxuXG5jb25maXJtQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBuZXdUZE9iamVjdCA9IGFkZE5ld1RvZG8oY3VycmVudFRvZG9MaXN0KTtcbiAgICBkaXNwbGF5TmV3VGREaXYobmV3VGRPYmplY3QpO1xuICAgIGFjdGl2YXRlQWxsQnRucygpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUZvcm0nKS5yZXNldCgpO1xuICAgIG5ld1RvZG9EaWFsb2cuY2xvc2UoKTtcbiAgICBzdG9yZVRkTGlzdChjdXJyZW50VG9kb0xpc3QpO1xufSk7XG5cbmNhbmNlbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXlGb3JtJykucmVzZXQoKTtcbiAgICBuZXdUb2RvRGlhbG9nLmNsb3NlKCk7XG59KTtcblxuXG5cblxuXG5cblxuLy8gSGVscGVyIGZ1bmN0aW9uc1xuXG5mdW5jdGlvbiBzd2l0Y2hEaXNwbGF5TW9kZSgpe1xuICAgIG1haW4uY2xhc3NMaXN0LnRvZ2dsZSgncXVhZCcpO1xuICAgIGNsZWFyRG9tRGlzcGxheSgpO1xuICAgIHJlZnJlc2hEaXNwbGF5KCk7XG59XG5cblxuXG5mdW5jdGlvbiBkaXNwbGF5TmV3VGREaXYodGRPYmplY3QpIHtcbiAgICBjb25zdCBuZXdEaXYgPSBjcmVhdGVUb2RvRGl2KHRkT2JqZWN0KTtcbiAgICBjb25zdCB0ZEluZGV4ID0gY3VycmVudFRvZG9MaXN0LmZpbmRJbmRleChlbGVtZW50ID0+IGVsZW1lbnQudGl0bGUgPT09IHRkT2JqZWN0LnRpdGxlKTtcbiAgICBjb25zdCBkaXZMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRvZG8nKVxuICAgIGlmICh0ZEluZGV4ICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IHNpYmxpbmdUaXRsZSA9IGN1cnJlbnRUb2RvTGlzdFt0ZEluZGV4IC0gMV0udGl0bGU7XG4gICAgICAgIGRpdkxpc3QuZm9yRWFjaCgoZGl2KSA9PiB7XG4gICAgICAgICAgICBpZiAoZGl2LnRleHRDb250ZW50LmluY2x1ZGVzKHNpYmxpbmdUaXRsZSkpIHtcbiAgICAgICAgICAgICAgICBkaXYuYWZ0ZXIobmV3RGl2KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNlY29uZFRpdGxlID0gY3VycmVudFRvZG9MaXN0WzFdLnRpdGxlO1xuICAgICAgICBkaXZMaXN0LmZvckVhY2goKGRpdikgPT4ge1xuICAgICAgICAgICAgaWYgKGRpdi50ZXh0Q29udGVudC5pbmNsdWRlcyhzZWNvbmRUaXRsZSkpIHtcbiAgICAgICAgICAgICAgICBkaXYuYmVmb3JlKG5ld0Rpdik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5cbmZ1bmN0aW9uIGFjdGl2YXRlQWxsQnRucygpe1xuICAgIGFjdGl2YXRlQ2hlY2tCb3hlcygpO1xuICAgIGFjdGl2YXRlRGVsZXRlQnRucygpO1xuICAgIGFjdGl2YXRlRWRpdEJ0bnMoKTtcbn07XG5cbmZ1bmN0aW9uIGFjdGl2YXRlRGVsZXRlQnRucygpIHtcbiAgICBjb25zdCBkZWxldGVCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlbGV0ZScpXG4gICAgZGVsZXRlQnRucy5mb3JFYWNoKChCdG4pID0+IEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gZGVsZXRlVGREaXYoZXZlbnQpKSk7XG59O1xuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoZWNrQm94ZXMoKXtcbiAgICBjb25zdCBjaGVja0JveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNoZWNrYm94Jyk7XG4gICAgY2hlY2tCb3hlcy5mb3JFYWNoKChib3gpID0+IGJveC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gdG9nZ2xlQ29tcGxldGUoZXZlbnQpKSk7XG59O1xuXG5mdW5jdGlvbiBhY3RpdmF0ZUVkaXRCdG5zKCl7XG4gICAgY29uc3QgZWRpdFRkQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5lZGl0Jyk7XG4gICAgY29uc3QgZWRpdFRvZG9EaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdFRvZG9EaWFsb2cnKTtcbiAgICBjb25zdCBlZGl0Q2FuY2VsQnRuID0gZWRpdFRvZG9EaWFsb2cucXVlcnlTZWxlY3RvcignI2VkaXRDYW5jZWxCdG4nKTtcbiAgICBjb25zdCBlZGl0Q29uZmlybUJ0biA9IGVkaXRUb2RvRGlhbG9nLnF1ZXJ5U2VsZWN0b3IoXCIjZWRpdENvbmZpcm1CdG5cIik7XG5cbiAgICBlZGl0VGRCdG5zLmZvckVhY2goKEJ0bikgPT4gQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRkVGl0bGUgPSAoZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuZmlyc3RDaGlsZC5uZXh0U2libGluZy50ZXh0Q29udGVudCk7XG4gICAgICAgIGNvbnN0IHRkSW5kZXggPSBjdXJyZW50VG9kb0xpc3QuZmluZEluZGV4KHRkT2JqZWN0ID0+IHRkT2JqZWN0LnRpdGxlID09PSB0ZFRpdGxlKTtcbiAgICAgICAgZWRpdFRvZG9EaWFsb2cuc2hvd01vZGFsKCk7XG4gICAgICAgIGVkaXRDb25maXJtQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZWRpdFRvZG9Qcm9wZXJ0eSh0ZEluZGV4LCBjdXJyZW50VG9kb0xpc3QpO1xuICAgICAgICAgICAgY3VycmVudFRvZG9MaXN0LnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGEuZHVlRGF0ZSkgLSBuZXcgRGF0ZShiLmR1ZURhdGUpKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0Rm9ybScpLnJlc2V0KCk7XG4gICAgICAgICAgICBlZGl0VG9kb0RpYWxvZy5jbG9zZSgpO1xuICAgICAgICAgICAgc3RvcmVUZExpc3QoY3VycmVudFRvZG9MaXN0KTtcbiAgICAgICAgICAgIGNsZWFyRG9tRGlzcGxheSgpO1xuICAgICAgICAgICAgcmVmcmVzaERpc3BsYXkoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVkaXRDYW5jZWxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdEZvcm0nKS5yZXNldCgpO1xuICAgICAgICAgICAgZWRpdFRvZG9EaWFsb2cuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfSkpO1xufVxuXG5cbmZ1bmN0aW9uIHRvZ2dsZUNvbXBsZXRlKGV2ZW50KSB7XG4gICAgY29uc3QgdGREaXYgPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICBjb25zb2xlLmxvZyh0ZERpdik7XG4gICAgY29uc3QgdGRJbmRleCA9IHRkRGl2LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xuICAgIGNoYW5nZUNvbXBsZXRlUHJvcGVydHkodGRJbmRleCwgY3VycmVudFRvZG9MaXN0KTtcbiAgICBzZXRUb2RvU3RhdHVzSW1hZ2UodGREaXYsIGN1cnJlbnRUb2RvTGlzdCk7ICBcbiAgICBzdG9yZVRkTGlzdChjdXJyZW50VG9kb0xpc3QpO1xuICAgIGNvbnNvbGUudGFibGUoY3VycmVudFRvZG9MaXN0KTtcbn07XG5cblxuZnVuY3Rpb24gZGVsZXRlVGREaXYoZXZlbnQpIHtcbiAgICBjb25zdCB0ZFRpdGxlID0gKGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmZpcnN0Q2hpbGQubmV4dFNpYmxpbmcudGV4dENvbnRlbnQpO1xuICAgIGRlbGV0ZVRvZG8odGRUaXRsZSwgY3VycmVudFRvZG9MaXN0KTtcbiAgICBjb25zdCB0ZERpdiA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgIHRkRGl2LnJlbW92ZSgpO1xuICAgIHN0b3JlVGRMaXN0KGN1cnJlbnRUb2RvTGlzdCk7XG59O1xuXG5mdW5jdGlvbiB0b2dnbGVOYXZCdG5zKGV2ZW50KSB7XG4gICAgY29uc3Qgb2xkQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFjdGl2ZScpO1xuICAgIG9sZEJ0bi5mb3JFYWNoKChlbGVtZW50KSA9PiBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpKVxuICAgIGNvbnN0IGJ0biA9IGV2ZW50LnRhcmdldDtcbiAgICBidG4uY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJyk7XG59O1xuXG5mdW5jdGlvbiBjbGVhckRvbURpc3BsYXkoKSB7XG4gICAgd2hpbGUobWFpbi5maXJzdENoaWxkKXtcbiAgICAgICAgbWFpbi5yZW1vdmVDaGlsZChtYWluLmZpcnN0Q2hpbGQpO1xuICAgIH07XG59O1xuXG5mdW5jdGlvbiByZWZyZXNoRGlzcGxheSgpe1xuICAgIGNvbnN0IGN1cnJlbnRUYWIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWN0aXZlJyk7XG4gICAgY29uc3QgaGVhZGVyID0gY3VycmVudFRhYi50ZXh0Q29udGVudDtcbiAgICBsZXQgY29udGVudCA9ICcnO1xuICAgIHN3aXRjaCAoaGVhZGVyKXtcbiAgICAgICAgY2FzZSAnVG9kYXknOlxuICAgICAgICAgICAgY29udGVudCA9IGNyZWF0ZVRvZGF5TGlzdChjdXJyZW50VG9kb0xpc3QpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1RoaXMgV2Vlayc6XG4gICAgICAgICAgICBjb250ZW50ID0gY3JlYXRlVGhpc1dlZWtMaXN0KGN1cnJlbnRUb2RvTGlzdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQWxsIFRhc2tzJzpcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjdXJyZW50VG9kb0xpc3Q7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRGFpbHkgVGFza3MnOlxuICAgICAgICAgICAgY29udGVudCA9IGNyZWF0ZURhaWx5TGlzdChjdXJyZW50VG9kb0xpc3QpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIGZvciBwcm9qZWN0IHRhYnNcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjcmVhdGVQcm9qZWN0TGlzdChjdXJyZW50VG9kb0xpc3QsIGhlYWRlcik7IFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfTtcbiAgICBtYWluLmFwcGVuZENoaWxkKGdlbmVyYXRlUHJvamVjdEhlYWRlcihoZWFkZXIpKTtcbiAgICBpZiAobWFpbi5jbGFzc0xpc3QuY29udGFpbnMoJ3F1YWQnKSkge1xuICAgICAgICBtYWluLmFwcGVuZENoaWxkKGdlbmVyYXRlVGRRdWFkRGlzcGxheShjcmVhdGVRdWFkTGlzdHMoY29udGVudCkpKTtcbiAgICAgICAgYWRkT3ZlcmR1ZUNsYXNzKGN1cnJlbnRUb2RvTGlzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbWFpbi5hcHBlbmRDaGlsZChnZW5lcmF0ZVRkTGlzdERpc3BsYXkoY29udGVudCkpO1xuICAgICAgICBhZGRPdmVyZHVlQ2xhc3MoY3VycmVudFRvZG9MaXN0KTtcbiAgICB9O1xuICAgIGFjdGl2YXRlQWxsQnRucygpO1xuICAgIGNvbnN0IHRkRGl2TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b2RvJyk7XG4gICAgdGREaXZMaXN0LmZvckVhY2goKGRpdik9PiB7XG4gICAgICAgIHNldFRvZG9TdGF0dXNJbWFnZShkaXYsIGN1cnJlbnRUb2RvTGlzdCk7XG4gICAgfSk7XG59O1xuXG5mdW5jdGlvbiBpbml0aWFsaXplRGlzcGxheSgpe1xuICAgIG1haW4uYXBwZW5kQ2hpbGQoZ2VuZXJhdGVQcm9qZWN0SGVhZGVyKCdBbGwgdGFza3MnKSk7XG4gICAgaWYgKG1haW4uY2xhc3NMaXN0LmNvbnRhaW5zKCdxdWFkJykpIHtcbiAgICAgICAgbWFpbi5hcHBlbmRDaGlsZChnZW5lcmF0ZVRkUXVhZERpc3BsYXkoY3JlYXRlUXVhZExpc3RzKGN1cnJlbnRUb2RvTGlzdCkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtYWluLmFwcGVuZENoaWxkKGdlbmVyYXRlVGRMaXN0RGlzcGxheShjdXJyZW50VG9kb0xpc3QpKTtcbiAgICB9O1xuICAgIGFkZE92ZXJkdWVDbGFzcyhjdXJyZW50VG9kb0xpc3QpO1xuICAgIGFjdGl2YXRlQWxsQnRucygpO1xuICAgIGNvbnN0IHRkRGl2TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b2RvJyk7XG4gICAgdGREaXZMaXN0LmZvckVhY2goKGRpdik9PiB7XG4gICAgICAgIHNldFRvZG9TdGF0dXNJbWFnZShkaXYsIGN1cnJlbnRUb2RvTGlzdCk7XG4gICAgfSk7XG59O1xuIFxuIiwiXG5cbi8vIE5ldyBUb2RvXG5mdW5jdGlvbiBlZGl0VG9kb0Zvcm0oKSB7XG4gIGNvbnN0IGRpYWxvZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaWFsb2dcIik7XG4gIGRpYWxvZy5jbGFzc0xpc3QuYWRkKFwibW9kYWxcIik7XG4gIGRpYWxvZy5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImVkaXRUb2RvRGlhbG9nXCIpO1xuXG4gIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgZm9ybS5zZXRBdHRyaWJ1dGUoXCJtZXRob2RcIiwgXCJkaWFsb2dcIik7XG4gIGZvcm0uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJlZGl0Rm9ybVwiKTtcblxuICBjb25zdCBwcm9wZXJ0eVJvdyA9IGNyZWF0ZVNlbGVjdEZvcm1Sb3coXCJ0ZC1wcm9wZXJ0eVwiLCBcIkNob29zZSBhIHByb3BlcnR5XCIsIFtcbiAgICBcInRpdGxlXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiLFxuICAgIFwiZHVlRGF0ZVwiLFxuICAgIFwicHJpb3JpdHlcIixcbiAgICBcIm5vdGVzXCIsXG4gICAgXCJwcm9qZWN0IHRhZ1wiLFxuICBdKTtcbiAgY29uc3QgbmV3VmFsdWVSb3cgPSBjcmVhdGVGb3JtUm93KFwibmV3VmFsdWVcIiwgXCJcIiwgXCJ0ZXh0XCIpO1xuXG4gIGNvbnN0IGJ0bkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGJ0bkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZm9ybS1idXR0b25zXCIpO1xuXG4gIGNvbnN0IGNhbmNlbEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIGNhbmNlbEJ0bi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImVkaXRDYW5jZWxCdG5cIik7XG4gIGNhbmNlbEJ0bi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcImNhbmNlbFwiKTtcbiAgY2FuY2VsQnRuLnNldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIiwgXCJkaWFsb2dcIik7XG4gIGNhbmNlbEJ0bi50ZXh0Q29udGVudCA9IFwiQ2FuY2VsXCI7XG5cbiAgY29uc3QgY29uZmlybUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIGNvbmZpcm1CdG4uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJlZGl0Q29uZmlybUJ0blwiKTtcbiAgY29uZmlybUJ0bi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcImRlZmF1bHRcIik7XG4gIGNvbmZpcm1CdG4udGV4dENvbnRlbnQgPSBcIkNvbmZpcm1cIjtcblxuICBidG5Db250YWluZXIuYXBwZW5kQ2hpbGQoY2FuY2VsQnRuKTtcbiAgYnRuQ29udGFpbmVyLmFwcGVuZENoaWxkKGNvbmZpcm1CdG4pO1xuICBmb3JtLmFwcGVuZENoaWxkKHByb3BlcnR5Um93KTtcbiAgZm9ybS5hcHBlbmRDaGlsZChuZXdWYWx1ZVJvdyk7XG4gIGZvcm0uYXBwZW5kQ2hpbGQoYnRuQ29udGFpbmVyKTtcbiAgZGlhbG9nLmFwcGVuZENoaWxkKGZvcm0pO1xuICByZXR1cm4gZGlhbG9nO1xufVxuXG5mdW5jdGlvbiBlZGl0VG9kb1Byb3BlcnR5KHRkSW5kZXgsIHRkTGlzdCkge1xuICBjb25zdCBlZGl0UHJvcGVydHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRkLXByb3BlcnR5XCIpLnZhbHVlO1xuICBjb25zdCBuZXdWYWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV3VmFsdWVcIikudmFsdWU7XG4gIHRkTGlzdFt0ZEluZGV4XVtlZGl0UHJvcGVydHldID0gbmV3VmFsdWU7XG4gIGNvbnN0IGVkaXRlZFRkID0gdGRMaXN0W3RkSW5kZXhdO1xuICByZXR1cm4gZWRpdGVkVGQ7XG59XG5cbmZ1bmN0aW9uIGNoYW5nZUNvbXBsZXRlUHJvcGVydHkodGRJbmRleCwgdGRMaXN0KSB7XG4gIGNvbnN0IGN1cnJlbnRTdGF0dXMgPSB0ZExpc3RbdGRJbmRleF0uc3RhdHVzXG4gIGNvbnNvbGUubG9nKGBPcmlnaW5hbCBTdGF0dXM6ICR7Y3VycmVudFN0YXR1c31gKVxuICBpZiAodGRMaXN0W3RkSW5kZXhdLnN0YXR1cyA9PT0gXCJcIikge1xuICAgIHRkTGlzdFt0ZEluZGV4XS5zdGF0dXMgPSBcImNvbXBsZXRlXCI7XG4gIH0gZWxzZSB7XG4gICAgdGRMaXN0W3RkSW5kZXhdLnN0YXR1cyA9IFwiXCI7XG4gIH1cbiAgY29uc29sZS5sb2coYE5ldyBzdGF0dXM6ICR7dGRMaXN0W3RkSW5kZXhdLnN0YXR1c31gKVxuICByZXR1cm4gdGRMaXN0W3RkSW5kZXhdLnN0YXR1c1xufVxuXG4vLyBoZWxwZXIgZnVuY3Rpb25zXG5mdW5jdGlvbiBjcmVhdGVGb3JtUm93KGlkLCB0aXRsZSwgaVR5cGUpIHtcbiAgY29uc3QgZm9ybVJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGZvcm1Sb3cuY2xhc3NMaXN0LmFkZChcImZvcm0tcm93XCIpO1xuXG4gIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBsYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgaWQpO1xuICBsYWJlbC50ZXh0Q29udGVudCA9IHRpdGxlO1xuXG4gIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIGlUeXBlKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBpZCk7XG4gIGlucHV0LnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcblxuICBmb3JtUm93LmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgZm9ybVJvdy5hcHBlbmRDaGlsZChpbnB1dCk7XG4gIHJldHVybiBmb3JtUm93O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RGb3JtUm93KGlkLCB0aXRsZSwgb3B0aW9uc0xpc3QpIHtcbiAgY29uc3QgZm9ybVJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGZvcm1Sb3cuY2xhc3NMaXN0LmFkZChcImZvcm0tcm93XCIpO1xuXG4gIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBsYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgaWQpO1xuICBsYWJlbC50ZXh0Q29udGVudCA9IHRpdGxlO1xuXG4gIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gIHNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZCk7XG4gIHNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIGlkKTtcblxuICBvcHRpb25zTGlzdC5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICBjb25zdCBjdXJyZW50T3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICBjdXJyZW50T3B0aW9uLnRleHRDb250ZW50ID0gb3B0aW9uO1xuICAgIHNlbGVjdC5hcHBlbmRDaGlsZChjdXJyZW50T3B0aW9uKTtcbiAgfSk7XG5cbiAgZm9ybVJvdy5hcHBlbmRDaGlsZChsYWJlbCk7XG4gIGZvcm1Sb3cuYXBwZW5kQ2hpbGQoc2VsZWN0KTtcbiAgcmV0dXJuIGZvcm1Sb3c7XG59XG5cbmV4cG9ydCB7IGVkaXRUb2RvUHJvcGVydHksIGVkaXRUb2RvRm9ybSwgY2hhbmdlQ29tcGxldGVQcm9wZXJ0eSB9O1xuIl0sIm5hbWVzIjpbInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJnU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiRGF0ZSIsImNvbnN0cnVjdG9yIiwiTmFOIiwiaXNWYWxpZCIsImRhdGUiLCJ2YWx1ZSIsIl9kYXRlIiwiaXNOYU4iLCJOdW1iZXIiLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiYnVpbGRGb3JtYXRMb25nRm4iLCJhcmdzIiwib3B0aW9ucyIsIndpZHRoIiwiU3RyaW5nIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0cyIsImZvcm1hdExvbmciLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsInZhbHVlc0FycmF5IiwiY29udGV4dCIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsImJ1aWxkTWF0Y2hGbiIsInN0cmluZyIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJsZW5ndGgiLCJ0ZXN0IiwiZmluZEluZGV4Iiwib2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJzbGljZSIsImVuVVMiLCJjb2RlIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlbiIsImNvdW50IiwicmVzdWx0IiwidG9rZW5WYWx1ZSIsInJlcGxhY2UiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfYmFzZURhdGUiLCJfb3B0aW9ucyIsImxvY2FsaXplIiwib3JkaW5hbE51bWJlciIsImRpcnR5TnVtYmVyIiwibnVtYmVyIiwicmVtMTAwIiwiZXJhIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwicXVhcnRlciIsIm1vbnRoIiwiZGF5IiwiZGF5UGVyaW9kIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZUludCIsInBhcnNlUmVzdWx0IiwiYW55IiwiaW5kZXgiLCJ3ZWVrU3RhcnRzT24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJkZWZhdWx0T3B0aW9ucyIsImdldERlZmF1bHRPcHRpb25zIiwiTWF0aCIsInBvdyIsIm1pbGxpc2Vjb25kc0luV2VlayIsIm1pbGxpc2Vjb25kc0luRGF5Iiwic3RhcnRPZkRheSIsInNldEhvdXJzIiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsInV0Y0RhdGUiLCJVVEMiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJzZXRVVENGdWxsWWVhciIsImdldFRpbWUiLCJjb25zdHJ1Y3RGcm9tIiwiZ2V0RGF5T2ZZZWFyIiwiZGF0ZUxlZnQiLCJkYXRlUmlnaHQiLCJzdGFydE9mRGF5TGVmdCIsInN0YXJ0T2ZEYXlSaWdodCIsInRpbWVzdGFtcExlZnQiLCJ0aW1lc3RhbXBSaWdodCIsInJvdW5kIiwiZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIiwiY2xlYW5EYXRlIiwic2V0RnVsbFllYXIiLCJzdGFydE9mWWVhciIsInN0YXJ0T2ZXZWVrIiwibG9jYWxlIiwiZ2V0RGF5IiwiZGlmZiIsInNldERhdGUiLCJzdGFydE9mSVNPV2VlayIsImdldElTT1dlZWtZZWFyIiwieWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwiZ2V0SVNPV2VlayIsImZvdXJ0aE9mSmFudWFyeSIsInN0YXJ0T2ZJU09XZWVrWWVhciIsImdldFdlZWtZZWFyIiwiZmlyc3RXZWVrT2ZOZXh0WWVhciIsImZpcnN0V2Vla09mVGhpc1llYXIiLCJnZXRXZWVrIiwiZmlyc3RXZWVrIiwic3RhcnRPZldlZWtZZWFyIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwiYWJzIiwicGFkU3RhcnQiLCJsaWdodEZvcm1hdHRlcnMiLCJ5Iiwic2lnbmVkWWVhciIsIk0iLCJkIiwiYSIsImRheVBlcmlvZEVudW1WYWx1ZSIsInRvVXBwZXJDYXNlIiwiaCIsIkgiLCJtIiwicyIsIlMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImZsb29yIiwiZm9ybWF0dGVycyIsIkciLCJ1bml0IiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJjZWlsIiwicSIsIkwiLCJ3Iiwid2VlayIsIkkiLCJpc29XZWVrIiwiRCIsImRheU9mWWVhciIsIkUiLCJkYXlPZldlZWsiLCJlIiwibG9jYWxEYXlPZldlZWsiLCJjIiwiaSIsImlzb0RheU9mV2VlayIsInRvTG93ZXJDYXNlIiwiYiIsImhvdXJzIiwiQiIsIksiLCJrIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJ4IiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJvZmZzZXQiLCJkZWxpbWl0ZXIiLCJzaWduIiwiYWJzT2Zmc2V0IiwibWludXRlcyIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsInRpbWVMb25nRm9ybWF0dGVyIiwibG9uZ0Zvcm1hdHRlcnMiLCJwIiwiUCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJkYXRlVGltZUZvcm1hdCIsInByb3RlY3RlZERheU9mWWVhclRva2VucyIsInByb3RlY3RlZFdlZWtZZWFyVG9rZW5zIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImZvcm1hdCIsImlucHV0IiwiUmFuZ2VFcnJvciIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZm9ybWF0U3RyIiwiZm9ybWF0dGVyT3B0aW9ucyIsIm1hcCIsInN1YnN0cmluZyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsImpvaW4iLCJtYXRjaGVkIiwiY2xlYW5Fc2NhcGVkU3RyaW5nIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwiaW5kZXhPZiIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiYWRkRGF5cyIsImFtb3VudCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJub3RlcyIsInByb2plY3RUYWciLCJ0aGlzIiwidG9Mb2NhbGVTdHJpbmciLCJkdWVEYXRlRm9ybWF0IiwidG9kb3MiLCJzdGF0dXMiLCJQcm9qZWN0IiwidGRMaXN0IiwibGlzdCIsImZpbHRlciIsInRkIiwiaGFyZENvZGVURHMiLCJkZXNjcmlwdCIsIm5ld1RvZG8iLCJwdXNoIiwic29ydCIsImluZGV4TGlzdCIsImFkZE92ZXJkdWVDbGFzcyIsIm92ZXJkdWVMaXN0IiwiZm9yRWFjaCIsInRkT2JqZWN0IiwiZGF0ZVRvQ29tcGFyZSIsImNoZWNrSWZPdmVyZHVlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGl2IiwidGRJbmRleCIsImdldEF0dHJpYnV0ZSIsImluY2x1ZGVzIiwiY2xhc3NMaXN0IiwiYWRkIiwiY3JlYXRlUHJvamVjdFRhZ0xpc3QiLCJwcm9qZWN0VGFnTGlzdCIsIm5ld1Byb2plY3QiLCJjcmVhdGVRdWFkTGlzdHMiLCJ1cmdlbmN5RGF0ZSIsImNyZWF0ZUZvcm1Sb3ciLCJpZCIsImlUeXBlIiwiZm9ybVJvdyIsImNyZWF0ZUVsZW1lbnQiLCJsYWJlbCIsInNldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVTZWxlY3RGb3JtUm93Iiwib3B0aW9uc0xpc3QiLCJzZWxlY3QiLCJvcHRpb24iLCJjdXJyZW50T3B0aW9uIiwiY29udGVudCIsImdldEVsZW1lbnRCeUlkIiwidGFza0dyYW1tYXIiLCJudW0iLCJ0YXNrIiwiZ2VuZXJhdGVQcm9qZWN0SGVhZGVyIiwicEhlYWRlciIsImdlbmVyYXRlVGRMaXN0RGlzcGxheSIsImNvbnRhaW5lciIsImVsZW1lbnQiLCJjcmVhdGVUb2RvRGl2IiwiZ2VuZXJhdGVUZFF1YWREaXNwbGF5IiwicXVhZExpc3RzIiwibmV3UXVhZCIsImNyZWF0ZVF1YWRDb250YWluZXIiLCJ1cmdlbnQiLCJsYXRlciIsImltcG9ydGFudCIsInVuaW1wb3J0YW50IiwicXVhZENvbnRhaW5lciIsInRvZG9EaXYiLCJzdGF0dXNCb3giLCJzcmMiLCJ0b2RvVGl0bGUiLCJkdWVEYXRlRGl2IiwicHJpb3JpdHlEaXYiLCJzdHlsZSIsImNvbG9yIiwidG9kb09iamVjdCIsImdldFByaW9yaXR5Q29sb3IiLCJlZGl0QnRuIiwiZGVsZXRlQnRuIiwic2V0VG9kb1N0YXR1c0ltYWdlIiwidGREaXYiLCJjdXJyZW50U3RhdHVzIiwiY29uc29sZSIsImxvZyIsInJlbW92ZSIsImZpcnN0Q2hpbGQiLCJjdXJyZW50VG9kb0xpc3QiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicmV0cmlldmVUZExpc3QiLCJzdG9yZVRkTGlzdCIsImhlYWRlciIsImxvZ29UaXRsZUJveCIsImxvZ28iLCJoZWFkZXJSaWdodCIsInVzZXJEaXNwbGF5IiwiZGlzcGxheVRvZ2dsZUJveCIsInRvZ2dsZUJ0biIsInRvZ2dsZUNpcmNsZSIsImNyZWF0ZUhlYWRlciIsIm5hdkJhciIsInRvZGF5QnRuIiwid2Vla0J0biIsImFsbEJ0biIsImRhaWx5QnRuIiwicHJvamVjdEJ0biIsIm5ld1REIiwiY3JlYXRlTmF2QmFyIiwibWFpbiIsImNyZWF0ZU1haW5EaXYiLCJmb290ZXIiLCJjcmVhdGVGb290ZXIiLCJkaWFsb2ciLCJmb3JtIiwidGl0bGVSb3ciLCJkZXNjcmlwdFJvdyIsImRhdGVSb3ciLCJwcmlvcml0eVJvdyIsInByb2plY3RSb3ciLCJidG5Db250YWluZXIiLCJjYW5jZWxCdG4iLCJjb25maXJtQnRuIiwiY3JlYXRlTmV3VG9kb0Zvcm0iLCJwcm9wZXJ0eVJvdyIsIm5ld1ZhbHVlUm93IiwiZWRpdFRvZG9Gb3JtIiwiYWxsVGFza3NCdG4iLCJjdXJyZW50U3RvcmVkVG9kb0xpc3QiLCJKU09OIiwicGFyc2UiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwidG9nZ2xlIiwiY29udGFpbnMiLCJhY3RpdmF0ZUFsbEJ0bnMiLCJ0YWJsZSIsInRvZ2dsZUJveCIsInF1ZXJ5U2VsZWN0b3IiLCJjaXJjbGUiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xlYXJEb21EaXNwbGF5IiwicmVmcmVzaERpc3BsYXkiLCJjaGVja2VkIiwidHJhbnNmb3JtIiwiZXZlbnQiLCJ0b2dnbGVOYXZCdG5zIiwicHJvamVjdE5hdkJ0biIsImFmdGVyIiwidGFnIiwiYnRuIiwiZ2VuZXJhdGVQcm9qZWN0QnV0dG9ucyIsInByb2plY3RPYmplY3RMaXN0IiwicHJvamVjdFRkTGlzdHMiLCJjdXJyZW50UHJvamVjdCIsImNyZWF0ZVByb2plY3RURExpc3RzIiwicHJvamVjdE9iamVjdCIsInRpdGxlRGl2IiwicHJvamVjdFN0YXRzIiwicHJvamVjdExpc3QiLCJudW1Db21wbGV0ZWQiLCJudW1UZHMiLCJudW1RMSIsIm51bVEyIiwibnVtUTMiLCJudW1RNCIsImdldFByb2plY3RTdGF0cyIsImNvbXBsZXRlbmVzcyIsInExIiwidGFzazEiLCJxMiIsInRhc2syIiwicTMiLCJ0YXNrMyIsInE0IiwidGFzazQiLCJnZW5lcmF0ZVN0YXRzRGl2IiwiZ2VuZXJhdGVQcm9qZWN0T3ZlcnZpZXdzRGlzcGxheSIsInByb2plY3RCdG5zIiwibmV3VERCdG4iLCJuZXdUb2RvRGlhbG9nIiwiYm94IiwidGFyZ2V0IiwicGFyZW50RWxlbWVudCIsImNoYW5nZUNvbXBsZXRlUHJvcGVydHkiLCJ0b2dnbGVDb21wbGV0ZSIsIkJ0biIsInRkVGl0bGUiLCJzcGxpY2UiLCJkZWxldGVUb2RvIiwibmV4dFNpYmxpbmciLCJkZWxldGVUZERpdiIsImVkaXRUZEJ0bnMiLCJlZGl0VG9kb0RpYWxvZyIsImVkaXRDYW5jZWxCdG4iLCJlZGl0Q29uZmlybUJ0biIsInNob3dNb2RhbCIsInByZXZlbnREZWZhdWx0IiwiZWRpdFByb3BlcnR5IiwibmV3VmFsdWUiLCJlZGl0VG9kb1Byb3BlcnR5IiwicmVzZXQiLCJjbG9zZSIsImFjdGl2YXRlRWRpdEJ0bnMiLCJyZW1vdmVDaGlsZCIsImNyZWF0ZVRvZGF5TGlzdCIsImNyZWF0ZVRoaXNXZWVrTGlzdCIsImNyZWF0ZURhaWx5TGlzdCIsImNyZWF0ZVByb2plY3RMaXN0IiwibmV3VGRPYmplY3QiLCJhZGROZXdUb2RvIiwibmV3RGl2IiwiZGl2TGlzdCIsInNpYmxpbmdUaXRsZSIsInNlY29uZFRpdGxlIiwiYmVmb3JlIiwiZGlzcGxheU5ld1RkRGl2Il0sInNvdXJjZVJvb3QiOiIifQ==